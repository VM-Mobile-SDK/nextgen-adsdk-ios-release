{"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"project","hierarchy":{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","modules":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK#AdService-creation"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-inline-advertisements","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Defining-the-size-of-the-inline-ad","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-and-displaying-a-list-of-advertisements","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Tracking-ad-visibility","kind":"task"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Creating-interstitial-advertisements"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Presenting-interstitial-ad","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Hiding-interstitial-ad","kind":"task"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitoring-of-ad-related-events","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Request-to-unload-or-hide-ad","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tracking-events","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tap-events"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-custom-advertising-events","kind":"task"}]},{"sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Preparing-the-app","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#User-tagging","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Conversion-tracking"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Preparing-the-app"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Modifying-global-parameters"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Limiting-the-cache-size"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Flushing-the-cache","kind":"task"}]}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements","projects":[{"sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Preparing-the-app","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Creating-a-target-URL-handler","kind":"task"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs"},{"sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-business-layer","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Event-management"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-presentation-layer"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Advanced-management-of-advertising-resources"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising"}]}],"paths":[["doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/$volume","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements"],["doc:\/\/com.adsdk.core\/documentation\/AdSDKCore"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/adsdkcore\/creating-customised-advertising"]},{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/tutorials\/adsdkcore\/creating-customised-advertising"]}],"sections":[{"kind":"hero","title":"Creating customised advertising","content":[{"inlineContent":[{"text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"We will continue to build the app, so be sure to follow all the previous tutorials. You can download ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/VM-Mobile-SDK\/nextgen-adsdk-ios-tutorial\/tree\/extending-sdk\/creating-customised-ad"},{"type":"text","text":" which has already implemented all steps from this tutorial."}],"type":"paragraph"},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this tutorial, we want to display a picture and frame it, but in real-world projects, your ad can be anything - video, HTML, graphics, etc."}]}]}],"estimatedTimeInMinutes":90,"chapter":"Extending the SDK with your custom advertisements"},{"kind":"tasks","tasks":[{"stepsSection":[{"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"The server should always be configured to return a custom response when using custom advertising. In this tutorial, the server is configured to give us the following response."}],"type":"paragraph"}],"type":"step","code":"01-creating-customised-ad.json","caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create a new file ","type":"text"},{"type":"codeVoice","code":"TutorialRenderer.swift"},{"text":" in the ","type":"text"},{"type":"codeVoice","code":"CustomRenderers"},{"type":"text","text":" folder."}]}],"runtimePreview":null,"type":"step","media":"01-creating-customised-ad-screenshot.png","code":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We start with the known - creating a "},{"code":"Decodable","type":"codeVoice"},{"text":" model that we will use.","type":"text"}]}],"caption":[],"media":null,"code":"02-creating-customised-ad.swift","type":"step","runtimePreview":null},{"code":null,"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"You can also use ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError\/customRendererError(message:)","isActive":true,"type":"reference"},{"text":" to thow specific errors related to your renderer to the app.","type":"text"}]}],"type":"aside","name":"Note"}],"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Since the renderer is an extension to the SDK, it should also work only with the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError"},{"type":"text","text":" error type. Create a "},{"type":"codeVoice","code":"JSONDecoder+Extensions.swift"},{"type":"text","text":" file in the "},{"type":"codeVoice","code":"Core\/Extensions"},{"type":"text","text":" path."}],"type":"paragraph"}],"media":"02-creating-customised-ad-screenshot.png"},{"caption":[],"media":null,"code":"03-creating-customised-ad.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"In this file, we will add the ability to decode JSON with automatic conversion of any ","type":"text"},{"type":"codeVoice","code":"Error"},{"type":"text","text":" type to the "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError","type":"reference"},{"type":"text","text":" type."}]}]},{"caption":[],"code":"04-creating-customised-ad.swift","runtimePreview":null,"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s return to "},{"type":"codeVoice","code":"TutorialRenderer.swift"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"We use the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController","isActive":true},{"text":" interface to control the business logic and ad state. You can think of it as the View Model of your ad.","type":"text"}]}],"type":"step","caption":[],"media":null,"code":"05-creating-customised-ad.swift","runtimePreview":null},{"caption":[{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController","type":"reference","isActive":true},{"text":" can implement another initialiser, which we will also look at later.","type":"text"}],"type":"paragraph"}],"style":"note","name":"Note","type":"aside"}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The first step is to implement "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController\/init(_:)","isActive":true,"type":"reference"},{"text":". It is used by the SDK to create an ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController","type":"reference"},{"text":" with ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRepository","isActive":true,"type":"reference"},{"type":"text","text":" passing. We’ll look at what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRepository"},{"type":"text","text":" is later. For now, just save the reference to the property."}]}],"media":null,"code":"06-creating-customised-ad.swift","runtimePreview":null},{"caption":[{"name":"Important","style":"important","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This method is directly related to the "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService\/makeAdvertisement(request:placementType:targetURLHandler:eventDelegate:)","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/reload()","isActive":true},{"text":" methods. As soon as this method is completed, the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true},{"text":" will be returned to the app.","type":"text"}]}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The next thing we add is the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController\/configure(_:_:)"},{"text":" method. This method is the key to creating ads. Within it, you have to perform all the logic to prepare the ad for display - decoding, additional downloads, etc.","type":"text"}]}],"media":null,"runtimePreview":null,"type":"step","code":"07-creating-customised-ad.swift"},{"type":"step","code":"08-creating-customised-ad.swift","media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"data","type":"codeVoice"},{"type":"text","text":" parameter contains the entire response from the server. Let’s add the decoding logic to get the data we need to create the ad."}]}],"caption":[]},{"type":"step","code":"09-creating-customised-ad.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"The next step is to load a banner for display. This is what we use "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRepository","type":"reference","isActive":true},{"type":"text","text":" for. It can download, cache, and return cached advertising resources. When using it, we don’t need to think about caching, as the whole process takes place internally. Isn’t it convenient?"}],"type":"paragraph"}],"media":null,"caption":[]},{"type":"step","content":[{"inlineContent":[{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRepository","type":"reference","isActive":true},{"text":" can finish with an ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError","type":"reference","isActive":true},{"text":", in which case creating or reloading an ad will end with this error, or return you ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetResult","isActive":true,"type":"reference"},{"text":". From it, we can get the loaded data and find out whether it was successfully cached.","type":"text"}],"type":"paragraph"}],"media":null,"code":"10-creating-customised-ad.swift","caption":[],"runtimePreview":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"In addition, the method has a ","type":"text"},{"type":"codeVoice","code":"metadata"},{"type":"text","text":" parameter. This "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdMetadata"},{"text":" will be available in the app, and you can use it to pass some additional information from the renderer to the app.","type":"text"}]}],"caption":[],"type":"step","media":null,"code":"11-creating-customised-ad.swift"},{"caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We’ve decoded the data we need and retrieved the ad banner, which means it’s time to change the state of our controller so that the future "},{"type":"codeVoice","code":"View"},{"text":" knows it can display this content.","type":"text"}]}],"media":null,"type":"step","code":"12-creating-customised-ad.swift"},{"caption":[],"code":"13-creating-customised-ad.swift","content":[{"type":"paragraph","inlineContent":[{"text":"In addition, the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController"},{"text":" has another optional ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController\/prepareForReload()-c6uh","isActive":true,"type":"reference"},{"text":" method. In it, you can implement logic to clear your state and prepare for a reload. In our case, it’s not very useful, but it can come in handy, for example, if your renderer uses a timer or another process that you would like to terminate.","type":"text"}]}],"media":null,"type":"step","runtimePreview":null}],"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"When creating custom ads, we always separate business logic and state management from presentation logic. Let’s start by creating business logic using the "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"mediaPosition":"trailing","media":"01-creating-customised-ad.png","kind":"contentAndMedia"}],"title":"Creating a business layer","anchor":"Creating-a-business-layer"},{"contentSection":[{"media":"02-creating-customised-ad.png","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the previous section, we implemented the logic associated with loading and reloading your custom ad. The next step will be to implement the processing of ad-related events."}]}],"mediaPosition":"trailing"}],"title":"Event management","anchor":"Event-management","stepsSection":[{"type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Let’s continue working with our "},{"type":"codeVoice","code":"TutorialController"},{"type":"text","text":". Almost all ads need to handle taps, but our controller doesn’t have this functionality at the moment."}],"type":"paragraph"}],"code":"14-creating-customised-ad.swift","runtimePreview":null,"media":null},{"runtimePreview":null,"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to execute or notify about an event, we use "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdControllerDelegate","isActive":true,"type":"reference"},{"type":"text","text":". In fact, it is an "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference"},{"type":"text","text":" object that knows how to handle certain events."}]}],"caption":[{"style":"important","type":"aside","name":"Important","content":[{"type":"paragraph","inlineContent":[{"text":"You should keep a weak reference to this object. Otherwise, you may have memory issues.","type":"text"}]}]}],"code":"15-creating-customised-ad.swift"},{"code":"16-creating-customised-ad.swift","runtimePreview":null,"caption":[{"type":"aside","name":"Important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If an error occurs when processing an event, you should not attempt to repeat it, as this is the responsibility of the app, which can do so using "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate","isActive":true,"type":"reference"},{"text":". You can use this error to debug or change the state of the presentation.","type":"text"}]}],"style":"important"}],"content":[{"inlineContent":[{"text":"Now we can implement the method that will be called when the banner is tapped.","type":"text"}],"type":"paragraph"}],"type":"step","media":null},{"code":"17-creating-customised-ad.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The tap event is not the only event that "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdControllerDelegate","isActive":true},{"text":" can handle. You can find all events in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdControllerDelegate","isActive":true},{"type":"text","text":" documentation."}]}],"media":null,"type":"step","runtimePreview":null}]},{"title":"Creating a presentation layer","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","media":"03-creating-customised-ad.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Even though our business layer is ready, we still can’t build our project. That’s because the SDK requires a presentation layer. Let’s implement it with "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRenderer","isActive":true},{"type":"text","text":"."}]}]}],"anchor":"Creating-a-presentation-layer","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Let’s continue our development in the same file.","type":"text"}]}],"code":"18-creating-customised-ad.swift","runtimePreview":null,"caption":[],"type":"step","media":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController","isActive":true,"type":"reference"},{"text":" is the business layer of our custom ad and is part of the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":" life cycle, then the ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRenderer","type":"reference","isActive":true},{"text":" is the presentation layer and part of the ","type":"text"},{"type":"codeVoice","code":"AdView"},{"type":"text","text":" or "},{"code":"interstitial","type":"codeVoice"},{"type":"text","text":" hierarchy. Let’s create a "},{"code":"TutorialRenderer","type":"codeVoice"},{"type":"text","text":" as a "},{"code":"View","type":"codeVoice"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRenderer","type":"reference"},{"text":" protocols. It will contain our presentation logic.","type":"text"}]}],"caption":[],"media":null,"code":"19-creating-customised-ad.swift","runtimePreview":null,"type":"step"},{"content":[{"inlineContent":[{"text":"The only thing the ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRenderer","isActive":true,"type":"reference"},{"text":" protocol requires is an init with a specific type of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"media":null,"code":"20-creating-customised-ad.swift","caption":[],"type":"step"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The last step to build our project is to add a renderer type to the controller. We can use typealias to do this. Now we can build the project."}]}],"code":"21-creating-customised-ad.swift","runtimePreview":null,"type":"step","caption":[]},{"caption":[],"content":[{"inlineContent":[{"text":"The final touch will be to create our ","type":"text"},{"type":"codeVoice","code":"View"},{"type":"text","text":" body, where we display the image with a border when it is loaded and call the "},{"code":"onTap","type":"codeVoice"},{"type":"text","text":" method when the user taps it."}],"type":"paragraph"}],"runtimePreview":null,"code":"22-creating-customised-ad.swift","type":"step","media":null}]},{"anchor":"Registering-a-renderer-in-the-SDK","stepsSection":[{"runtimePreview":null,"media":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"First of all, let’s get back to our response from the server. As you can see, it includes the "},{"type":"codeVoice","code":"ad_name"},{"text":" field. It is this field that the SDK will use to identify your renderer.","type":"text"}]}],"type":"step","code":"23-creating-customised-ad.json"},{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Let’s go to the "},{"type":"codeVoice","code":"Main.swift"},{"type":"text","text":" file, the place where we create our "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService","isActive":true},{"text":". This is where we will be able to register our custom renderer.","type":"text"}],"type":"paragraph"}],"code":"24-creating-customised-ad.swift","runtimePreview":null,"media":null,"type":"step"},{"media":null,"code":"25-creating-customised-ad.swift","content":[{"inlineContent":[{"text":"All we need to do is use the ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService\/registerRenderer(_:forName:)","isActive":true,"type":"reference"},{"text":" method, passing in the value we expect to receive in the ","type":"text"},{"code":"ad_name","type":"codeVoice"},{"text":" field and the renderer type. This way, every time the ","type":"text"},{"type":"codeVoice","code":"ad_name"},{"type":"text","text":" field in the server response is the same as the "},{"code":"String","type":"codeVoice"},{"text":" you passed to this method, the SDK will display the ","type":"text"},{"type":"codeVoice","code":"TutorialRenderer"},{"type":"text","text":"."}],"type":"paragraph"}],"runtimePreview":null,"type":"step","caption":[]},{"type":"step","code":"26-creating-customised-ad.swift","runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Open the "},{"type":"codeVoice","code":"InlineList.swift"},{"type":"text","text":" file and pay attention to the "},{"type":"codeVoice","code":"fetchAds"},{"text":" method.","type":"text"}],"type":"paragraph"}],"media":null},{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"We will add an additional "},{"code":"contentUnit","type":"codeVoice"},{"type":"text","text":" that will deliver our new type of ad. Now you can launch the app and see your new custom ad, congratulations!"}],"type":"paragraph"}],"type":"step","runtimePreview":"03-creating-customised-ad-screenshot.png","code":"27-creating-customised-ad.swift","media":null}],"title":"Registering a renderer in the SDK","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Although we have created a custom ad, in order for the SDK to use it, we need to pass it to the SDK somehow. Let’s do that."}],"type":"paragraph"}]}]},{"title":"Advanced management of advertising resources","anchor":"Advanced-management-of-advertising-resources","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Our ad can already load and cache an ad banner via "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRepository"},{"type":"text","text":", but there are cases when you want to implement more flexible caching logic, for example, you want to put several ad resources in one folder and use it as a base URL for your Web View. In this section, we will look at how to do this."}],"type":"paragraph"}]}],"stepsSection":[{"caption":[],"code":"28-creating-customised-ad.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Return to the "},{"type":"codeVoice","code":"TutorialRenderer.swift"},{"type":"text","text":" file."}],"type":"paragraph"}],"type":"step","media":null},{"runtimePreview":null,"code":"29-creating-customised-ad.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"As we said earlier, the ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController","isActive":true,"type":"reference"},{"type":"text","text":" can implement another initialiser "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController\/init(_:_:)-1ln7p","type":"reference","isActive":true},{"text":". Let’s implement it.","type":"text"}]}],"caption":[{"name":"Important","style":"important","type":"aside","content":[{"inlineContent":[{"type":"text","text":"One of the initialisers must be implemented, otherwise you will get an "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError\/rendererInit(name:)","isActive":true},{"type":"text","text":" error. In addition, if both initialisers are implemented, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController\/init(_:)"},{"type":"text","text":" will have higher priority."}],"type":"paragraph"}]}],"type":"step"},{"caption":[],"code":"30-creating-customised-ad.swift","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"type":"text","text":"This initialiser receives the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetCache"},{"text":" object, which is an interface for working with the cache, and the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRequestService"},{"type":"text","text":" object, which can be used to conveniently load ad resources. Save the references to these objects in properties."}],"type":"paragraph"}],"type":"step"},{"media":null,"runtimePreview":null,"caption":[],"code":"31-creating-customised-ad.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Comment out the logic for working with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRepository"},{"type":"text","text":" in the "},{"code":"configure","type":"codeVoice"},{"text":" method, and create a new ","type":"text"},{"type":"codeVoice","code":"loadBanner"},{"text":" method. We will implement our own loading and caching logic in it.","type":"text"}]}],"type":"step"},{"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The first thing we will create is "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetPath","type":"reference","isActive":true},{"type":"text","text":". In our case, we want the file name to be associated with the URL, and this resource is located in the "},{"type":"codeVoice","code":"TutorialRendererResources"},{"type":"text","text":" folder."}]}],"runtimePreview":null,"code":"32-creating-customised-ad.swift","caption":[{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"text":"When passing the URL to ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetPath\/init(folder:url:)","isActive":true,"type":"reference"},{"type":"text","text":", the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetPath"},{"type":"text","text":" will use the MD5 hash of the passed URL as the filename."}],"type":"paragraph"}]}]},{"media":null,"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Now we can check if our banner is cached via "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetCache\/read(_:)","isActive":true},{"text":", if so, we will use the cached data.","type":"text"}],"type":"paragraph"}],"code":"33-creating-customised-ad.swift","caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If not, we can download the banner using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRequestService"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null,"code":"34-creating-customised-ad.swift"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Since the banner has already been uploaded, we would like to cache it for future use. To do this, you can use the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetCache\/write(_:data:)","type":"reference"},{"text":" method. Congratulations, we have implemented our own caching and loading logic!","type":"text"}]}],"media":null,"runtimePreview":null,"type":"step","code":"35-creating-customised-ad.swift"},{"caption":[{"content":[{"inlineContent":[{"text":"Most often, you do not need to remove resources manually, as the SDK itself manages the removal of files from the cache using a FIFO strategy and a cache size that is set from the app.","type":"text"}],"type":"paragraph"}],"name":"Note","style":"note","type":"aside"}],"content":[{"type":"paragraph","inlineContent":[{"text":"You can also remove files from the cache if you need to. Congratulations, we have implemented our own caching and loading logic!","type":"text"}]}],"type":"step","runtimePreview":null,"code":"36-creating-customised-ad.swift","media":null}]}]}],"metadata":{"category":"Meet AdSDK","role":"project","categoryPathComponent":"Meet-AdSDK","title":"Creating customised advertising"},"references":{"doc://com.adsdk.core/documentation/AdSDKCore/AssetRepository":{"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AssetRepository"}],"kind":"symbol","abstract":[{"text":"A service for downloading and caching advertising resources.","type":"text"}],"type":"topic","url":"\/documentation\/adsdkcore\/assetrepository","title":"AssetRepository","navigatorTitle":[{"text":"AssetRepository","kind":"identifier"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRepository"},"doc://com.adsdk.core/documentation/AdSDKCore/AdMetadata":{"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"AdMetadata","kind":"identifier"}],"title":"AdMetadata","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AdMetadata"}],"abstract":[{"text":"A class that contains the basic data about the advertisement and renderer.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdMetadata","kind":"symbol","url":"\/documentation\/adsdkcore\/admetadata"},"15-creating-customised-ad.swift":{"type":"file","fileName":"TutorialRenderer.swift","identifier":"15-creating-customised-ad.swift","fileType":"swift","syntax":"swift","highlights":[{"line":6}],"content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    var presentationData: PresentationData?","    weak var delegate: AdControllerDelegate?","","    private let assetRepository: AssetRepository","    private let decoder: JSONDecoder","","    init?(_ assetRepository: AssetRepository) {\/*...*\/}","    \/\/ ...","}","\/\/ ..."]},"doc://com.adsdk.core/documentation/AdSDKCore/AdController":{"role":"symbol","url":"\/documentation\/adsdkcore\/adcontroller","navigatorTitle":[{"text":"AdController","kind":"identifier"}],"kind":"symbol","type":"topic","title":"AdController","abstract":[{"text":"Controller interface for custom renderer.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AdController","kind":"identifier"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking#Preparing-the-app":{"type":"section","role":"pseudoSymbol","url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking#Preparing-the-app","title":"Preparing the app","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Preparing-the-app","abstract":[{"type":"text","text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality."}]},"doc://com.adsdk.core/tutorials/Meet-AdSDK":{"type":"topic","role":"overview","url":"\/tutorials\/meet-adsdk","title":"Meet nextgen AdSDK","kind":"overview","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","abstract":[{"type":"text","text":"Manage, display, and create your custom advertisements on iOS using cutting-edge technologies such as Structured Concurrency, and SwiftUI."}]},"17-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":15},{"line":16},{"line":17},{"line":18},{"line":19}],"fileName":"TutorialRenderer.swift","identifier":"17-creating-customised-ad.swift","type":"file","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    var presentationData: PresentationData?","    weak var delegate: AdControllerDelegate?","","    private let assetRepository: AssetRepository","    private let decoder: JSONDecoder","","    init?(_ assetRepository: AssetRepository) {\/*...*\/}","    \/\/ ...","    func onTap() async {","        try? await delegate?.performTap(.tap)","        \/\/ try? await delegate?.unloadRequest()","        \/\/ try? await delegate?.sendMessage(","        \/\/     name: \"Message_to_app\",","        \/\/     message: \"My message to the app\"","        \/\/ )","    }","}","\/\/ ..."]},"doc://com.adsdk.core/documentation/AdSDKCore/AssetRequestService":{"abstract":[{"type":"text","text":"The service interface for downloading advertising resources."}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRequestService","url":"\/documentation\/adsdkcore\/assetrequestservice","role":"symbol","title":"AssetRequestService","navigatorTitle":[{"kind":"identifier","text":"AssetRequestService"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"AssetRequestService","kind":"identifier"}],"kind":"symbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad#Creating-interstitial-advertisements":{"abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Creating-interstitial-advertisements","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Creating-interstitial-advertisements","title":"Creating interstitial advertisements"},"doc://com.adsdk.core/documentation/AdSDKCore/AssetPath":{"kind":"symbol","url":"\/documentation\/adsdkcore\/assetpath","title":"AssetPath","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AssetPath","kind":"identifier"}],"abstract":[{"type":"text","text":"A structure that describes the path to the advertising data in the cache."}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetPath","navigatorTitle":[{"text":"AssetPath","kind":"identifier"}]},"34-creating-customised-ad.swift":{"fileName":"TutorialRenderer.swift","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    \/\/ ...","    private func loadBanner(_ url: URL) async throws(AdError) -> Data {","        let bannerPath = AssetPath(folder: \"TutorialRendererResources\", url: url)","","        if let cacheResult = try await cache.read(bannerPath) {","            print(\"TutorialRenderer banner is used from cache: \\(cacheResult.path)\")","            return cacheResult.data","        } else {","            print(\"TutorialRenderer banner is not in the cache yet\")","            let data = try await assetRequestService.request(url)","","            return data","        }","    }","    \/\/ ...","}","\/\/ ..."],"highlights":[{"line":14},{"line":15},{"line":16}],"identifier":"34-creating-customised-ad.swift","syntax":"swift","type":"file"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Creating-inline-advertisements":{"abstract":[{"text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-inline-advertisements","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Creating-inline-advertisements","title":"Creating inline advertisements"},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking":{"abstract":[{"type":"text","text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking","estimatedTime":"30min","kind":"project","title":"User tagging and conversion tracking","type":"topic","url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking","role":"project"},"33-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14}],"fileName":"TutorialRenderer.swift","identifier":"33-creating-customised-ad.swift","type":"file","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    \/\/ ...","    private func loadBanner(_ url: URL) async throws(AdError) -> Data {","        let bannerPath = AssetPath(folder: \"TutorialRendererResources\", url: url)","","        if let cacheResult = try await cache.read(bannerPath) {","            print(\"TutorialRenderer banner is used from cache: \\(cacheResult.path)\")","            return cacheResult.data","        } else {","            print(\"TutorialRenderer banner is not in the cache yet\")","        }","    }","    \/\/ ...","}","\/\/ ..."]},"01-creating-customised-ad-screenshot.png":{"identifier":"01-creating-customised-ad-screenshot.png","alt":"Xcode window showing the correct project structure with CustomRenderers\/TutorialRenderer.swift.","type":"image","variants":[{"url":"\/images\/com.adsdk.core\/01-creating-customised-ad-screenshot.png","traits":["1x","light"]}]},"doc://com.adsdk.core/documentation/AdSDKCore/AdError/rendererInit(name:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"rendererInit","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"name"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic","abstract":[{"type":"text","text":"The error is related to the initialization of the renderer."}],"kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError\/rendererInit(name:)","url":"\/documentation\/adsdkcore\/aderror\/rendererinit(name:)","title":"AdError.rendererInit(name:)"},"doc://com.adsdk.core/documentation/AdSDKCore/AdController/configure(_:_:)":{"type":"topic","required":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController\/configure(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"configure","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:10Foundation4DataV","text":"Data","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"AdMetadata","kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A8MetadataC"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore0A5ErrorO","text":"AdError","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"The method receives new data from the ad server to prepare and configure the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController","type":"reference"},{"text":".","type":"text"}],"title":"configure(_:_:)","url":"\/documentation\/adsdkcore\/adcontroller\/configure(_:_:)","role":"symbol","kind":"symbol"},"08-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":16}],"fileName":"TutorialRenderer.swift","identifier":"08-creating-customised-ad.swift","type":"file","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    private let assetRepository: AssetRepository","    private let decoder: JSONDecoder","","    init?(_ assetRepository: AssetRepository) {","        self.assetRepository = assetRepository","        decoder = .init()","        decoder.keyDecodingStrategy = .convertFromSnakeCase","    }","","    \/\/ Will be called every time an ad is loaded or reloaded.","    func configure(_ data: Data, _ metadata: AdMetadata) async throws(AdError) {","        let response: TutorialRendererResponse = try decoder.decode(from: data)","    }","}","","struct TutorialRendererResponse: Decodable {\/*...*\/}"]},"doc://com.adsdk.core/documentation/AdSDKCore/TagRequest":{"navigatorTitle":[{"kind":"identifier","text":"TagRequest"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"TagRequest","kind":"identifier"}],"kind":"symbol","title":"TagRequest","abstract":[{"type":"text","text":"Describes a request to “tag” a user."}],"url":"\/documentation\/adsdkcore\/tagrequest","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest","type":"topic","role":"symbol"},"03-creating-customised-ad.png":{"identifier":"03-creating-customised-ad.png","alt":"The rectangles with the words Advertisement, AdView, AdController, and AdRenderer where AdController and AdRenderer are highlighted. Advertisement is connected to AdController by an arrow and vice versa. AdRenderer is connected to AdController by an arrow and vice versa. AdView is connected to Advertisement by an arrow and vice versa. AdView is connected to AdRenderer by an arrow","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/com.adsdk.core\/03-creating-customised-ad.png"}]},"03-creating-customised-ad.swift":{"syntax":"swift","highlights":[],"fileName":"JSONDecoder+Extensions.swift","identifier":"03-creating-customised-ad.swift","type":"file","fileType":"swift","content":["import Foundation","import AdSDKCore","","extension JSONDecoder {","    \/\/\/ Convenient method to decode `Decodable` objects with possible `AdError` throwing.","    func decode<T: Decodable>(from data: Data) throws(AdError) -> T {","        do {","            return try decode(T.self, from: data)","        \/\/ Handle decoding error","        } catch let error as DecodingError {","            throw .decoding(description: error.decodingMessage)","        \/\/ Handle AdError thrown from decoding logic","        } catch let error as AdError {","            throw error","        \/\/ Handle other errors during decoding","        } catch {","            throw .decoding(description: error.localizedDescription)","        }","    }","}","","\/\/ MARK: - DecodingError + Extensions","extension DecodingError {","    var decodingMessage: String {","        switch self {","        case let .typeMismatch(type, context):","            \"\"\"","            Type '\\(type)' mismatch: \\(context.debugDescription)","            CodingPath: \\(context.codingPath)\"","            \"\"\"","        case let .valueNotFound(value, context):","            \"\"\"","            Value '\\(value)' not found: \\(context.debugDescription)","            CodingPath: \\(context.codingPath)","            \"\"\"","        case let .keyNotFound(key, context):","            \"\"\"","            Key '\\(key)' not found: \\(context.debugDescription)","            CodingPath: \\(context.codingPath)","            \"\"\"","        case let .dataCorrupted(context):","            \"\"\"","            Data corrupted: \\(context.debugDescription)","            CodingPath: \\(context.codingPath)","            \"\"\"","        @unknown default: \"Unknown decoding error: \\(localizedDescription).\"","        }","    }","}"]},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads":{"abstract":[{"type":"text","text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy."}],"type":"topic","kind":"project","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads","title":"Create and display inline ads","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads","role":"project","estimatedTime":"45min"},"doc://com.adsdk.core/documentation/AdSDKCore/AdService":{"abstract":[{"text":"A key object for configuring your advertisements.","type":"text"}],"navigatorTitle":[{"text":"AdService","kind":"identifier"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/adsdkcore\/adservice","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"AdService","kind":"identifier"}],"title":"AdService"},"03-creating-customised-ad-screenshot.png":{"identifier":"03-creating-customised-ad-screenshot.png","alt":"A phone screen with several advertising banners showing different characters from films and TV series. The first banner in the list has a white border.","type":"image","variants":[{"url":"\/images\/com.adsdk.core\/03-creating-customised-ad-screenshot.png","traits":["1x","light"]}]},"doc://com.adsdk.core/tutorials/AdSDKCore/First-Steps-For-Working-With-AdSDK":{"abstract":[{"type":"text","text":"This tutorial will guide you the first steps for working with the "},{"type":"codeVoice","code":"AdSDK"},{"type":"text","text":" - creating an "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService","isActive":true,"type":"reference"},{"text":".","type":"text"}],"estimatedTime":"15min","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK","kind":"project","role":"project","type":"topic","url":"\/tutorials\/adsdkcore\/first-steps-for-working-with-adsdk","title":"First steps for working with AdSDK"},"doc://com.adsdk.core/documentation/AdSDKCore/AdController/init(_:)":{"url":"\/documentation\/adsdkcore\/adcontroller\/init(_:)","required":true,"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Creates an controller with "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRepository","isActive":true},{"type":"text","text":"."}],"type":"topic","title":"init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"?(","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore15AssetRepositoryP","text":"AssetRepository","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController\/init(_:)"},"doc://com.adsdk.core/documentation/AdSDKCore/AdError/customRendererError(message:)":{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError\/customRendererError(message:)","abstract":[{"text":"Custom renderer error.","type":"text"}],"title":"AdError.customRendererError(message:)","kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"customRendererError","kind":"identifier"},{"kind":"text","text":"("},{"text":"message","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":")"}],"type":"topic","url":"\/documentation\/adsdkcore\/aderror\/customrenderererror(message:)","role":"symbol"},"05-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":6},{"line":7}],"fileName":"TutorialRenderer.swift","identifier":"05-creating-customised-ad.swift","type":"file","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","","}","","struct TutorialRendererResponse: Decodable {\/*...*\/}"]},"31-creating-customised-ad.swift":{"fileName":"TutorialRenderer.swift","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    typealias Renderer = TutorialRenderer","","    var presentationData: PresentationData?","    weak var delegate: AdControllerDelegate?","","    \/\/ private let assetRepository: AssetRepository","    private let cache: AssetCache","    private let assetRequestService: AssetRequestService","    private let decoder: JSONDecoder","","    init?(_ assetRepository: AssetRepository) {","        \/\/ self.assetRepository = assetRepository","        \/\/ decoder = .init()","        \/\/ decoder.keyDecodingStrategy = .convertFromSnakeCase","        return nil","    }","","    init?(_ cache: AssetCache, _ assetRequestService: AssetRequestService) {","        self.cache = cache","        self.assetRequestService = assetRequestService","        decoder = .init()","        decoder.keyDecodingStrategy = .convertFromSnakeCase","    }","","    \/\/ Will be called every time an ad is loaded or reloaded.","    func configure(_ data: Data, _ metadata: AdMetadata) async throws(AdError) {","        let response: TutorialRendererResponse = try decoder.decode(from: data)","        \/\/ let bannerResult = try await assetRepository.getAsset(response.bannerURL)","        \/\/","        \/\/ switch bannerResult.cacheResult {","        \/\/ case .success(let path):","        \/\/     print(\"TutorialRenderer banner cached: \\(path)\")","        \/\/ case .failure(let error):","        \/\/     print(\"TutorialRenderer banner caching failed: \\(error.localizedDescription)\")","        \/\/ }","        \/\/","        \/\/ let banner = bannerResult.data","        let banner = try await loadBanner(response.bannerURL)","        metadata.rendererMetadata = [","            \"custom_message\":","            \"my custom message to the app\"","        ]","","        presentationData = .init(","            banner: banner,","            framingWidth: response.framingWidth,","            isBlackFraming: response.isBlackFraming","        )","    }","","    private func loadBanner(_ url: URL) async throws(AdError) -> Data {","","    }","    \/\/ ...","}","\/\/ ..."],"highlights":[{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":54},{"line":55},{"line":56},{"line":57}],"identifier":"31-creating-customised-ad.swift","syntax":"swift","type":"file"},"doc://com.adsdk.core/documentation/AdSDKCore/AssetPath/init(folder:url:)":{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetPath\/init(folder:url:)","abstract":[{"type":"text","text":"Creates an "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetPath","type":"reference","isActive":true},{"type":"text","text":" from the passed folder name and resource URL."}],"title":"init(folder:url:)","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"folder"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"url"},{"text":": ","kind":"text"},{"text":"URL","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV"},{"text":")","kind":"text"}],"type":"topic","url":"\/documentation\/adsdkcore\/assetpath\/init(folder:url:)","role":"symbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Custom-Handling-Of-Target-Tap-URLs":{"type":"topic","estimatedTime":"20min","role":"project","url":"\/tutorials\/adsdkcore\/custom-handling-of-target-tap-urls","title":"Custom handling of target tap URLs","kind":"project","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs","abstract":[{"type":"text","text":"Sometimes you need to handle taps in your own way. For example, to display ads in the internal browser in the app. In this tutorial, we will learn how to customise the SDK’s tap handling behaviour."}]},"21-creating-customised-ad.swift":{"type":"file","fileName":"TutorialRenderer.swift","identifier":"21-creating-customised-ad.swift","fileType":"swift","syntax":"swift","highlights":[{"line":16},{"line":17}],"content":["import AdSDKCore","import Foundation","import SwiftUI","","struct TutorialRenderer: View, AdRenderer {","    @State var controller: TutorialController","","    var body: some View {","        Text(\"TODO\")","    }","}","","@Observable","@MainActor","final class TutorialController: AdController {","    typealias Renderer = TutorialRenderer","","    var presentationData: PresentationData?","    \/\/ ...","}","\/\/ ..."]},"doc://com.adsdk.core/tutorials/Meet-AdSDK/Extending-the-SDK-with-your-custom-advertisements":{"abstract":[],"title":"Extending the SDK with your custom advertisements","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements","kind":"article","url":"\/tutorials\/meet-adsdk\/extending-the-sdk-with-your-custom-advertisements","role":"article","type":"topic"},"02-creating-customised-ad.png":{"identifier":"02-creating-customised-ad.png","alt":"The rectangles with the words Advertisement and AdController, where AdController is highlighted. Advertisement is connected to AdController by an arrow and vice versa.","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/com.adsdk.core\/02-creating-customised-ad.png"}]},"32-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":5},{"line":7}],"fileName":"TutorialRenderer.swift","identifier":"32-creating-customised-ad.swift","type":"file","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    \/\/ ...","    private func loadBanner(_ url: URL) async throws(AdError) -> Data {","        let bannerPath = AssetPath(folder: \"TutorialRendererResources\", url: url)","    }","    \/\/ ...","}","\/\/ ..."]},"doc://com.adsdk.core/documentation/AdSDKCore/AdEventDelegate":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AdEventDelegate"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate","abstract":[{"type":"text","text":"An object for tracking and processing "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":" related events.","type":"text"}],"role":"symbol","url":"\/documentation\/adsdkcore\/adeventdelegate","type":"topic","title":"AdEventDelegate","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AdEventDelegate","kind":"identifier"}]},"doc://com.adsdk.core/documentation/AdSDKCore/AdRenderer":{"kind":"symbol","url":"\/documentation\/adsdkcore\/adrenderer","title":"AdRenderer","type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AdRenderer"}],"abstract":[{"text":"Custom renderer interface.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRenderer","navigatorTitle":[{"kind":"identifier","text":"AdRenderer"}]},"doc://com.adsdk.core/tutorials/Meet-AdSDK/Working-with-the-built-in-capabilities-of-the-SDK":{"abstract":[],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK","kind":"article","role":"article","type":"topic","url":"\/tutorials\/meet-adsdk\/working-with-the-built-in-capabilities-of-the-sdk","title":"Working with the built-in capabilities of the SDK"},"02-creating-customised-ad-screenshot.png":{"identifier":"02-creating-customised-ad-screenshot.png","alt":"Xcode window showing the correct project structure with Core\/Extensions\/JSONDecoder+Extensions.swift.","type":"image","variants":[{"url":"\/images\/com.adsdk.core\/02-creating-customised-ad-screenshot.png","traits":["1x","light"]}]},"19-creating-customised-ad.swift":{"type":"file","fileName":"TutorialRenderer.swift","identifier":"19-creating-customised-ad.swift","fileType":"swift","syntax":"swift","highlights":[{"line":3},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10}],"content":["import AdSDKCore","import Foundation","import SwiftUI","","struct TutorialRenderer: View, AdRenderer {","    var body: some View {","        Text(\"TODO\")","    }","}","","@Observable","@MainActor","final class TutorialController: AdController {","    var presentationData: PresentationData?","    \/\/ ...","}","\/\/ ..."]},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Tracking-ad-visibility":{"abstract":[{"type":"text","text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy."}],"type":"section","kind":"section","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Tracking-ad-visibility","title":"Tracking ad visibility","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Tracking-ad-visibility","role":"pseudoSymbol"},"16-creating-customised-ad.swift":{"fileName":"TutorialRenderer.swift","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    var presentationData: PresentationData?","    weak var delegate: AdControllerDelegate?","","    private let assetRepository: AssetRepository","    private let decoder: JSONDecoder","","    init?(_ assetRepository: AssetRepository) {\/*...*\/}","    \/\/ ...","    func onTap() async {","        try? await delegate?.performTap(.tap)","    }","}","\/\/ ..."],"highlights":[{"line":13},{"line":14},{"line":15}],"identifier":"16-creating-customised-ad.swift","syntax":"swift","type":"file"},"doc://com.adsdk.core/documentation/AdSDKCore/AssetCache/write(_:data:)":{"type":"topic","url":"\/documentation\/adsdkcore\/assetcache\/write(_:data:)","required":true,"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"write","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore9AssetPathV","text":"AssetPath"},{"kind":"text","text":", "},{"text":"data","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Data","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DataV"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":"("},{"text":"AdError","preciseIdentifier":"s:9AdSDKCore0A5ErrorO","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"URL","preciseIdentifier":"s:10Foundation3URLV","kind":"typeIdentifier"}],"abstract":[{"text":"Writes the passed data to the cache along the passed ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetPath"},{"text":".","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetCache\/write(_:data:)","title":"write(_:data:)"},"06-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":5},{"line":6},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"fileName":"TutorialRenderer.swift","identifier":"06-creating-customised-ad.swift","type":"file","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    private let assetRepository: AssetRepository","    private let decoder: JSONDecoder","","    init?(_ assetRepository: AssetRepository) {","        self.assetRepository = assetRepository","        decoder = .init()","        decoder.keyDecodingStrategy = .convertFromSnakeCase","    }","}","","struct TutorialRendererResponse: Decodable {\/*...*\/}"]},"doc://com.adsdk.core/documentation/AdSDKCore/AdService/makeAdvertisement(request:placementType:targetURLHandler:eventDelegate:)":{"type":"topic","url":"\/documentation\/adsdkcore\/adservice\/makeadvertisement(request:placementtype:targeturlhandler:eventdelegate:)","abstract":[{"type":"text","text":"Creating an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":" object and performing ad request.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService\/makeAdvertisement(request:placementType:targetURLHandler:eventDelegate:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"makeAdvertisement","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"request"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9AdSDKCore0A7RequestV","kind":"typeIdentifier","text":"AdRequest"},{"kind":"text","text":", "},{"text":"placementType","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AdPlacementType","preciseIdentifier":"s:9AdSDKCore0A13PlacementTypeO","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"targetURLHandler"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"TargetURLHandler","preciseIdentifier":"s:9AdSDKCore16TargetURLHandlerP"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"eventDelegate"},{"text":": ","kind":"text"},{"text":"AdEventDelegate","kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A13EventDelegateP"},{"text":"?) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":"("},{"preciseIdentifier":"s:9AdSDKCore0A5ErrorO","kind":"typeIdentifier","text":"AdError"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:9AdSDKCore13AdvertisementP","text":"Advertisement","kind":"typeIdentifier"}],"role":"symbol","title":"makeAdvertisement(request:placementType:targetURLHandler:eventDelegate:)"},"doc://com.adsdk.core/documentation/AdSDKCore/AdController/init(_:_:)-1ln7p":{"required":true,"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"?(","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore10AssetCacheP","kind":"typeIdentifier","text":"AssetCache"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"AssetRequestService","preciseIdentifier":"s:9AdSDKCore19AssetRequestServiceP"},{"text":")","kind":"text"}],"type":"topic","abstract":[{"type":"text","text":"Creates an controller with "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetCache","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRequestService","isActive":true,"type":"reference"},{"type":"text","text":"."}],"defaultImplementations":1,"kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController\/init(_:_:)-1ln7p","url":"\/documentation\/adsdkcore\/adcontroller\/init(_:_:)-1ln7p","title":"init(_:_:)"},"doc://com.adsdk.core/tutorials/AdSDKCore/AdSDK-Cache-Management#Flushing-the-cache":{"url":"\/tutorials\/adsdkcore\/adsdk-cache-management#Flushing-the-cache","abstract":[{"type":"text","text":"The SDK supports a persistent cache with resources related to ad, these can be banners or other resources, depending on the type of ad. In this tutorial, we’ll look at how an application developer can control the cache."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Flushing-the-cache","role":"pseudoSymbol","title":"Flushing the cache","kind":"section","type":"section"},"13-creating-customised-ad.swift":{"fileName":"TutorialRenderer.swift","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    var presentationData: PresentationData?","","    private let assetRepository: AssetRepository","    private let decoder: JSONDecoder","","    init?(_ assetRepository: AssetRepository) {","        self.assetRepository = assetRepository","        decoder = .init()","        decoder.keyDecodingStrategy = .convertFromSnakeCase","    }","","    \/\/ Will be called every time an ad is loaded or reloaded.","    func configure(_ data: Data, _ metadata: AdMetadata) async throws(AdError) {","        let response: TutorialRendererResponse = try decoder.decode(from: data)","        let bannerResult = try await assetRepository.getAsset(response.bannerURL)","","        switch bannerResult.cacheResult {","        case .success(let path):","            print(\"TutorialRenderer banner cached: \\(path)\")","        case .failure(let error):","            print(\"TutorialRenderer banner caching failed: \\(error.localizedDescription)\")","        }","","        let banner = bannerResult.data","        metadata.rendererMetadata = [","            \"custom_data\":","            \"my custom data that will be available in the app\"","        ]","","        presentationData = .init(","            banner: banner,","            framingWidth: response.framingWidth,","            isBlackFraming: response.isBlackFraming","        )","    }","","    \/\/ Will be called when app want to reload the ad","    func prepareForReload() async throws(AdError) {","        presentationData = nil","    }","}","","\/\/ MARK: - Models","extension TutorialController {","    struct PresentationData {","        let banner: Data","        let framingWidth: Double","        let isBlackFraming: Bool","    }","}","","struct TutorialRendererResponse: Decodable {\/*...*\/}",""],"highlights":[{"line":40},{"line":41},{"line":42},{"line":43},{"line":44}],"identifier":"13-creating-customised-ad.swift","syntax":"swift","type":"file"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Creating-and-displaying-a-list-of-advertisements":{"url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Creating-and-displaying-a-list-of-advertisements","abstract":[{"type":"text","text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-and-displaying-a-list-of-advertisements","role":"pseudoSymbol","title":"Creating and displaying a list of advertisements","kind":"section","type":"section"},"24-creating-customised-ad.swift":{"syntax":"swift","highlights":[],"fileName":"Main.swift","identifier":"24-creating-customised-ad.swift","type":"file","fileType":"swift","content":["\/\/ ...","extension MainViewModel {","    func configure() async {","        do {","            let service = try await AdService(","                networkID: 1800,","                cacheSize: 20,","                configurationTimeout: 60 \/\/ Can be skipped","            )","            \/\/ do {","            \/\/     try await service.setCacheSize(50)","            \/\/ } catch {","            \/\/     print(\"Error during changing cache size: \\(error.localizedDescription)\")","            \/\/ }","","            self.service = service","            state = .ready(service)","            isGDPRAlertShown = true","","        } catch {","            state = .error(error.localizedDescription)","        }","    }","    \/\/ ...","}","\/\/ ..."]},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitoring-of-ad-related-events":{"url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitoring-of-ad-related-events","abstract":[{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference","isActive":true},{"type":"text","text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true},{"type":"text","text":" and how we can interact with them."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitoring-of-ad-related-events","role":"pseudoSymbol","title":"Monitoring of ad-related events","kind":"section","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Event-management":{"type":"section","role":"pseudoSymbol","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Event-management","title":"Event management","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Event-management","abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads."}]},"14-creating-customised-ad.swift":{"type":"file","fileName":"TutorialRenderer.swift","identifier":"14-creating-customised-ad.swift","fileType":"swift","syntax":"swift","highlights":[],"content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    var presentationData: PresentationData?","","    private let assetRepository: AssetRepository","    private let decoder: JSONDecoder","","    init?(_ assetRepository: AssetRepository) {\/*...*\/}","    \/\/ ...","}","\/\/ ..."]},"11-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":27},{"line":28},{"line":29},{"line":30},{"line":35}],"fileName":"TutorialRenderer.swift","identifier":"11-creating-customised-ad.swift","type":"file","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    private let assetRepository: AssetRepository","    private let decoder: JSONDecoder","","    init?(_ assetRepository: AssetRepository) {","        self.assetRepository = assetRepository","        decoder = .init()","        decoder.keyDecodingStrategy = .convertFromSnakeCase","    }","","    \/\/ Will be called every time an ad is loaded or reloaded.","    func configure(_ data: Data, _ metadata: AdMetadata) async throws(AdError) {","        let response: TutorialRendererResponse = try decoder.decode(from: data)","        let bannerResult = try await assetRepository.getAsset(response.bannerURL)","","        switch bannerResult.cacheResult {","        case .success(let path):","            print(\"TutorialRenderer banner cached: \\(path)\")","        case .failure(let error):","            print(\"TutorialRenderer banner caching failed: \\(error.localizedDescription)\")","        }","","        let banner = bannerResult.data","        metadata.rendererMetadata = [","            \"custom_data\":","            \"my custom data that will be available in the app\"","        ]","    }","}","","struct TutorialRendererResponse: Decodable {\/*...*\/}",""]},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking#Conversion-tracking":{"url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking#Conversion-tracking","abstract":[{"type":"text","text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Conversion-tracking","role":"pseudoSymbol","title":"Conversion tracking","kind":"section","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-custom-advertising-events":{"abstract":[{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference","isActive":true},{"type":"text","text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"type":"text","text":" and how we can interact with them."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-custom-advertising-events","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitor-and-process-custom-advertising-events","title":"Monitor and process custom advertising events"},"29-creating-customised-ad.swift":{"fileName":"TutorialRenderer.swift","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    typealias Renderer = TutorialRenderer","","    var presentationData: PresentationData?","    weak var delegate: AdControllerDelegate?","","    private let assetRepository: AssetRepository","    private let decoder: JSONDecoder","","    init?(_ assetRepository: AssetRepository) {","        \/\/ self.assetRepository = assetRepository","        \/\/ decoder = .init()","        \/\/ decoder.keyDecodingStrategy = .convertFromSnakeCase","        return nil","    }","","    init?(_ cache: AssetCache, _ assetRequestService: AssetRequestService) {","        decoder = .init()","        decoder.keyDecodingStrategy = .convertFromSnakeCase","    }","","    \/\/ Will be called every time an ad is loaded or reloaded.","    func configure(_ data: Data, _ metadata: AdMetadata) async throws(AdError) {","        let response: TutorialRendererResponse = try decoder.decode(from: data)","        let bannerResult = try await assetRepository.getAsset(response.bannerURL)","","        switch bannerResult.cacheResult {","        case .success(let path):","            print(\"TutorialRenderer banner cached: \\(path)\")","        case .failure(let error):","            print(\"TutorialRenderer banner caching failed: \\(error.localizedDescription)\")","        }","","        let banner = bannerResult.data","        metadata.rendererMetadata = [","            \"custom_message\":","            \"my custom message to the app\"","        ]","","        presentationData = .init(","            banner: banner,","            framingWidth: response.framingWidth,","            isBlackFraming: response.isBlackFraming","        )","    }","    \/\/ ...","}","\/\/ ..."],"highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20}],"identifier":"29-creating-customised-ad.swift","syntax":"swift","type":"file"},"22-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"fileName":"TutorialRenderer.swift","identifier":"22-creating-customised-ad.swift","type":"file","fileType":"swift","content":["import AdSDKCore","import Foundation","import SwiftUI","","struct TutorialRenderer: View, AdRenderer {","    @State var controller: TutorialController","","    var body: some View {","        if let presentationData = controller.presentationData,","           let banner = UIImage(data: presentationData.banner) {","            Image(uiImage: banner)","                .resizable()","                .aspectRatio(contentMode: .fit)","                .overlay {","                    Rectangle()","                        .stroke(","                            presentationData.isBlackFraming ? .black : .white,","                            lineWidth: presentationData.framingWidth","                        )","                }","                .onTapGesture {","                    Task { await controller.onTap() }","                }","        }","    }","}","","@Observable","@MainActor","final class TutorialController: AdController {","    typealias Renderer = TutorialRenderer","","    var presentationData: PresentationData?","    \/\/ ...","}","\/\/ ..."]},"doc://com.adsdk.core/tutorials/AdSDKCore/AdSDK-Cache-Management#Limiting-the-cache-size":{"abstract":[{"type":"text","text":"The SDK supports a persistent cache with resources related to ad, these can be banners or other resources, depending on the type of ad. In this tutorial, we’ll look at how an application developer can control the cache."}],"type":"section","kind":"section","url":"\/tutorials\/adsdkcore\/adsdk-cache-management#Limiting-the-cache-size","title":"Limiting the cache size","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Limiting-the-cache-size","role":"pseudoSymbol"},"01-creating-customised-ad.json":{"type":"file","fileName":"Response.json","identifier":"01-creating-customised-ad.json","fileType":"json","syntax":"json","highlights":[],"content":["{","    \/\/ ...","    ad_name: \"tutorialad\",","    body: {","        \/\/ ...","        ext: {","            \/\/ ...","            adData: {","                banner_image: Banner URL","                framing_width: Framing width","                is_black_framing: Boolean value – whether the color should be black or white.","            }","        }","    }","}"]},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/reload()":{"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reload"},{"text":"() ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore0A5ErrorO","text":"AdError","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"reload()","role":"symbol","abstract":[{"text":"Reloads advertisement.","type":"text"}],"required":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/reload()","kind":"symbol","url":"\/documentation\/adsdkcore\/advertisement\/reload()"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tap-events":{"abstract":[{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true},{"type":"text","text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference"},{"type":"text","text":" and how we can interact with them."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tap-events","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitor-and-process-advertising-tap-events","title":"Monitor and process advertising tap events"},"doc://com.adsdk.core/documentation/AdSDKCore/AdController/prepareForReload()-c6uh":{"required":true,"url":"\/documentation\/adsdkcore\/adcontroller\/prepareforreload()-c6uh","role":"symbol","kind":"symbol","type":"topic","defaultImplementations":1,"title":"prepareForReload()","abstract":[{"type":"text","text":"Method for cleaning the renderer data and states."}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController\/prepareForReload()-c6uh","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"prepareForReload"},{"text":"() ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"text":"AdError","kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A5ErrorO"},{"text":")","kind":"text"}]},"35-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22}],"fileName":"TutorialRenderer.swift","identifier":"35-creating-customised-ad.swift","type":"file","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    \/\/ ...","    private func loadBanner(_ url: URL) async throws(AdError) -> Data {","        let bannerPath = AssetPath(folder: \"TutorialRendererResources\", url: url)","","        if let cacheResult = try await cache.read(bannerPath) {","            print(\"TutorialRenderer banner is used from cache: \\(cacheResult.path)\")","            return cacheResult.data","        } else {","            print(\"TutorialRenderer banner is not in the cache yet\")","            let data = try await assetRequestService.request(url)","","            do {","                let path = try await cache.write(bannerPath, data: data)","                print(\"TutorialRenderer banner is cached: \\(path)\")","            } catch {","                print(\"TutorialRenderer banner caching failed: \\(error.localizedDescription)\")","            }","","            return data","        }","    }","    \/\/ ...","}","\/\/ ..."]},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking#User-tagging":{"abstract":[{"type":"text","text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality."}],"type":"section","kind":"section","url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking#User-tagging","title":"User tagging","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#User-tagging","role":"pseudoSymbol"},"27-creating-customised-ad.swift":{"fileName":"InlineList.swift","fileType":"swift","content":["\/\/ ...","extension InlineListViewModel {","    func fetchAds() async {","        var ids: [UInt] = Array(repeating: 4810915, count: 5)","        ids.insert(5227780, at: .zero)","","        let requests = ids.map {","            AdRequest(","                contentUnit: $0,","                profile: nil, \/\/ Can be skipped","                keywords: nil, \/\/ Can be skipped","                window: nil, \/\/ Can be skipped","                timeoutAfterSeconds: nil, \/\/ Can be skipped","                gdprPd: nil, \/\/ Can be skipped","                campaignId: nil, \/\/ Can be skipped","                bannerId: nil, \/\/ Can be skipped","                isSHBEnabled: nil, \/\/ Can be skipped","                dsa: nil \/\/ Can be skipped","            )","        }","","        dataSource = await getDataSource(service, requests, targetURLHandler)","    }","    \/\/ ...","}"],"highlights":[{"line":4},{"line":5},{"line":6},{"line":7}],"identifier":"27-creating-customised-ad.swift","syntax":"swift","type":"file"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Defining-the-size-of-the-inline-ad":{"abstract":[{"text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy.","type":"text"}],"title":"Defining the size of the inline ad","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Defining-the-size-of-the-inline-ad","kind":"section","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Defining-the-size-of-the-inline-ad","role":"pseudoSymbol","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad#Presenting-interstitial-ad":{"abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}],"type":"section","kind":"section","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Presenting-interstitial-ad","title":"Presenting interstitial ad","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Presenting-interstitial-ad","role":"pseudoSymbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Creating-a-business-layer":{"abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-business-layer","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Creating-a-business-layer","title":"Creating a business layer"},"doc://com.adsdk.core/documentation/AdSDKCore/AssetCache/read(_:)":{"type":"topic","url":"\/documentation\/adsdkcore\/assetcache\/read(_:)","required":true,"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"read","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore9AssetPathV","text":"AssetPath"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"AdError","preciseIdentifier":"s:9AdSDKCore0A5ErrorO"},{"text":") -> (data","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DataV","text":"Data"},{"text":", path","kind":"text"},{"text":": ","kind":"text"},{"text":"URL","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV"},{"text":")?","kind":"text"}],"abstract":[{"text":"Reads data from the cache based on the passed ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetPath"},{"text":".","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetCache\/read(_:)","title":"read(_:)"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-Parameters-For-All-Request-Types":{"type":"topic","title":"Global parameters for all request types","kind":"project","url":"\/tutorials\/adsdkcore\/global-parameters-for-all-request-types","estimatedTime":"20min","role":"project","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types","abstract":[{"type":"text","text":"We already know how to create and perform "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","type":"reference","isActive":true},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest","type":"reference"},{"type":"text","text":", and "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest","type":"reference"},{"type":"text","text":". However, each of them can have additional parameters, which are called global parameters because they are specified globally for all requests. The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each request."}]},"doc://com.adsdk.core/tutorials/AdSDKCore/AdSDK-Cache-Management":{"abstract":[{"type":"text","text":"The SDK supports a persistent cache with resources related to ad, these can be banners or other resources, depending on the type of ad. In this tutorial, we’ll look at how an application developer can control the cache."}],"title":"AdSDK Cache Management","estimatedTime":"10min","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management","kind":"project","url":"\/tutorials\/adsdkcore\/adsdk-cache-management","role":"project","type":"topic"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising":{"abstract":[{"text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"type":"topic","kind":"project","url":"\/tutorials\/adsdkcore\/creating-customised-advertising","title":"Creating customised advertising","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising","role":"project","estimatedTime":"1hr 30min"},"10-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}],"fileName":"TutorialRenderer.swift","identifier":"10-creating-customised-ad.swift","type":"file","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    private let assetRepository: AssetRepository","    private let decoder: JSONDecoder","","    init?(_ assetRepository: AssetRepository) {","        self.assetRepository = assetRepository","        decoder = .init()","        decoder.keyDecodingStrategy = .convertFromSnakeCase","    }","","    \/\/ Will be called every time an ad is loaded or reloaded.","    func configure(_ data: Data, _ metadata: AdMetadata) async throws(AdError) {","        let response: TutorialRendererResponse = try decoder.decode(from: data)","        let bannerResult = try await assetRepository.getAsset(response.bannerURL)","","        switch bannerResult.cacheResult {","        case .success(let path):","            print(\"TutorialRenderer banner cached: \\(path)\")","        case .failure(let error):","            print(\"TutorialRenderer banner caching failed: \\(error.localizedDescription)\")","        }","","        let banner = bannerResult.data","    }","}","","struct TutorialRendererResponse: Decodable {\/*...*\/}"]},"doc://com.adsdk.core/documentation/AdSDKCore/AssetCache":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"AssetCache","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AssetCache"}],"type":"topic","abstract":[{"text":"Interface of the cache of advertising resources.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetCache","url":"\/documentation\/adsdkcore\/assetcache","title":"AssetCache"},"28-creating-customised-ad.swift":{"fileName":"TutorialRenderer.swift","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    typealias Renderer = TutorialRenderer","","    var presentationData: PresentationData?","    weak var delegate: AdControllerDelegate?","","    private let assetRepository: AssetRepository","    private let decoder: JSONDecoder","","    init?(_ assetRepository: AssetRepository) {","        self.assetRepository = assetRepository","        decoder = .init()","        decoder.keyDecodingStrategy = .convertFromSnakeCase","    }","","    \/\/ Will be called every time an ad is loaded or reloaded.","    func configure(_ data: Data, _ metadata: AdMetadata) async throws(AdError) {","        let response: TutorialRendererResponse = try decoder.decode(from: data)","        let bannerResult = try await assetRepository.getAsset(response.bannerURL)","","        switch bannerResult.cacheResult {","        case .success(let path):","            print(\"TutorialRenderer banner cached: \\(path)\")","        case .failure(let error):","            print(\"TutorialRenderer banner caching failed: \\(error.localizedDescription)\")","        }","","        let banner = bannerResult.data","        metadata.rendererMetadata = [","            \"custom_message\":","            \"my custom message to the app\"","        ]","","        presentationData = .init(","            banner: banner,","            framingWidth: response.framingWidth,","            isBlackFraming: response.isBlackFraming","        )","    }","    \/\/ ...","}","\/\/ ..."],"highlights":[],"identifier":"28-creating-customised-ad.swift","syntax":"swift","type":"file"},"36-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":9},{"line":10}],"fileName":"TutorialRenderer.swift","identifier":"36-creating-customised-ad.swift","type":"file","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    \/\/ ...","    private func loadBanner(_ url: URL) async throws(AdError) -> Data {","        let bannerPath = AssetPath(folder: \"TutorialRendererResources\", url: url)","","        \/\/ try await cache.remove(bannerPath)","","        if let cacheResult = try await cache.read(bannerPath) {","            print(\"TutorialRenderer banner is used from cache: \\(cacheResult.path)\")","            return cacheResult.data","        } else {","            print(\"TutorialRenderer banner is not in the cache yet\")","            let data = try await assetRequestService.request(url)","","            do {","                let path = try await cache.write(bannerPath, data: data)","                print(\"TutorialRenderer banner is cached: \\(path)\")","            } catch {","                print(\"TutorialRenderer banner caching failed: \\(error.localizedDescription)\")","            }","","            return data","        }","    }","    \/\/ ...","}","\/\/ ..."]},"04-creating-customised-ad.swift":{"fileName":"TutorialRenderer.swift","fileType":"swift","content":["\/\/ ...","","struct TutorialRendererResponse: Decodable {\/*...*\/}"],"highlights":[],"identifier":"04-creating-customised-ad.swift","syntax":"swift","type":"file"},"30-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":10},{"line":11},{"line":12},{"line":23},{"line":24}],"fileName":"TutorialRenderer.swift","identifier":"30-creating-customised-ad.swift","type":"file","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    typealias Renderer = TutorialRenderer","","    var presentationData: PresentationData?","    weak var delegate: AdControllerDelegate?","","    \/\/ private let assetRepository: AssetRepository","    private let cache: AssetCache","    private let assetRequestService: AssetRequestService","    private let decoder: JSONDecoder","","    init?(_ assetRepository: AssetRepository) {","        \/\/ self.assetRepository = assetRepository","        \/\/ decoder = .init()","        \/\/ decoder.keyDecodingStrategy = .convertFromSnakeCase","        return nil","    }","","    init?(_ cache: AssetCache, _ assetRequestService: AssetRequestService) {","        self.cache = cache","        self.assetRequestService = assetRequestService","        decoder = .init()","        decoder.keyDecodingStrategy = .convertFromSnakeCase","    }","","    \/\/ Will be called every time an ad is loaded or reloaded.","    func configure(_ data: Data, _ metadata: AdMetadata) async throws(AdError) {","        let response: TutorialRendererResponse = try decoder.decode(from: data)","        let bannerResult = try await assetRepository.getAsset(response.bannerURL)","","        switch bannerResult.cacheResult {","        case .success(let path):","            print(\"TutorialRenderer banner cached: \\(path)\")","        case .failure(let error):","            print(\"TutorialRenderer banner caching failed: \\(error.localizedDescription)\")","        }","","        let banner = bannerResult.data","        metadata.rendererMetadata = [","            \"custom_message\":","            \"my custom message to the app\"","        ]","","        presentationData = .init(","            banner: banner,","            framingWidth: response.framingWidth,","            isBlackFraming: response.isBlackFraming","        )","    }","    \/\/ ...","}","\/\/ ..."]},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement":{"abstract":[{"text":"A key object interface describing the advertisement.","type":"text"}],"title":"Advertisement","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Advertisement","kind":"identifier"}],"navigatorTitle":[{"text":"Advertisement","kind":"identifier"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","kind":"symbol","url":"\/documentation\/adsdkcore\/advertisement","role":"symbol","type":"topic"},"doc://com.adsdk.core/documentation/AdSDKCore/AdRequest":{"abstract":[{"text":"Describes a request to load an advertisement.","type":"text"}],"navigatorTitle":[{"text":"AdRequest","kind":"identifier"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/adsdkcore\/adrequest","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AdRequest"}],"title":"AdRequest"},"doc://com.adsdk.core/tutorials/AdSDKCore/Custom-Handling-Of-Target-Tap-URLs#Preparing-the-app":{"abstract":[{"type":"text","text":"Sometimes you need to handle taps in your own way. For example, to display ads in the internal browser in the app. In this tutorial, we will learn how to customise the SDK’s tap handling behaviour."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Preparing-the-app","kind":"section","title":"Preparing the app","type":"section","url":"\/tutorials\/adsdkcore\/custom-handling-of-target-tap-urls#Preparing-the-app","role":"pseudoSymbol"},"doc://com.adsdk.core/documentation/AdSDKCore/AdError":{"role":"symbol","url":"\/documentation\/adsdkcore\/aderror","navigatorTitle":[{"text":"AdError","kind":"identifier"}],"kind":"symbol","type":"topic","title":"AdError","abstract":[{"text":"Type of SDK-related error.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"AdError","kind":"identifier"}]},"09-creating-customised-ad.swift":{"fileName":"TutorialRenderer.swift","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    private let assetRepository: AssetRepository","    private let decoder: JSONDecoder","","    init?(_ assetRepository: AssetRepository) {","        self.assetRepository = assetRepository","        decoder = .init()","        decoder.keyDecodingStrategy = .convertFromSnakeCase","    }","","    \/\/ Will be called every time an ad is loaded or reloaded.","    func configure(_ data: Data, _ metadata: AdMetadata) async throws(AdError) {","        let response: TutorialRendererResponse = try decoder.decode(from: data)","        let bannerResult = try await assetRepository.getAsset(response.bannerURL)","    }","}","","struct TutorialRendererResponse: Decodable {\/*...*\/}"],"highlights":[{"line":17}],"identifier":"09-creating-customised-ad.swift","syntax":"swift","type":"file"},"12-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":5},{"line":6},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50}],"fileName":"TutorialRenderer.swift","identifier":"12-creating-customised-ad.swift","type":"file","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    var presentationData: PresentationData?","","    private let assetRepository: AssetRepository","    private let decoder: JSONDecoder","","    init?(_ assetRepository: AssetRepository) {","        self.assetRepository = assetRepository","        decoder = .init()","        decoder.keyDecodingStrategy = .convertFromSnakeCase","    }","","    \/\/ Will be called every time an ad is loaded or reloaded.","    func configure(_ data: Data, _ metadata: AdMetadata) async throws(AdError) {","        let response: TutorialRendererResponse = try decoder.decode(from: data)","        let bannerResult = try await assetRepository.getAsset(response.bannerURL)","","        switch bannerResult.cacheResult {","        case .success(let path):","            print(\"TutorialRenderer banner cached: \\(path)\")","        case .failure(let error):","            print(\"TutorialRenderer banner caching failed: \\(error.localizedDescription)\")","        }","","        let banner = bannerResult.data","        metadata.rendererMetadata = [","            \"custom_data\":","            \"my custom data that will be available in the app\"","        ]","","        presentationData = .init(","            banner: banner,","            framingWidth: response.framingWidth,","            isBlackFraming: response.isBlackFraming","        )","    }","}","","\/\/ MARK: - Models","extension TutorialController {","    struct PresentationData {","        let banner: Data","        let framingWidth: Double","        let isBlackFraming: Bool","    }","}","","struct TutorialRendererResponse: Decodable {\/*...*\/}",""]},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Request-to-unload-or-hide-ad":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Request-to-unload-or-hide-ad","title":"Request to unload or hide ad","abstract":[{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true},{"type":"text","text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":" and how we can interact with them.","type":"text"}],"url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Request-to-unload-or-hide-ad","kind":"section"},"23-creating-customised-ad.json":{"type":"file","fileName":"Response.json","identifier":"23-creating-customised-ad.json","fileType":"json","syntax":"json","highlights":[],"content":["{","    \/\/ ...","    ad_name: \"tutorialad\", \/\/ <-------","    body: {","        \/\/ ...","        ext: {","            \/\/ ...","            adData: {","                banner_image: Banner URL","                framing_width: Framing width","                is_black_framing: Boolean value – whether the color should be black or white.","            }","        }","    }","}",""]},"doc://com.adsdk.core/tutorials/AdSDKCore/Custom-Handling-Of-Target-Tap-URLs#Creating-a-target-URL-handler":{"url":"\/tutorials\/adsdkcore\/custom-handling-of-target-tap-urls#Creating-a-target-URL-handler","abstract":[{"type":"text","text":"Sometimes you need to handle taps in your own way. For example, to display ads in the internal browser in the app. In this tutorial, we will learn how to customise the SDK’s tap handling behaviour."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Creating-a-target-URL-handler","role":"pseudoSymbol","title":"Creating a target URL handler","kind":"section","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-Parameters-For-All-Request-Types#Modifying-global-parameters":{"abstract":[{"text":"We already know how to create and perform ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true,"type":"reference"},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest","isActive":true},{"type":"text","text":", and "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest","isActive":true},{"type":"text","text":". However, each of them can have additional parameters, which are called global parameters because they are specified globally for all requests. The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each request."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Modifying-global-parameters","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/adsdkcore\/global-parameters-for-all-request-types#Modifying-global-parameters","title":"Modifying global parameters"},"01-creating-customised-ad.png":{"identifier":"01-creating-customised-ad.png","alt":"The rectangles with the words Advertisement and AdController, where AdController is highlighted. Advertisement is connected to AdController by an arrow.","type":"image","variants":[{"url":"\/images\/com.adsdk.core\/01-creating-customised-ad.png","traits":["1x","light"]}]},"25-creating-customised-ad.swift":{"fileName":"Main.swift","fileType":"swift","content":["\/\/ ...","extension MainViewModel {","    func configure() async {","        do {","            let service = try await AdService(","                networkID: 1800,","                cacheSize: 20,","                configurationTimeout: 60 \/\/ Can be skipped","            )","","            service.registerRenderer(TutorialRenderer.self, forName: \"tutorialad\")","            \/\/ do {","            \/\/     try await service.setCacheSize(50)","            \/\/ } catch {","            \/\/     print(\"Error during changing cache size: \\(error.localizedDescription)\")","            \/\/ }","","            self.service = service","            state = .ready(service)","            isGDPRAlertShown = true","","        } catch {","            state = .error(error.localizedDescription)","        }","    }","    \/\/ ...","}","\/\/ ..."],"highlights":[{"line":10},{"line":11}],"identifier":"25-creating-customised-ad.swift","syntax":"swift","type":"file"},"doc://com.adsdk.core/tutorials/AdSDKCore/First-Steps-For-Working-With-AdSDK#AdService-creation":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK#AdService-creation","title":"AdService creation","abstract":[{"text":"This tutorial will guide you the first steps for working with the ","type":"text"},{"type":"codeVoice","code":"AdSDK"},{"type":"text","text":" - creating an "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService","isActive":true},{"type":"text","text":"."}],"url":"\/tutorials\/adsdkcore\/first-steps-for-working-with-adsdk#AdService-creation","kind":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad":{"abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}],"title":"Create and display interstitial ad","estimatedTime":"25min","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad","kind":"project","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad","role":"project","type":"topic"},"doc://com.adsdk.core/documentation/AdSDKCore/AssetResult":{"navigatorTitle":[{"text":"AssetResult","kind":"identifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/adsdkcore\/assetresult","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AssetResult"}],"abstract":[{"type":"text","text":"The result of the "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRepository","type":"reference","isActive":true},{"text":" retrieval process.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetResult","role":"symbol","title":"AssetResult"},"doc://com.adsdk.core/documentation/AdSDKCore/AdService/registerRenderer(_:forName:)":{"type":"topic","kind":"symbol","url":"\/documentation\/adsdkcore\/adservice\/registerrenderer(_:forname:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"registerRenderer","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"T","preciseIdentifier":"s:9AdSDKCore0A7ServiceC16registerRenderer_7forNameyxm_SStAA0aE0RzlF1TL_xmfp","kind":"typeIdentifier"},{"kind":"text","text":".Type, "},{"text":"forName","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Registers a custom ad renderer."}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService\/registerRenderer(_:forName:)","role":"symbol","title":"registerRenderer(_:forName:)"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Advanced-management-of-advertising-resources":{"abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads."}],"kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Advanced-management-of-advertising-resources","role":"pseudoSymbol","type":"section","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Advanced-management-of-advertising-resources","title":"Advanced management of advertising resources"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Creating-a-presentation-layer":{"role":"pseudoSymbol","title":"Creating a presentation layer","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-presentation-layer","type":"section","kind":"section","abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads."}],"url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Creating-a-presentation-layer"},"02-creating-customised-ad.swift":{"syntax":"swift","highlights":[],"fileName":"TutorialRenderer.swift","identifier":"02-creating-customised-ad.swift","type":"file","fileType":"swift","content":["import AdSDKCore","import Foundation","","struct TutorialRendererResponse: Decodable {","    let bannerURL: URL","    let framingWidth: Double","    let isBlackFraming: Bool","","    enum Key: String, CodingKey {","        case body, ext, adData","        case bannerURL = \"bannerImage\"","        case framingWidth","        case isBlackFraming","    }","","    init(from decoder: Decoder) throws {","        let container = try decoder.container(keyedBy: Key.self)","        let body = try container.nestedContainer(keyedBy: Key.self, forKey: .body)","        let ext = try body.nestedContainer(keyedBy: Key.self, forKey: .ext)","        let adData = try ext.nestedContainer(keyedBy: Key.self, forKey: .adData)","","        bannerURL = try adData.decode(URL.self, forKey: .bannerURL)","        framingWidth = try adData.decode(Double.self, forKey: .framingWidth)","        isBlackFraming = try adData.decode(Bool.self, forKey: .isBlackFraming)","    }","}"]},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK":{"abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads."}],"type":"section","kind":"section","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Registering-a-renderer-in-the-SDK","title":"Registering a renderer in the SDK","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK","role":"pseudoSymbol"},"07-creating-customised-ad.swift":{"fileName":"TutorialRenderer.swift","fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class TutorialController: AdController {","    private let assetRepository: AssetRepository","    private let decoder: JSONDecoder","","    init?(_ assetRepository: AssetRepository) {","        self.assetRepository = assetRepository","        decoder = .init()","        decoder.keyDecodingStrategy = .convertFromSnakeCase","    }","","    \/\/ Will be called every time an ad is loaded or reloaded.","    func configure(_ data: Data, _ metadata: AdMetadata) async throws(AdError) {","","    }","}","","struct TutorialRendererResponse: Decodable {\/*...*\/}"],"highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}],"identifier":"07-creating-customised-ad.swift","syntax":"swift","type":"file"},"26-creating-customised-ad.swift":{"syntax":"swift","highlights":[],"fileName":"InlineList.swift","identifier":"26-creating-customised-ad.swift","type":"file","fileType":"swift","content":["\/\/ ...","extension InlineListViewModel {","    func fetchAds() async {","        let requests = Array(repeating: 4810915, count: 5).map {","            AdRequest(","                contentUnit: $0,","                profile: nil, \/\/ Can be skipped","                keywords: nil, \/\/ Can be skipped","                window: nil, \/\/ Can be skipped","                timeoutAfterSeconds: nil, \/\/ Can be skipped","                gdprPd: nil, \/\/ Can be skipped","                campaignId: nil, \/\/ Can be skipped","                bannerId: nil, \/\/ Can be skipped","                isSHBEnabled: nil, \/\/ Can be skipped","                dsa: nil \/\/ Can be skipped","            )","        }","","        dataSource = await getDataSource(service, requests, targetURLHandler)","    }","    \/\/ ...","}"]},"18-creating-customised-ad.swift":{"fileName":"TutorialRenderer.swift","fileType":"swift","content":["import AdSDKCore","import Foundation","","@Observable","@MainActor","final class TutorialController: AdController {","    var presentationData: PresentationData?","    \/\/ ...","}","\/\/ ..."],"highlights":[],"identifier":"18-creating-customised-ad.swift","syntax":"swift","type":"file"},"20-creating-customised-ad.swift":{"type":"file","fileName":"TutorialRenderer.swift","identifier":"20-creating-customised-ad.swift","fileType":"swift","syntax":"swift","highlights":[{"line":6},{"line":7}],"content":["import AdSDKCore","import Foundation","import SwiftUI","","struct TutorialRenderer: View, AdRenderer {","    @State var controller: TutorialController","","    var body: some View {","        Text(\"TODO\")","    }","}","","@Observable","@MainActor","final class TutorialController: AdController {","    var presentationData: PresentationData?","    \/\/ ...","}","\/\/ ..."]},"https://github.com/VM-Mobile-SDK/nextgen-adsdk-ios-tutorial/tree/extending-sdk/creating-customised-ad":{"url":"https:\/\/github.com\/VM-Mobile-SDK\/nextgen-adsdk-ios-tutorial\/tree\/extending-sdk\/creating-customised-ad","identifier":"https:\/\/github.com\/VM-Mobile-SDK\/nextgen-adsdk-ios-tutorial\/tree\/extending-sdk\/creating-customised-ad","titleInlineContent":[{"text":"this project","type":"text"}],"type":"link","title":"this project"},"doc://com.adsdk.core/documentation/AdSDKCore/TrackingRequest":{"title":"TrackingRequest","url":"\/documentation\/adsdkcore\/trackingrequest","type":"topic","abstract":[{"type":"text","text":"Trigger a request for conversion tracking."}],"kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TrackingRequest"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest","navigatorTitle":[{"kind":"identifier","text":"TrackingRequest"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events":{"abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference","isActive":true},{"text":" and how we can interact with them.","type":"text"}],"title":"Monitor and process ad-related events","estimatedTime":"1hr 0min","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events","kind":"project","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events","role":"project","type":"topic"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad#Hiding-interstitial-ad":{"abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Hiding-interstitial-ad","kind":"section","title":"Hiding interstitial ad","type":"section","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Hiding-interstitial-ad","role":"pseudoSymbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-Parameters-For-All-Request-Types#Preparing-the-app":{"abstract":[{"type":"text","text":"We already know how to create and perform "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest","type":"reference","isActive":true},{"type":"text","text":", and "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest","isActive":true,"type":"reference"},{"text":". However, each of them can have additional parameters, which are called global parameters because they are specified globally for all requests. The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each request.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Preparing-the-app","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/adsdkcore\/global-parameters-for-all-request-types#Preparing-the-app","title":"Preparing the app"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tracking-events":{"abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference","isActive":true},{"text":" and how we can interact with them.","type":"text"}],"type":"section","kind":"section","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitor-and-process-advertising-tracking-events","title":"Monitor and process advertising tracking events","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tracking-events","role":"pseudoSymbol"},"doc://com.adsdk.core/documentation/AdSDKCore/AdControllerDelegate":{"kind":"symbol","url":"\/documentation\/adsdkcore\/adcontrollerdelegate","title":"AdControllerDelegate","type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"AdControllerDelegate","kind":"identifier"}],"abstract":[{"text":"The protocol of class that is responsible for communication between ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController","type":"reference","isActive":true},{"type":"text","text":"."}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdControllerDelegate","navigatorTitle":[{"kind":"identifier","text":"AdControllerDelegate"}]}},"variantOverrides":[{"patch":[{"op":"replace","value":"occ","path":"\/identifier\/interfaceLanguage"}],"traits":[{"interfaceLanguage":"occ"}]}]}