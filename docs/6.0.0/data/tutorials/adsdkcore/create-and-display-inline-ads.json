{"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","paths":[["doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/$volume","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK"],["doc:\/\/com.adsdk.core\/documentation\/AdSDKCore"]],"modules":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK#AdService-creation"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-inline-advertisements"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Defining-the-size-of-the-inline-ad"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-and-displaying-a-list-of-advertisements","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Tracking-ad-visibility","kind":"task"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Creating-interstitial-advertisements","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Presenting-interstitial-ad"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Hiding-interstitial-ad"}]},{"sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitoring-of-ad-related-events","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Request-to-unload-or-hide-ad","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tracking-events","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tap-events"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-custom-advertising-events"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Preparing-the-app","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#User-tagging"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Conversion-tracking"}]},{"sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Preparing-the-app"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Modifying-global-parameters","kind":"task"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Limiting-the-cache-size","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Flushing-the-cache"}]}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements","projects":[{"sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Preparing-the-app","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Creating-a-target-URL-handler","kind":"task"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs"},{"sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-business-layer","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Event-management"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-presentation-layer"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Advanced-management-of-advertising-resources"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising"}]}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/adsdkcore\/create-and-display-inline-ads"]},{"paths":["\/tutorials\/adsdkcore\/create-and-display-inline-ads"],"traits":[{"interfaceLanguage":"occ"}]}],"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy."}]},{"inlineContent":[{"type":"text","text":"We will continue to build the app, so be sure to follow all the previous tutorials. You can download "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/VM-Mobile-SDK\/nextgen-adsdk-ios-tutorial\/tree\/built-in-capabilities\/create-inline-ads"},{"text":" which has already implemented all steps from this tutorial.","type":"text"}],"type":"paragraph"}],"title":"Create and display inline ads","chapter":"Working with the built-in capabilities of the SDK","estimatedTimeInMinutes":45,"kind":"hero"},{"kind":"tasks","tasks":[{"stepsSection":[{"code":null,"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s create "},{"type":"codeVoice","code":"AdCell.swift"},{"text":" in the ","type":"text"},{"type":"codeVoice","code":"Subviews"},{"type":"text","text":" folder. Since we plan to display multiple ads in the list, we will use it to display a single ad."}]}],"caption":[],"media":"01-create-display-inline-ads-screenshot.png"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create an "},{"type":"codeVoice","code":"AdCell"},{"type":"text","text":" and an "},{"code":"AdCellViewModel","type":"codeVoice"},{"text":". In this case, the ","type":"text"},{"code":"AdCellViewModel","type":"codeVoice"},{"type":"text","text":" conform to the "},{"type":"codeVoice","code":"Identifiable"},{"text":" protocol for displaying in the list. Also, we pass the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService","isActive":true},{"type":"text","text":" to the initialiser, which will be used to create the ad later."}]}],"caption":[],"runtimePreview":null,"media":null,"code":"01-create-display-inline-ads.swift"},{"media":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To create advertisements, we use the "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService\/makeAdvertisement(request:placementType:targetURLHandler:eventDelegate:)","type":"reference","isActive":true},{"text":" method. The most important parameter now is ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","type":"reference","isActive":true},{"type":"text","text":", which describes the request that will be sent to the server to receive ads. Let’s pass it through the initialiser and look at it in more detail later."}]}],"code":"02-create-display-inline-ads.swift","runtimePreview":null,"type":"step"},{"media":null,"code":"03-create-display-inline-ads.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you successfully create an ad, you will receive the downloaded "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"text":" object. You can think of it as a ViewModel that holds the data and state of your ad. We store this object and pass it to ","type":"text"},{"code":"AdCell","type":"codeVoice"},{"type":"text","text":"."}]}],"runtimePreview":null,"caption":[]},{"code":"04-create-display-inline-ads.swift","caption":[],"media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"If we have an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" object, it remains to add a "},{"type":"codeVoice","code":"View"},{"text":". ","type":"text"},{"code":"AdSDKSwiftUI","type":"codeVoice"},{"type":"text","text":" has "},{"code":"AdView","type":"codeVoice"},{"text":", which is the presentation layer of your inline ad.","type":"text"}]}],"type":"step"}],"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Your "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService","type":"reference","isActive":true},{"type":"text","text":" is ready for creating advertisements, so in this section, we will create an "},{"type":"codeVoice","code":"AdCell"},{"text":" for future ad display.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}],"title":"Creating inline advertisements","anchor":"Creating-inline-advertisements"},{"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Our ","type":"text"},{"code":"AdCell","type":"codeVoice"},{"type":"text","text":" can load and display ads, but how can we understand what size the "},{"type":"codeVoice","code":"AdView"},{"type":"text","text":" should be? In this section we will deal with this question."}]}],"mediaPosition":"trailing"}],"title":"Defining the size of the inline ad","stepsSection":[{"type":"step","caption":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdMetadata"},{"type":"text","text":" is optional, but you can be sure that if you have not called the "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/reload()","isActive":true},{"type":"text","text":" method, the object will be present in the "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference","isActive":true},{"text":".","type":"text"}]}],"name":"Note","type":"aside","style":"note"}],"content":[{"inlineContent":[{"text":"As we already know, ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference","isActive":true},{"type":"text","text":" stores advertising data. Let’s try to get it! We can obtain all possible advertising data using "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/metadata","isActive":true},{"type":"text","text":". This is the one we will use to obtain the size data."}],"type":"paragraph"}],"media":null,"runtimePreview":null,"code":"04-create-display-inline-ads.swift"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"We are interested in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdMetadata\/aspectRatio","type":"reference"},{"text":", which is optional. We have implemented the logic so that in cases where it is not present, we will use the 2:1 ratio.","type":"text"}]}],"code":"05-create-display-inline-ads.swift","media":null,"runtimePreview":null,"type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"The last step is to pass this value to the "},{"type":"codeVoice","code":"AdCell"},{"text":". After that, we can be sure that the ad size is displayed correctly.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"media":null,"code":"06-create-display-inline-ads.swift","type":"step","caption":[]}],"anchor":"Defining-the-size-of-the-inline-ad"},{"stepsSection":[{"code":null,"type":"step","media":"02-create-display-inline-ads-screenshot.png","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Let’s create "},{"type":"codeVoice","code":"InlineList.swift"},{"type":"text","text":" in the "},{"type":"codeVoice","code":"Screens"},{"text":" folder.","type":"text"}],"type":"paragraph"}],"caption":[]},{"caption":[{"type":"aside","name":"Note","content":[{"inlineContent":[{"text":"We start the process of loading all the ads as soon as the screen appears, but you can implement your own logic with bash loading on scroll, or load ads before the screen is displayed, it all depends on your needs.","type":"text"}],"type":"paragraph"}],"style":"note"}],"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"This screen is responsible for creating ","type":"text"},{"code":"AdCellViewModels","type":"codeVoice"},{"type":"text","text":" and displaying "},{"type":"codeVoice","code":"AdCells"},{"type":"text","text":"."}]}],"code":"07-create-display-inline-ads.swift","runtimePreview":null},{"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s focus our attention on the "},{"type":"codeVoice","code":"fetchAds"},{"text":" method, because it is in this method that we will implement the logic for filling the ","type":"text"},{"type":"codeVoice","code":"dataSource"},{"type":"text","text":"."}]}],"code":"08-create-display-inline-ads.swift","runtimePreview":null,"caption":[]},{"type":"step","caption":[{"name":"Note","style":"note","content":[{"inlineContent":[{"text":"You can also use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest\/learningTag"},{"text":", but we use ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest\/contentUnit","isActive":true,"type":"reference"},{"type":"text","text":" in this tutorial because it is more commonly used."}],"type":"paragraph"}],"type":"aside"}],"runtimePreview":null,"media":null,"code":"09-create-display-inline-ads.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As you may recall, to create an ad, we need an "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true,"type":"reference"},{"type":"text","text":". It describes the request that will be sent to the server to get an ad. The only mandatory field when creating is "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest\/contentUnit"},{"type":"text","text":" or "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest\/learningTag","isActive":true},{"text":". Content unit is unique ID of a content space. We will create several ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true},{"text":" with the same ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest\/contentUnit","isActive":true},{"text":".","type":"text"}]}]},{"code":"10-create-display-inline-ads.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Time to load ads! Since the loading is async and we want to load all the ads in parallel, we’ll use a "},{"code":"TaskGroup","type":"codeVoice"},{"type":"text","text":", and sort everything by "},{"type":"codeVoice","code":"id"},{"text":" after downloading.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Our screen is ready, now we just need to add it to the navigation stack. To do this, let’s return to ","type":"text"},{"code":"Main.swift","type":"codeVoice"},{"type":"text","text":"."}]}],"media":null,"code":"11-create-display-inline-ads.swift","type":"step","caption":[],"runtimePreview":null},{"type":"step","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s add the "},{"type":"codeVoice","code":"NavigationStack"},{"text":" to the ","type":"text"},{"code":"Main","type":"codeVoice"},{"text":" and implement a navigation to the ","type":"text"},{"code":"InlineList","type":"codeVoice"},{"type":"text","text":". Now, if you did everything right, you can launch the app and see the list of advertisement. Congratulations!"}]}],"code":"12-create-display-inline-ads.swift","runtimePreview":"03-create-display-inline-ads-screenshot.png"}],"anchor":"Creating-and-displaying-a-list-of-advertisements","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"Our "},{"type":"codeVoice","code":"AdCell"},{"type":"text","text":" is ready to load and display a single ad. In this section, we will create a new screen to display the list of advertisements."}],"type":"paragraph"}]}],"title":"Creating and displaying a list of advertisements"},{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"The AdSDK includes the functionality of tracking the percentage of ad visibility. The main work on setting up tracking is not on the app developer, but a small step is also required from the developer to ensure that the tracking works correctly.","type":"text"}]},{"inlineContent":[{"text":"You will learn more about tracking events on a ","type":"text"},{"overridingTitleInlineContent":[{"type":"text","text":"separate tutorial"}],"type":"reference","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events","isActive":true,"overridingTitle":"separate tutorial"},{"type":"text","text":", and in this section, we will add functionality that will unlock the tracking of ad visibility on the screen."}],"type":"paragraph"}]}],"stepsSection":[{"type":"step","caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"If your ad is on a screen that has ","type":"text"},{"code":"ScrollView","type":"codeVoice"},{"type":"text","text":", it is useful for advertisers to track the percentage of the ad’s visibility on the screen. Let’s go back to "},{"type":"codeVoice","code":"InlineList.swift."}]}],"media":null,"code":"13-create-display-inline-ads.swift"},{"type":"step","caption":[],"code":"14-create-display-inline-ads.swift","content":[{"inlineContent":[{"type":"text","text":"To unlock this tracking in the SDK, all we need to do is add the "},{"type":"codeVoice","code":".adsContainer()"},{"text":" modifier to our ","type":"text"},{"code":"ScrollView","type":"codeVoice"},{"text":". Now the SDK will be able to track the percentage of ","type":"text"},{"code":"AdView","type":"codeVoice"},{"text":" visibility on the screen, and advertisers will be able to set up ads for tracking.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"media":null}],"anchor":"Tracking-ad-visibility","title":"Tracking ad visibility"}]},{"title":"Create and display interstitial ad","abstract":[{"text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application.","type":"text"}],"action":{"isActive":true,"overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad","overridingTitle":"Get started","type":"reference"},"kind":"callToAction","featuredEyebrow":"Tutorial"}],"kind":"project","metadata":{"categoryPathComponent":"Meet-AdSDK","role":"project","title":"Create and display inline ads","category":"Meet AdSDK"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads"},"references":{"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitoring-of-ad-related-events":{"title":"Monitoring of ad-related events","type":"section","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitoring-of-ad-related-events","kind":"section","role":"pseudoSymbol","abstract":[{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference","isActive":true},{"type":"text","text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference"},{"text":" and how we can interact with them.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitoring-of-ad-related-events"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Event-management":{"type":"section","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Event-management","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Event-management","abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads."}],"title":"Event management","role":"pseudoSymbol"},"doc://com.adsdk.core/documentation/AdSDKCore/TagRequest":{"abstract":[{"type":"text","text":"Describes a request to “tag” a user."}],"title":"TagRequest","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest","kind":"symbol","url":"\/documentation\/adsdkcore\/tagrequest","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TagRequest"}],"navigatorTitle":[{"text":"TagRequest","kind":"identifier"}],"role":"symbol","type":"topic"},"doc://com.adsdk.core/documentation/AdSDKCore/TrackingRequest":{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest","title":"TrackingRequest","navigatorTitle":[{"text":"TrackingRequest","kind":"identifier"}],"type":"topic","abstract":[{"text":"Trigger a request for conversion tracking.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TrackingRequest"}],"kind":"symbol","url":"\/documentation\/adsdkcore\/trackingrequest"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad#Creating-interstitial-advertisements":{"title":"Creating interstitial advertisements","type":"section","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Creating-interstitial-advertisements","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Creating-interstitial-advertisements"},"04-create-display-inline-ads.swift":{"fileType":"swift","identifier":"04-create-display-inline-ads.swift","highlights":[],"type":"file","syntax":"swift","content":["import SwiftUI","import AdSDKCore","import AdSDKSwiftUI","","\/\/ MARK: - View","struct AdCell: View {","    @State var viewModel: AdCellViewModel","","    var body: some View {","        switch viewModel.state {","        case .loading:","            Text(\"Loading\")","        case .loaded(let advertisement):","            AdView(advertisement: advertisement)","        case .error(let description):","            Text(\"Error: \\(description)\")","        }","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id: Int","    var state: CellState = .loading","","    private var advertisement: Advertisement?","","    init(id: Int, _ service: AdService, _ request: AdRequest) async {","        self.id = id","","        do {","            let advertisement = try await getAdvertisement(service, request)","            self.advertisement = advertisement","            state = .loaded(advertisement)","","        } catch {","            state = .error(error.localizedDescription)","        }","    }","}","","private extension AdCellViewModel {","    func getAdvertisement(","        _ service: AdService,","        _ request: AdRequest","    ) async throws(AdError) -> Advertisement {","        try await service.makeAdvertisement(","            request: request,","            placementType: .inline, \/\/ .inline by default","            targetURLHandler: nil, \/\/ Can be skipped","            eventDelegate: nil \/\/ Can be skipped","        )","    }","}","","\/\/ MARK: - Models","extension AdCellViewModel {","    enum CellState {","        case loading","        case loaded(Advertisement)","        case error(String)","    }","}"],"fileName":"AdCell.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tracking-events":{"type":"section","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tracking-events","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitor-and-process-advertising-tracking-events","abstract":[{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true},{"type":"text","text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true},{"text":" and how we can interact with them.","type":"text"}],"title":"Monitor and process advertising tracking events","role":"pseudoSymbol"},"03-create-display-inline-ads.swift":{"fileName":"AdCell.swift","fileType":"swift","highlights":[{"line":13},{"line":28},{"line":29},{"line":34},{"line":35},{"line":36},{"line":48},{"line":62}],"content":["import SwiftUI","import AdSDKCore","import AdSDKSwiftUI","","\/\/ MARK: - View","struct AdCell: View {","    @State var viewModel: AdCellViewModel","","    var body: some View {","        switch viewModel.state {","        case .loading:","            Text(\"Loading\")","        case .loaded(let advertisement):","            Text(\"Ad should be here\")","        case .error(let description):","            Text(\"Error: \\(description)\")","        }","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id: Int","    var state: CellState = .loading","","    private var advertisement: Advertisement?","","    init(id: Int, _ service: AdService, _ request: AdRequest) async {","        self.id = id","","        do {","            let advertisement = try await getAdvertisement(service, request)","            self.advertisement = advertisement","            state = .loaded(advertisement)","","        } catch {","            state = .error(error.localizedDescription)","        }","    }","}","","private extension AdCellViewModel {","    func getAdvertisement(","        _ service: AdService,","        _ request: AdRequest","    ) async throws(AdError) -> Advertisement {","        try await service.makeAdvertisement(","            request: request,","            placementType: .inline, \/\/ .inline by default","            targetURLHandler: nil, \/\/ Can be skipped","            eventDelegate: nil \/\/ Can be skipped","        )","    }","}","","\/\/ MARK: - Models","extension AdCellViewModel {","    enum CellState {","        case loading","        case loaded(Advertisement)","        case error(String)","    }","}"],"syntax":"swift","type":"file","identifier":"03-create-display-inline-ads.swift"},"02-create-display-inline-ads-screenshot.png":{"alt":"Xcode window showing the correct project structure with Screens\/InlineList.swift.","type":"image","identifier":"02-create-display-inline-ads-screenshot.png","variants":[{"traits":["1x","light"],"url":"\/images\/com.adsdk.core\/02-create-display-inline-ads-screenshot.png"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/AdSDK-Cache-Management#Flushing-the-cache":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Flushing-the-cache","role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"The SDK supports a persistent cache with resources related to ad, these can be banners or other resources, depending on the type of ad. In this tutorial, we’ll look at how an application developer can control the cache."}],"title":"Flushing the cache","kind":"section","url":"\/tutorials\/adsdkcore\/adsdk-cache-management#Flushing-the-cache"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/reload()":{"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"reload","kind":"identifier"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore0A5ErrorO","kind":"typeIdentifier","text":"AdError"},{"kind":"text","text":")"}],"kind":"symbol","title":"reload()","abstract":[{"text":"Reloads advertisement.","type":"text"}],"required":true,"url":"\/documentation\/adsdkcore\/advertisement\/reload()","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/reload()"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising":{"estimatedTime":"1hr 30min","kind":"project","url":"\/tutorials\/adsdkcore\/creating-customised-advertising","role":"project","abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising","title":"Creating customised advertising","type":"topic"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK":{"url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Registering-a-renderer-in-the-SDK","type":"section","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"title":"Registering a renderer in the SDK","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK","role":"pseudoSymbol"},"06-create-display-inline-ads.swift":{"fileName":"AdCell.swift","fileType":"swift","highlights":[{"line":13},{"line":15},{"line":16},{"line":41},{"line":67}],"content":["import SwiftUI","import AdSDKCore","import AdSDKSwiftUI","","\/\/ MARK: - View","struct AdCell: View {","    @State var viewModel: AdCellViewModel","","    var body: some View {","        switch viewModel.state {","        case .loading:","            Text(\"Loading\")","        case let .loaded(advertisement, aspectRatio):","            AdView(advertisement: advertisement)","                .aspectRatio(aspectRatio, contentMode: .fit)","","        case .error(let description):","            Text(\"Error: \\(description)\")","        }","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id: Int","    var state: CellState = .loading","","    private var advertisement: Advertisement?","","    init(id: Int, _ service: AdService, _ request: AdRequest) async {","        self.id = id","","        do {","            let advertisement = try await getAdvertisement(service, request)","            self.advertisement = advertisement","","            let ratio = advertisement.metadata?.aspectRatio ?? 2","","            state = .loaded(advertisement, aspectRatio: ratio)","","        } catch {","            state = .error(error.localizedDescription)","        }","    }","}","","private extension AdCellViewModel {","    func getAdvertisement(","        _ service: AdService,","        _ request: AdRequest","    ) async throws(AdError) -> Advertisement {","        try await service.makeAdvertisement(","            request: request,","            placementType: .inline, \/\/ .inline by default","            targetURLHandler: nil, \/\/ Can be skipped","            eventDelegate: nil \/\/ Can be skipped","        )","    }","}","","\/\/ MARK: - Models","extension AdCellViewModel {","    enum CellState {","        case loading","        case loaded(Advertisement, aspectRatio: Double)","        case error(String)","    }","}"],"syntax":"swift","type":"file","identifier":"06-create-display-inline-ads.swift"},"05-create-display-inline-ads.swift":{"fileType":"swift","identifier":"05-create-display-inline-ads.swift","highlights":[{"line":36},{"line":37},{"line":38}],"type":"file","syntax":"swift","content":["import SwiftUI","import AdSDKCore","import AdSDKSwiftUI","","\/\/ MARK: - View","struct AdCell: View {","    @State var viewModel: AdCellViewModel","","    var body: some View {","        switch viewModel.state {","        case .loading:","            Text(\"Loading\")","        case .loaded(let advertisement):","            AdView(advertisement: advertisement)","        case .error(let description):","            Text(\"Error: \\(description)\")","        }","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id: Int","    var state: CellState = .loading","","    private var advertisement: Advertisement?","","    init(id: Int, _ service: AdService, _ request: AdRequest) async {","        self.id = id","","        do {","            let advertisement = try await getAdvertisement(service, request)","            self.advertisement = advertisement","","            let ratio = advertisement.metadata?.aspectRatio ?? 2","","            state = .loaded(advertisement)","","        } catch {","            state = .error(error.localizedDescription)","        }","    }","}","","private extension AdCellViewModel {","    func getAdvertisement(","        _ service: AdService,","        _ request: AdRequest","    ) async throws(AdError) -> Advertisement {","        try await service.makeAdvertisement(","            request: request,","            placementType: .inline, \/\/ .inline by default","            targetURLHandler: nil, \/\/ Can be skipped","            eventDelegate: nil \/\/ Can be skipped","        )","    }","}","","\/\/ MARK: - Models","extension AdCellViewModel {","    enum CellState {","        case loading","        case loaded(Advertisement)","        case error(String)","    }","}"],"fileName":"AdCell.swift"},"doc://com.adsdk.core/tutorials/Meet-AdSDK/Extending-the-SDK-with-your-custom-advertisements":{"role":"article","url":"\/tutorials\/meet-adsdk\/extending-the-sdk-with-your-custom-advertisements","type":"topic","kind":"article","abstract":[],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements","title":"Extending the SDK with your custom advertisements"},"01-create-display-inline-ads.swift":{"fileName":"AdCell.swift","fileType":"swift","highlights":[],"content":["import SwiftUI","import AdSDKCore","import AdSDKSwiftUI","","\/\/ MARK: - View","struct AdCell: View {","    @State var viewModel: AdCellViewModel","","    var body: some View {","        switch viewModel.state {","        case .loading:","            Text(\"Loading\")","        case .loaded:","            Text(\"Ad should be here\")","        case .error(let description):","            Text(\"Error: \\(description)\")","        }","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id: Int","    var state: CellState = .loading","","    init(id: Int, _ service: AdService) async {","        self.id = id","","        do {","            try await getAdvertisement(service)","","        } catch {","            state = .error(error.localizedDescription)","        }","    }","}","","private extension AdCellViewModel {","    func getAdvertisement(","        _ service: AdService","    ) async throws(AdError) {","","    }","}","","\/\/ MARK: - Models","extension AdCellViewModel {","    enum CellState {","        case loading","        case loaded","        case error(String)","    }","}"],"syntax":"swift","type":"file","identifier":"01-create-display-inline-ads.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/First-Steps-For-Working-With-AdSDK":{"title":"First steps for working with AdSDK","type":"topic","url":"\/tutorials\/adsdkcore\/first-steps-for-working-with-adsdk","kind":"project","role":"project","abstract":[{"type":"text","text":"This tutorial will guide you the first steps for working with the "},{"code":"AdSDK","type":"codeVoice"},{"text":" - creating an ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService","isActive":true,"type":"reference"},{"text":".","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK","estimatedTime":"15min"},"02-create-display-inline-ads.swift":{"fileType":"swift","identifier":"02-create-display-inline-ads.swift","highlights":[{"line":28},{"line":32},{"line":42},{"line":43},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50}],"type":"file","syntax":"swift","content":["import SwiftUI","import AdSDKCore","import AdSDKSwiftUI","","\/\/ MARK: - View","struct AdCell: View {","    @State var viewModel: AdCellViewModel","","    var body: some View {","        switch viewModel.state {","        case .loading:","            Text(\"Loading\")","        case .loaded:","            Text(\"Ad should be here\")","        case .error(let description):","            Text(\"Error: \\(description)\")","        }","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id: Int","    var state: CellState = .loading","","    init(id: Int, _ service: AdService, _ request: AdRequest) async {","        self.id = id","","        do {","            try await getAdvertisement(service, request)","","        } catch {","            state = .error(error.localizedDescription)","        }","    }","}","","private extension AdCellViewModel {","    func getAdvertisement(","        _ service: AdService,","        _ request: AdRequest","    ) async throws(AdError) {","        try await service.makeAdvertisement(","            request: request,","            placementType: .inline, \/\/ .inline by default","            targetURLHandler: nil, \/\/ Can be skipped","            eventDelegate: nil \/\/ Can be skipped","        )","    }","}","","\/\/ MARK: - Models","extension AdCellViewModel {","    enum CellState {","        case loading","        case loaded","        case error(String)","    }","}"],"fileName":"AdCell.swift"},"01-create-display-inline-ads-screenshot.png":{"alt":"Xcode window showing the correct project structure with Subviews\/AdCell.swift.","type":"image","identifier":"01-create-display-inline-ads-screenshot.png","variants":[{"url":"\/images\/com.adsdk.core\/01-create-display-inline-ads-screenshot.png","traits":["1x","light"]}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Advanced-management-of-advertising-resources":{"abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads."}],"kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Advanced-management-of-advertising-resources","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Advanced-management-of-advertising-resources","role":"pseudoSymbol","type":"section","title":"Advanced management of advertising resources"},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking","abstract":[{"type":"text","text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality."}],"url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking","estimatedTime":"30min","type":"topic","kind":"project","role":"project","title":"User tagging and conversion tracking"},"doc://com.adsdk.core/tutorials/AdSDKCore/First-Steps-For-Working-With-AdSDK#AdService-creation":{"type":"section","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK#AdService-creation","url":"\/tutorials\/adsdkcore\/first-steps-for-working-with-adsdk#AdService-creation","abstract":[{"type":"text","text":"This tutorial will guide you the first steps for working with the "},{"code":"AdSDK","type":"codeVoice"},{"type":"text","text":" - creating an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService"},{"text":".","type":"text"}],"title":"AdService creation","role":"pseudoSymbol"},"08-create-display-inline-ads.swift":{"fileType":"swift","identifier":"08-create-display-inline-ads.swift","highlights":[{"line":1}],"type":"file","syntax":"swift","content":["\/\/ ...","extension InlineListViewModel {","    func fetchAds() async {","","    }","}"],"fileName":"InlineList.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Custom-Handling-Of-Target-Tap-URLs#Preparing-the-app":{"type":"section","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Preparing-the-app","url":"\/tutorials\/adsdkcore\/custom-handling-of-target-tap-urls#Preparing-the-app","abstract":[{"text":"Sometimes you need to handle taps in your own way. For example, to display ads in the internal browser in the app. In this tutorial, we will learn how to customise the SDK’s tap handling behaviour.","type":"text"}],"title":"Preparing the app","role":"pseudoSymbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Tracking-ad-visibility":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Tracking-ad-visibility","abstract":[{"type":"text","text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy."}],"url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Tracking-ad-visibility","type":"section","kind":"section","role":"pseudoSymbol","title":"Tracking ad visibility"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-custom-advertising-events":{"role":"pseudoSymbol","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitor-and-process-custom-advertising-events","type":"section","kind":"section","abstract":[{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference","isActive":true},{"text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":" and how we can interact with them.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-custom-advertising-events","title":"Monitor and process custom advertising events"},"doc://com.adsdk.core/documentation/AdSDKCore/AdRequest":{"url":"\/documentation\/adsdkcore\/adrequest","abstract":[{"text":"Describes a request to load an advertisement.","type":"text"}],"title":"AdRequest","role":"symbol","navigatorTitle":[{"text":"AdRequest","kind":"identifier"}],"type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AdRequest"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest"},"doc://com.adsdk.core/documentation/AdSDKCore/AdRequest/contentUnit":{"type":"topic","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"contentUnit"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"contentUnit","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest\/contentUnit","abstract":[{"text":"Unique ID of a content space in the ADITION ad-serving platform.","type":"text"}],"role":"symbol","kind":"symbol","url":"\/documentation\/adsdkcore\/adrequest\/contentunit"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/metadata":{"type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/metadata","abstract":[{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdMetadata","isActive":true,"type":"reference"},{"text":" which contains the basic data about the ad and current renderer.","type":"text"}],"required":true,"url":"\/documentation\/adsdkcore\/advertisement\/metadata","kind":"symbol","role":"symbol","title":"metadata","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"metadata","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore0A8MetadataC","text":"AdMetadata","kind":"typeIdentifier"},{"text":"?","kind":"text"}]},"doc://com.adsdk.core/tutorials/Meet-AdSDK/Working-with-the-built-in-capabilities-of-the-SDK":{"title":"Working with the built-in capabilities of the SDK","type":"topic","url":"\/tutorials\/meet-adsdk\/working-with-the-built-in-capabilities-of-the-sdk","kind":"article","role":"article","abstract":[],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Creating-a-presentation-layer":{"abstract":[{"text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"kind":"section","title":"Creating a presentation layer","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Creating-a-presentation-layer","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-presentation-layer"},"doc://com.adsdk.core/tutorials/Meet-AdSDK":{"kind":"overview","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","type":"topic","abstract":[{"text":"Manage, display, and create your custom advertisements on iOS using cutting-edge technologies such as Structured Concurrency, and SwiftUI.","type":"text"}],"role":"overview","title":"Meet nextgen AdSDK","url":"\/tutorials\/meet-adsdk"},"doc://com.adsdk.core/documentation/AdSDKCore/AdMetadata/aspectRatio":{"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"aspectRatio","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sd","text":"Double","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"aspectRatio","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdMetadata\/aspectRatio","abstract":[{"text":"The aspect ratio of an advertising banner.","type":"text"}],"role":"symbol","url":"\/documentation\/adsdkcore\/admetadata\/aspectratio","kind":"symbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Creating-inline-advertisements":{"abstract":[{"type":"text","text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy."}],"kind":"section","title":"Creating inline advertisements","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Creating-inline-advertisements","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-inline-advertisements"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Request-to-unload-or-hide-ad":{"abstract":[{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true},{"type":"text","text":" and how we can interact with them."}],"kind":"section","title":"Request to unload or hide ad","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Request-to-unload-or-hide-ad","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Request-to-unload-or-hide-ad"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Creating-a-business-layer":{"url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Creating-a-business-layer","type":"section","abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads."}],"title":"Creating a business layer","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-business-layer","role":"pseudoSymbol"},"doc://com.adsdk.core/documentation/AdSDKCore/AdRequest/learningTag":{"url":"\/documentation\/adsdkcore\/adrequest\/learningtag","abstract":[{"type":"text","text":"Key-value pairs that are attached to content units."}],"fragments":[{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"text":"learningTag","kind":"identifier"},{"kind":"text","text":": ["},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":" : ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":"]?","kind":"text"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest\/learningTag","title":"learningTag","kind":"symbol","type":"topic","role":"symbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tap-events":{"abstract":[{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true},{"type":"text","text":" and how we can interact with them."}],"kind":"section","title":"Monitor and process advertising tap events","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitor-and-process-advertising-tap-events","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tap-events"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad#Presenting-interstitial-ad":{"type":"section","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Presenting-interstitial-ad","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Presenting-interstitial-ad","abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}],"title":"Presenting interstitial ad","role":"pseudoSymbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad#Hiding-interstitial-ad":{"title":"Hiding interstitial ad","type":"section","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Hiding-interstitial-ad","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Hiding-interstitial-ad"},"doc://com.adsdk.core/documentation/AdSDKCore/AdMetadata":{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdMetadata","abstract":[{"type":"text","text":"A class that contains the basic data about the advertisement and renderer."}],"type":"topic","navigatorTitle":[{"text":"AdMetadata","kind":"identifier"}],"role":"symbol","url":"\/documentation\/adsdkcore\/admetadata","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"AdMetadata","kind":"identifier"}],"title":"AdMetadata","kind":"symbol"},"13-create-display-inline-ads.swift":{"fileName":"InlineList.swift","fileType":"swift","highlights":[],"content":["\/\/ ...","struct InlineList: View {","    @State var viewModel: InlineListViewModel","","    var body: some View {","        ScrollView {","            LazyVStack {","                ForEach(viewModel.dataSource) { viewModel in","                    AdCell(viewModel: viewModel)","                }","            }","        }","        .navigationTitle(\"Inline Ads List\")","        .task {","            await viewModel.fetchAds()","        }","    }","}","\/\/ ..."],"syntax":"swift","type":"file","identifier":"13-create-display-inline-ads.swift"},"03-create-display-inline-ads-screenshot.png":{"alt":"A phone screen with several advertising banners showing different characters from films and TV series.","type":"image","identifier":"03-create-display-inline-ads-screenshot.png","variants":[{"traits":["1x","light"],"url":"\/images\/com.adsdk.core\/03-create-display-inline-ads-screenshot.png"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Creating-and-displaying-a-list-of-advertisements":{"title":"Creating and displaying a list of advertisements","type":"section","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Creating-and-displaying-a-list-of-advertisements","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-and-displaying-a-list-of-advertisements"},"doc://com.adsdk.core/tutorials/AdSDKCore/Custom-Handling-Of-Target-Tap-URLs#Creating-a-target-URL-handler":{"title":"Creating a target URL handler","type":"section","url":"\/tutorials\/adsdkcore\/custom-handling-of-target-tap-urls#Creating-a-target-URL-handler","kind":"section","role":"pseudoSymbol","abstract":[{"text":"Sometimes you need to handle taps in your own way. For example, to display ads in the internal browser in the app. In this tutorial, we will learn how to customise the SDK’s tap handling behaviour.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Creating-a-target-URL-handler"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Defining-the-size-of-the-inline-ad":{"type":"section","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Defining-the-size-of-the-inline-ad","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Defining-the-size-of-the-inline-ad","abstract":[{"type":"text","text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy."}],"title":"Defining the size of the inline ad","role":"pseudoSymbol"},"14-create-display-inline-ads.swift":{"fileName":"InlineList.swift","fileType":"swift","highlights":[{"line":13}],"content":["\/\/ ...","struct InlineList: View {","    @State var viewModel: InlineListViewModel","","    var body: some View {","        ScrollView {","            LazyVStack {","                ForEach(viewModel.dataSource) { viewModel in","                    AdCell(viewModel: viewModel)","                }","            }","        }","        .adsContainer()","        .navigationTitle(\"Inline Ads List\")","        .task {","            await viewModel.fetchAds()","        }","    }","}","\/\/ ..."],"syntax":"swift","type":"file","identifier":"14-create-display-inline-ads.swift"},"doc://com.adsdk.core/documentation/AdSDKCore/AdService":{"type":"topic","title":"AdService","role":"symbol","navigatorTitle":[{"text":"AdService","kind":"identifier"}],"abstract":[{"type":"text","text":"A key object for configuring your advertisements."}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AdService"}],"url":"\/documentation\/adsdkcore\/adservice","kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement":{"abstract":[{"text":"A key object interface describing the advertisement.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Advertisement"}],"title":"Advertisement","role":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","url":"\/documentation\/adsdkcore\/advertisement","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Advertisement"}],"kind":"symbol"},"09-create-display-inline-ads.swift":{"fileType":"swift","identifier":"09-create-display-inline-ads.swift","highlights":[{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}],"type":"file","syntax":"swift","content":["\/\/ ...","extension InlineListViewModel {","    func fetchAds() async {","        let requests = Array(repeating: 4810915, count: 5).map {","            AdRequest(","                contentUnit: $0,","                profile: nil, \/\/ Can be skipped","                keywords: nil, \/\/ Can be skipped","                window: nil, \/\/ Can be skipped","                timeoutAfterSeconds: nil, \/\/ Can be skipped","                gdprPd: nil, \/\/ Can be skipped","                campaignId: nil, \/\/ Can be skipped","                bannerId: nil, \/\/ Can be skipped","                isSHBEnabled: nil, \/\/ Can be skipped","                dsa: nil \/\/ Can be skipped","            )","        }","    }","}"],"fileName":"InlineList.swift"},"doc://com.adsdk.core/documentation/AdSDKCore/AdService/makeAdvertisement(request:placementType:targetURLHandler:eventDelegate:)":{"url":"\/documentation\/adsdkcore\/adservice\/makeadvertisement(request:placementtype:targeturlhandler:eventdelegate:)","abstract":[{"type":"text","text":"Creating an "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"type":"text","text":" object and performing ad request."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"makeAdvertisement","kind":"identifier"},{"kind":"text","text":"("},{"text":"request","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore0A7RequestV","text":"AdRequest","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"placementType","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9AdSDKCore0A13PlacementTypeO","text":"AdPlacementType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"targetURLHandler"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore16TargetURLHandlerP","text":"TargetURLHandler"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"eventDelegate"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9AdSDKCore0A13EventDelegateP","kind":"typeIdentifier","text":"AdEventDelegate"},{"text":"?) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"text":"AdError","kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A5ErrorO"},{"text":") -> ","kind":"text"},{"text":"Advertisement","kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore13AdvertisementP"}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService\/makeAdvertisement(request:placementType:targetURLHandler:eventDelegate:)","role":"symbol","kind":"symbol","title":"makeAdvertisement(request:placementType:targetURLHandler:eventDelegate:)"},"11-create-display-inline-ads.swift":{"fileName":"Main.swift","fileType":"swift","highlights":[],"content":["\/\/ ...","@main","struct Main: App {","    @State var viewModel = MainViewModel()","","    var body: some Scene {","        WindowGroup {","            switch viewModel.state {","            case .loading:","                Text(\"Loading\")","                    .task { await viewModel.configure() }","            case .ready(let adService):","                Text(\"Ready\")","            case .error(let description):","                Text(\"Error: \\(description)\")","            }","        }","    }","}","\/\/ ..."],"syntax":"swift","type":"file","identifier":"11-create-display-inline-ads.swift"},"12-create-display-inline-ads.swift":{"fileType":"swift","identifier":"12-create-display-inline-ads.swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21}],"type":"file","syntax":"swift","content":["\/\/ ...","struct Main: App {","    @State var viewModel = MainViewModel()","","    var body: some Scene {","        WindowGroup {","            NavigationStack {","                switch viewModel.state {","                case .loading:","                    Text(\"Loading\")","                        .task { await viewModel.configure() }","                case .ready(let adService):","                    VStack {","                        NavigationLink(\"Inline Ads List\") {","                            InlineList(viewModel: .init(adService))","                        }","                    }","","                case .error(let description):","                    Text(\"Error: \\(description)\")","                }","            }","        }","    }","}","\/\/ ..."],"fileName":"Main.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/AdSDK-Cache-Management#Limiting-the-cache-size":{"abstract":[{"text":"The SDK supports a persistent cache with resources related to ad, these can be banners or other resources, depending on the type of ad. In this tutorial, we’ll look at how an application developer can control the cache.","type":"text"}],"kind":"section","title":"Limiting the cache size","url":"\/tutorials\/adsdkcore\/adsdk-cache-management#Limiting-the-cache-size","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Limiting-the-cache-size"},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking#User-tagging":{"type":"section","title":"User tagging","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#User-tagging","abstract":[{"text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking#User-tagging","kind":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking#Preparing-the-app":{"role":"pseudoSymbol","url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking#Preparing-the-app","type":"section","kind":"section","abstract":[{"type":"text","text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Preparing-the-app","title":"Preparing the app"},"07-create-display-inline-ads.swift":{"fileName":"InlineList.swift","fileType":"swift","highlights":[],"content":["import AdSDKCore","import AdSDKSwiftUI","import SwiftUI","","\/\/ MARK: - View","struct InlineList: View {","    @State var viewModel: InlineListViewModel","","    var body: some View {","        ScrollView {","            LazyVStack {","                ForEach(viewModel.dataSource) { viewModel in","                    AdCell(viewModel: viewModel)","                }","            }","        }","        .navigationTitle(\"Inline Ads List\")","        .task {","            await viewModel.fetchAds()","        }","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class InlineListViewModel {","    var dataSource = [AdCellViewModel]()","","    private let service: AdService","","    init(_ service: AdService) {","        self.service = service","    }","}","","extension InlineListViewModel {","    func fetchAds() async {","","    }","}"],"syntax":"swift","type":"file","identifier":"07-create-display-inline-ads.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/AdSDK-Cache-Management":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management","url":"\/tutorials\/adsdkcore\/adsdk-cache-management","title":"AdSDK Cache Management","estimatedTime":"10min","abstract":[{"type":"text","text":"The SDK supports a persistent cache with resources related to ad, these can be banners or other resources, depending on the type of ad. In this tutorial, we’ll look at how an application developer can control the cache."}],"type":"topic","kind":"project","role":"project"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-Parameters-For-All-Request-Types#Preparing-the-app":{"url":"\/tutorials\/adsdkcore\/global-parameters-for-all-request-types#Preparing-the-app","type":"section","abstract":[{"type":"text","text":"We already know how to create and perform "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest","isActive":true,"type":"reference"},{"type":"text","text":", and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest"},{"type":"text","text":". However, each of them can have additional parameters, which are called global parameters because they are specified globally for all requests. The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each request."}],"title":"Preparing the app","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Preparing-the-app","role":"pseudoSymbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Custom-Handling-Of-Target-Tap-URLs":{"title":"Custom handling of target tap URLs","type":"topic","url":"\/tutorials\/adsdkcore\/custom-handling-of-target-tap-urls","kind":"project","role":"project","abstract":[{"type":"text","text":"Sometimes you need to handle taps in your own way. For example, to display ads in the internal browser in the app. In this tutorial, we will learn how to customise the SDK’s tap handling behaviour."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs","estimatedTime":"20min"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad":{"url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad","abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad","role":"project","estimatedTime":"25min","kind":"project","title":"Create and display interstitial ad"},"https://github.com/VM-Mobile-SDK/nextgen-adsdk-ios-tutorial/tree/built-in-capabilities/create-inline-ads":{"type":"link","title":"this project","identifier":"https:\/\/github.com\/VM-Mobile-SDK\/nextgen-adsdk-ios-tutorial\/tree\/built-in-capabilities\/create-inline-ads","titleInlineContent":[{"type":"text","text":"this project"}],"url":"https:\/\/github.com\/VM-Mobile-SDK\/nextgen-adsdk-ios-tutorial\/tree\/built-in-capabilities\/create-inline-ads"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-Parameters-For-All-Request-Types":{"url":"\/tutorials\/adsdkcore\/global-parameters-for-all-request-types","abstract":[{"type":"text","text":"We already know how to create and perform "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true,"type":"reference"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest"},{"text":", and ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest","type":"reference","isActive":true},{"type":"text","text":". However, each of them can have additional parameters, which are called global parameters because they are specified globally for all requests. The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each request."}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types","role":"project","estimatedTime":"20min","kind":"project","title":"Global parameters for all request types"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads":{"url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads","abstract":[{"type":"text","text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads","type":"topic","role":"project","estimatedTime":"45min","kind":"project","title":"Create and display inline ads"},"10-create-display-inline-ads.swift":{"fileName":"InlineList.swift","fileType":"swift","highlights":[{"line":18},{"line":19},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45}],"content":["\/\/ ...","extension InlineListViewModel {","    func fetchAds() async {","        let requests = Array(repeating: 4810915, count: 5).map {","            AdRequest(","                contentUnit: $0,","                profile: nil, \/\/ Can be skipped","                keywords: nil, \/\/ Can be skipped","                window: nil, \/\/ Can be skipped","                timeoutAfterSeconds: nil, \/\/ Can be skipped","                gdprPd: nil, \/\/ Can be skipped","                campaignId: nil, \/\/ Can be skipped","                bannerId: nil, \/\/ Can be skipped","                isSHBEnabled: nil, \/\/ Can be skipped","                dsa: nil \/\/ Can be skipped","            )","        }","","        dataSource = await getDataSource(service, requests)","    }","","    private nonisolated func getDataSource(","        _ service: AdService,","        _ requests: [AdRequest]","    ) async -> [AdCellViewModel] {","        await withTaskGroup(","            of: AdCellViewModel.self,","            returning: [AdCellViewModel].self","        ) { group in","            for i in Int.zero..<requests.count {","                let request = requests[i]","                group.addTask {","                    await .init(id: i, service, request)","                }","            }","","            let result = await group.reduce(","                into: [AdCellViewModel]()","            ) { result, cell in","                result.append(cell)","            }","","            return result.sorted { $0.id < $1.id }","        }","    }","}"],"syntax":"swift","type":"file","identifier":"10-create-display-inline-ads.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking#Conversion-tracking":{"title":"Conversion tracking","type":"section","url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking#Conversion-tracking","kind":"section","role":"pseudoSymbol","abstract":[{"text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Conversion-tracking"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-Parameters-For-All-Request-Types#Modifying-global-parameters":{"title":"Modifying global parameters","type":"section","url":"\/tutorials\/adsdkcore\/global-parameters-for-all-request-types#Modifying-global-parameters","kind":"section","role":"pseudoSymbol","abstract":[{"text":"We already know how to create and perform ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest"},{"text":", ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest","type":"reference","isActive":true},{"type":"text","text":", and "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest","type":"reference"},{"text":". However, each of them can have additional parameters, which are called global parameters because they are specified globally for all requests. The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each request.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Modifying-global-parameters"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events":{"abstract":[{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference"},{"type":"text","text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true},{"text":" and how we can interact with them.","type":"text"}],"title":"Monitor and process ad-related events","role":"project","estimatedTime":"1hr 0min","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events","type":"topic","kind":"project","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events"}},"variantOverrides":[{"traits":[{"interfaceLanguage":"occ"}],"patch":[{"value":"occ","path":"\/identifier\/interfaceLanguage","op":"replace"}]}]}