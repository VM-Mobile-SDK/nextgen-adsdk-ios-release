{"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Processes the redirect of the passed URL without processing the target URL."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"silentTap"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10Foundation3URLV","kind":"typeIdentifier","text":"URL"},{"kind":"text","text":")"}],"platforms":["iOS"],"languages":["swift"]}]},{"parameters":[{"name":"url","content":[{"inlineContent":[{"type":"text","text":"The URL whose redirect should be processed."}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"This processing approach is the most different from all the others, as it only processes the redirect of"},{"type":"text","text":" "},{"text":"the passed URL, and ignores the target URL. This approach can only be useful if you know the target","type":"text"},{"text":" ","type":"text"},{"text":"URL and want to hide the redirect that the ad server uses for tracking from the user.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, you know that you have the following URL that should be processed when an advert is"},{"type":"text","text":" "},{"text":"tapped:","type":"text"}]},{"inlineContent":[{"type":"text","text":"https:\/\/adition.com\/redi?lid=0&userid=0&sr=0&gk=0&clickurl=target.com"}],"type":"paragraph"},{"inlineContent":[{"text":"With the query item ","type":"text"},{"type":"codeVoice","code":"clickurl"},{"text":", you know that your target URL to be shown to the user is","type":"text"},{"type":"text","text":" "},{"text":"https:\/\/target.com.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In this case, you can pass the URL for the redirect to the SDK for processing as","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapEvent\/silentTap(_:)","isActive":true},{"type":"text","text":" and the target URL as "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapEvent\/tapURL(_:)","type":"reference"},{"text":". Using this approach, the user","type":"text"},{"text":" ","type":"text"},{"text":"will not see the redirect, but it will be executed without  their knowledge.","type":"text"}]},{"code":["nonisolated func onTap() async {","    let components = URLComponents(","        url: url,","        resolvingAgainstBaseURL: false","    )","","    let targetURL = components?","        .queryItems?","        .last { $0.name == \"clickurl\" }?","        .value","","    guard let targetURL else {","        \/\/ If we can't get target URL – just process tap with passed URL.","        try? await adControllerDelegate?.performTap(.tapURL(.init(url)))","        return","    }","","    \/\/ If we can – we process redirect and tap as a separate processes.","    await withTaskGroup(","        of: Void.self","    ) { [weak adControllerDelegate] group in","        group.addTask {","            \/\/ Process redirect","            try? await adControllerDelegate?.performTap(","                .silentTap(url)","            )","        }","","        group.addTask {","            \/\/ Process tap","            try? await adControllerDelegate?.performTap(","                .tapURL(.init(url))","            )","        }","","        try await group.waitForAll()","    }","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.adsdk.core\/documentation\/AdSDKCore","doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapEvent"]]},"sections":[],"metadata":{"fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"silentTap"},{"kind":"text","text":"("},{"text":"URL","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV"},{"text":")","kind":"text"}],"title":"TapEvent.silentTap(_:)","modules":[{"name":"AdSDKCore"}],"role":"symbol","roleHeading":"Case","symbolKind":"case","externalID":"s:9AdSDKCore8TapEventO06silentC0yAC10Foundation3URLVcACmF"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapEvent\/silentTap(_:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/adsdkcore\/tapevent\/silenttap(_:)"]}],"kind":"symbol","references":{"doc://com.adsdk.core/documentation/AdSDKCore/TapURL":{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapURL","title":"TapURL","type":"topic","kind":"symbol","url":"\/documentation\/adsdkcore\/tapurl","role":"symbol","navigatorTitle":[{"text":"TapURL","kind":"identifier"}],"abstract":[{"type":"text","text":"A structure that describes the URL associated with an advertisement tap event."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TapURL"}]},"doc://com.adsdk.core/documentation/AdSDKCore/TapEvent/silentTap(_:)":{"title":"TapEvent.silentTap(_:)","abstract":[{"type":"text","text":"Processes the redirect of the passed URL without processing the target URL."}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapEvent\/silentTap(_:)","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"silentTap"},{"kind":"text","text":"("},{"preciseIdentifier":"s:10Foundation3URLV","kind":"typeIdentifier","text":"URL"},{"kind":"text","text":")"}],"kind":"symbol","url":"\/documentation\/adsdkcore\/tapevent\/silenttap(_:)"},"doc://com.adsdk.core/documentation/AdSDKCore/TapEvent":{"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TapEvent"}],"type":"topic","navigatorTitle":[{"text":"TapEvent","kind":"identifier"}],"role":"symbol","title":"TapEvent","abstract":[{"type":"text","text":"An enum with all types of ad tap processing."}],"url":"\/documentation\/adsdkcore\/tapevent","kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapEvent"},"doc://com.adsdk.core/documentation/AdSDKCore/TapEvent/tapURL(_:)":{"title":"TapEvent.tapURL(_:)","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapEvent\/tapURL(_:)","type":"topic","abstract":[{"type":"text","text":"Processing tap using passed "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapURL"},{"type":"text","text":"."}],"role":"symbol","kind":"symbol","url":"\/documentation\/adsdkcore\/tapevent\/tapurl(_:)","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"tapURL"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore6TapURLV","kind":"typeIdentifier","text":"TapURL"},{"kind":"text","text":")"}]},"doc://com.adsdk.core/documentation/AdSDKCore":{"abstract":[{"type":"text","text":"Manage, display, and create your custom advertisements on iOS using cutting-edge technologies such as Structured Concurrency, and SwiftUI."}],"kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore","type":"topic","url":"\/documentation\/adsdkcore","title":"AdSDKCore","role":"collection"}}}