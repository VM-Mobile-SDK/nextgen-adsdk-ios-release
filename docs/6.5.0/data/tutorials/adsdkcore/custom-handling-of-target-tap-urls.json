{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs"},"kind":"project","variants":[{"paths":["\/tutorials\/adsdkcore\/custom-handling-of-target-tap-urls"],"traits":[{"interfaceLanguage":"swift"}]},{"paths":["\/tutorials\/adsdkcore\/custom-handling-of-target-tap-urls"],"traits":[{"interfaceLanguage":"occ"}]}],"metadata":{"categoryPathComponent":"Meet-AdSDK","category":"Meet AdSDK","role":"project","title":"Custom handling of target tap URLs"},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"kind":"hero","chapter":"Extending the SDK with your custom advertisements","content":[{"type":"paragraph","inlineContent":[{"text":"Sometimes you need to handle taps in your own way. For example, to display ads in the internal browser in the app. In this tutorial, we will learn how to customise the SDK’s tap handling behaviour.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We will continue to build the app, so be sure to follow all the previous tutorials. You can download "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/VM-Mobile-SDK\/nextgen-adsdk-ios-tutorial\/tree\/extending-sdk\/custom-handling-of-target-tap-urls"},{"type":"text","text":" which has already implemented all steps from this tutorial."}]}],"estimatedTimeInMinutes":20,"title":"Custom handling of target tap URLs"},{"kind":"tasks","tasks":[{"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"In this section, we will create a screen with a browser that will display the target URL when you click on an ad."}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Preparing-the-app","title":"Preparing the app","stepsSection":[{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Create a new ","type":"text"},{"type":"codeVoice","code":"Browser.swift"},{"text":" file in the ","type":"text"},{"type":"codeVoice","code":"Screens"},{"text":" folder. In it, we will implement the browser we will use.","type":"text"}]}],"caption":[],"code":null,"media":"01-custom-handling-target-tap-urls-screenshot.png","runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"In this file, we implement the ","type":"text"},{"type":"codeVoice","code":"UIViewControllerRepresentable"},{"text":" to use the ","type":"text"},{"type":"codeVoice","code":"SFSafariViewController"},{"text":".","type":"text"}]}],"caption":[],"code":"01-custom-handling-target-tap-urls.swift","media":null,"runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Now create a new file ","type":"text"},{"type":"codeVoice","code":"TargetTapURLHandler.swift"},{"text":" in the ","type":"text"},{"type":"codeVoice","code":"Core\/Helpers"},{"text":" path. In this file, we will implement the URL processing logic.","type":"text"}]}],"caption":[],"code":null,"media":"02-custom-handling-target-tap-urls-screenshot.png","runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"The first step is to create a URL wrapper that confirms to the "},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":" protocol."}],"type":"paragraph"}],"caption":[],"code":"02-custom-handling-target-tap-urls.swift","media":null,"runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Next, we create a ","type":"text"},{"code":"TargetTapURLHandler","type":"codeVoice"},{"text":" with a block that we will later call every time we want to present an URL in our browser.","type":"text"}]}],"caption":[],"code":"03-custom-handling-target-tap-urls.swift","media":null,"runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"text":"Now let’s open the ","type":"text"},{"code":"AdCell.swift","type":"codeVoice"},{"text":" file.","type":"text"}],"type":"paragraph"}],"caption":[],"code":"04-custom-handling-target-tap-urls.swift","media":null,"runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Let’s add the ","type":"text"},{"type":"codeVoice","code":"TargetTapURLHandler"},{"text":" to the initializer for future reference.","type":"text"}]}],"caption":[],"code":"05-custom-handling-target-tap-urls.swift","media":null,"runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The last step is to add a presentation logic. To do this, open the "},{"type":"codeVoice","code":"InlineList.swift"},{"type":"text","text":" file."}]}],"caption":[],"code":"06-custom-handling-target-tap-urls.swift","media":null,"runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We add the logic to show the "},{"type":"codeVoice","code":"sheet"},{"type":"text","text":" in case the "},{"type":"codeVoice","code":"presentedTargetURL"},{"type":"text","text":" has a value."}]}],"caption":[],"code":"07-custom-handling-target-tap-urls.swift","media":null,"runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"text":"All that remains is to create a ","type":"text"},{"type":"codeVoice","code":"TargetTapURLHandler"},{"text":" object that can change the state of the ","type":"text"},{"type":"codeVoice","code":"presentedTargetURL"},{"text":" and pass it to the ","type":"text"},{"type":"codeVoice","code":"AdCellViewModel"},{"text":".","type":"text"}],"type":"paragraph"}],"caption":[],"code":"08-custom-handling-target-tap-urls.swift","media":null,"runtimePreview":null}]},{"contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"In this section, we will look at how you can implement custom target URL processing."}],"type":"paragraph"}],"kind":"contentAndMedia"}],"anchor":"Creating-a-target-URL-handler","title":"Creating a target URL handler","stepsSection":[{"type":"step","code":"09-custom-handling-target-tap-urls.swift","caption":[],"media":null,"content":[{"inlineContent":[{"text":"Let’s return to the ","type":"text"},{"code":"TargetTapURLHandler","type":"codeVoice"},{"text":" file we created earlier.","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"type":"step","code":"10-custom-handling-target-tap-urls.swift","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The SDK provides a "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TargetURLHandler","isActive":true},{"type":"text","text":" interface designed to handle target URLs, which you can implement."}]}],"runtimePreview":null},{"type":"step","code":"11-custom-handling-target-tap-urls.swift","caption":[{"style":"note","content":[{"inlineContent":[{"type":"text","text":"If you do not implement this method, all URLs will be considered valid."}],"type":"paragraph"}],"name":"Note","type":"aside"}],"media":null,"content":[{"inlineContent":[{"text":"It has two methods, one of which is optional, so let’s start with it. ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TargetURLHandler\/isValidURL(_:)"},{"text":" will be called every time the SDK wants to validate the target URL. If you return ","type":"text"},{"type":"codeVoice","code":"false"},{"text":", the SDK will throw an ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError\/invalidTargetURL(_:)"},{"text":" error.","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"type":"step","code":"12-custom-handling-target-tap-urls.swift","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"The second method is mandatory. The ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TargetURLHandler\/handleURL(_:)","type":"reference","isActive":true},{"text":" will be called every time the SDK wants the URL to be opened for the user. In our case, we want to call the ","type":"text"},{"type":"codeVoice","code":"onReceive"},{"text":" block.","type":"text"}]}],"runtimePreview":null},{"type":"step","code":"13-custom-handling-target-tap-urls.swift","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"All we have to do is somehow pass this object to the SDK. To do this, open the ","type":"text"},{"code":"AdCell.swift","type":"codeVoice"},{"text":" file.","type":"text"}]}],"runtimePreview":null},{"type":"step","code":"14-custom-handling-target-tap-urls.swift","caption":[],"media":null,"content":[{"inlineContent":[{"text":"As you may have noticed, ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService\/makeAdvertisement(request:placementType:targetURLHandler:eventDelegate:)","type":"reference"},{"text":" has a ","type":"text"},{"code":"targetURLHandler","type":"codeVoice"},{"text":" parameter to which we can pass our object. Let’s do that. Now, if you launch the app and tap on the ad, you can see that the target URL opens in the internal browser. Congratulations!","type":"text"}],"type":"paragraph"}],"runtimePreview":"03-custom-handling-target-tap-urls-screenshot.png"}]}]},{"kind":"callToAction","abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads."}],"action":{"type":"reference","isActive":true,"overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising"},"title":"Creating customised advertising","featuredEyebrow":"Tutorial"}],"hierarchy":{"paths":[["doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/$volume","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements"],["doc:\/\/com.adsdk.core\/documentation\/AdSDKCore"]],"modules":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK","projects":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK#AdService-creation","kind":"task"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-inline-advertisements","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Defining-the-size-of-the-inline-ad","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-and-displaying-a-list-of-advertisements","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Tracking-ad-visibility","kind":"task"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Creating-interstitial-advertisements"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Presenting-interstitial-ad"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Hiding-interstitial-ad"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitoring-of-ad-related-events"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Request-to-unload-or-hide-ad"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tracking-events"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tap-events"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-custom-advertising-events"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Preparing-the-app","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#User-tagging","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Conversion-tracking","kind":"task"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Preparing-the-app","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Modifying-global-parameters","kind":"task"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Limiting-the-cache-size"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Flushing-the-cache"}]}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Preparing-the-app"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Creating-a-target-URL-handler"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs"},{"sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-business-layer","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Event-management","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-presentation-layer","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Advanced-management-of-advertising-resources","kind":"task"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising"}]}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK"},"references":{"doc://com.adsdk.core/documentation/AdSDKCore/TargetURLHandler/handleURL(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handleURL"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV","text":"URL"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"type":"topic","kind":"symbol","title":"handleURL(_:)","required":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TargetURLHandler\/handleURL(_:)","url":"\/documentation\/adsdkcore\/targeturlhandler\/handleurl(_:)","abstract":[{"type":"text","text":"A method for processing an URL that should be opened in the browser."}],"role":"symbol"},"doc://com.adsdk.core/tutorials/Meet-AdSDK/Extending-the-SDK-with-your-custom-advertisements":{"type":"topic","title":"Extending the SDK with your custom advertisements","role":"article","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements","abstract":[],"url":"\/tutorials\/meet-adsdk\/extending-the-sdk-with-your-custom-advertisements","kind":"article"},"12-custom-handling-target-tap-urls.swift":{"content":["\/\/ ...","struct TargetTapURLHandler: TargetURLHandler {","    var onReceive: @MainActor (TargetURL) -> Void","","    @MainActor","    func isValidURL(_ url: URL) async -> Bool { \/\/ Can be skipped","        UIApplication.shared.canOpenURL(url)","    }","","    func handleURL(_ url: URL) async {","        await onReceive(.init(url: url))","    }","}","\/\/ ..."],"fileName":"TargetTapURLHandler.swift","identifier":"12-custom-handling-target-tap-urls.swift","fileType":"swift","type":"file","syntax":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Custom-Handling-Of-Target-Tap-URLs#Creating-a-target-URL-handler":{"kind":"section","type":"section","title":"Creating a target URL handler","url":"\/tutorials\/adsdkcore\/custom-handling-of-target-tap-urls#Creating-a-target-URL-handler","abstract":[{"text":"Sometimes you need to handle taps in your own way. For example, to display ads in the internal browser in the app. In this tutorial, we will learn how to customise the SDK’s tap handling behaviour.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Creating-a-target-URL-handler"},"02-custom-handling-target-tap-urls-screenshot.png":{"type":"image","identifier":"02-custom-handling-target-tap-urls-screenshot.png","alt":"Xcode window showing the correct project structure with Core\/Helpers\/TargetTapURLHandler.swift.","variants":[{"url":"\/images\/com.adsdk.core\/02-custom-handling-target-tap-urls-screenshot.png","traits":["1x","light"]}]},"doc://com.adsdk.core/documentation/AdSDKCore/AdService":{"navigatorTitle":[{"kind":"identifier","text":"AdService"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AdService"}],"abstract":[{"type":"text","text":"A key object for configuring your advertisements."}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService","url":"\/documentation\/adsdkcore\/adservice","role":"symbol","type":"topic","kind":"symbol","title":"AdService"},"doc://com.adsdk.core/tutorials/AdSDKCore/First-Steps-For-Working-With-AdSDK#AdService-creation":{"title":"AdService creation","url":"\/tutorials\/adsdkcore\/first-steps-for-working-with-adsdk#AdService-creation","role":"pseudoSymbol","type":"section","kind":"section","abstract":[{"text":"This tutorial will guide you the first steps for working with the ","type":"text"},{"type":"codeVoice","code":"AdSDK"},{"text":" - creating an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService"},{"text":".","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK#AdService-creation"},"doc://com.adsdk.core/documentation/AdSDKCore/TrackingRequest":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TrackingRequest"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest","type":"topic","kind":"symbol","url":"\/documentation\/adsdkcore\/trackingrequest","title":"TrackingRequest","abstract":[{"type":"text","text":"Trigger a request for conversion tracking."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TrackingRequest"}]},"doc://com.adsdk.core/documentation/AdSDKCore/TargetURLHandler":{"kind":"symbol","url":"\/documentation\/adsdkcore\/targeturlhandler","title":"TargetURLHandler","abstract":[{"text":"The protocol of object responsible for processing the URL that the SDK wants to open in the browser.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TargetURLHandler","kind":"identifier"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TargetURLHandler","type":"topic","navigatorTitle":[{"text":"TargetURLHandler","kind":"identifier"}],"role":"symbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Request-to-unload-or-hide-ad":{"role":"pseudoSymbol","abstract":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":" and how we can interact with them.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Request-to-unload-or-hide-ad","type":"section","title":"Request to unload or hide ad","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Request-to-unload-or-hide-ad","kind":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Tracking-ad-visibility":{"url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Tracking-ad-visibility","type":"section","abstract":[{"type":"text","text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy."}],"role":"pseudoSymbol","kind":"section","title":"Tracking ad visibility","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Tracking-ad-visibility"},"doc://com.adsdk.core/documentation/AdSDKCore/TargetURLHandler/isValidURL(_:)":{"url":"\/documentation\/adsdkcore\/targeturlhandler\/isvalidurl(_:)","abstract":[{"text":"A method to validate an URL before opening in browser.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TargetURLHandler\/isValidURL(_:)","defaultImplementations":1,"type":"topic","required":true,"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"isValidURL"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"URL","preciseIdentifier":"s:10Foundation3URLV"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"title":"isValidURL(_:)","role":"symbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking#Conversion-tracking":{"abstract":[{"text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Conversion-tracking","type":"section","title":"Conversion tracking","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking#Conversion-tracking"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-custom-advertising-events":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-custom-advertising-events","type":"section","kind":"section","title":"Monitor and process custom advertising events","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitor-and-process-custom-advertising-events","abstract":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" and how we can interact with them."}],"role":"pseudoSymbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Custom-Handling-Of-Target-Tap-URLs#Preparing-the-app":{"abstract":[{"type":"text","text":"Sometimes you need to handle taps in your own way. For example, to display ads in the internal browser in the app. In this tutorial, we will learn how to customise the SDK’s tap handling behaviour."}],"url":"\/tutorials\/adsdkcore\/custom-handling-of-target-tap-urls#Preparing-the-app","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Preparing-the-app","title":"Preparing the app","type":"section","kind":"section","role":"pseudoSymbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads":{"title":"Create and display inline ads","kind":"project","abstract":[{"text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads","role":"project","estimatedTime":"45min","type":"topic","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Advanced-management-of-advertising-resources":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Advanced-management-of-advertising-resources","type":"section","kind":"section","title":"Advanced management of advertising resources","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Advanced-management-of-advertising-resources","abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads."}],"role":"pseudoSymbol"},"14-custom-handling-target-tap-urls.swift":{"type":"file","syntax":"swift","identifier":"14-custom-handling-target-tap-urls.swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    \/\/ ...","    init(","        id: Int,","        _ service: AdService,","        _ request: AdRequest,","        _ targetURLHandler: TargetTapURLHandler","    ) async {","        self.id = id","        self.service = service","","        do {","            let advertisement = try await getAdvertisement(","                request,","                targetURLHandler","            )","","            self.advertisement = advertisement","","            let ratio = advertisement.metadata?.aspectRatio ?? 2","","            state = .loaded(advertisement, aspectRatio: ratio)","","        } catch {","            state = .error(error.localizedDescription)","        }","    }","}","","private extension AdCellViewModel {","    func getAdvertisement(","        _ request: AdRequest,","        _ targetURLHandler: TargetTapURLHandler","    ) async throws(AdError) -> Advertisement {","        try await service.makeAdvertisement(","            request: request,","            placementType: .inline, \/\/ .inline by default","            targetURLHandler: targetURLHandler,","            eventDelegate: self","        )","    }","    \/\/ ...","}","\/\/ ..."],"fileName":"AdCell.swift","fileType":"swift","highlights":[{"line":16},{"line":17},{"line":18},{"line":19},{"line":35},{"line":36},{"line":41}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Defining-the-size-of-the-inline-ad":{"type":"section","abstract":[{"type":"text","text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy."}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Defining-the-size-of-the-inline-ad","title":"Defining the size of the inline ad","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Defining-the-size-of-the-inline-ad"},"https://github.com/VM-Mobile-SDK/nextgen-adsdk-ios-tutorial/tree/extending-sdk/custom-handling-of-target-tap-urls":{"type":"link","identifier":"https:\/\/github.com\/VM-Mobile-SDK\/nextgen-adsdk-ios-tutorial\/tree\/extending-sdk\/custom-handling-of-target-tap-urls","title":"this project","url":"https:\/\/github.com\/VM-Mobile-SDK\/nextgen-adsdk-ios-tutorial\/tree\/extending-sdk\/custom-handling-of-target-tap-urls","titleInlineContent":[{"type":"text","text":"this project"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad#Hiding-interstitial-ad":{"type":"section","abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Hiding-interstitial-ad","title":"Hiding interstitial ad","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Hiding-interstitial-ad"},"10-custom-handling-target-tap-urls.swift":{"content":["\/\/ ...","struct TargetTapURLHandler: TargetURLHandler {","    var onReceive: @MainActor (TargetURL) -> Void","}","\/\/ ..."],"fileName":"TargetTapURLHandler.swift","syntax":"swift","identifier":"10-custom-handling-target-tap-urls.swift","fileType":"swift","type":"file","highlights":[{"line":2}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Creating-and-displaying-a-list-of-advertisements":{"url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Creating-and-displaying-a-list-of-advertisements","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-and-displaying-a-list-of-advertisements","abstract":[{"type":"text","text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy."}],"type":"section","title":"Creating and displaying a list of advertisements","role":"pseudoSymbol","kind":"section"},"08-custom-handling-target-tap-urls.swift":{"syntax":"swift","type":"file","highlights":[{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":40},{"line":45},{"line":46},{"line":55}],"identifier":"08-custom-handling-target-tap-urls.swift","fileName":"InlineList.swift","content":["\/\/ MARK: - View","struct InlineList: View {","    @State var viewModel: InlineListViewModel","","    var body: some View {","        ScrollView {","            \/\/ ...","        }","        .adsContainer()","        .navigationTitle(\"Inline Ads List\")","        .task {\/* ... *\/}","        .sheet(item: $viewModel.presentedTargetURL) {","            Browser(targetURL: $0.url)","        }","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class InlineListViewModel {","    var dataSource = [AdCellViewModel]()","    var presentedTargetURL: TargetURL?","","    private let service: AdService","","    @ObservationIgnored","    lazy private var targetURLHandler: TargetTapURLHandler = {","        .init { [weak self] targetURL in","            self?.presentedTargetURL = targetURL","        }","    }()","","    init(_ service: AdService) {\/* ... *\/}","}","","extension InlineListViewModel {","    func fetchAds() async {","        \/\/ ...","        dataSource = await getDataSource(service, requests, targetURLHandler)","    }","","    private nonisolated func getDataSource(","        _ service: AdService,","        _ requests: [AdRequest],","        _ targetURLHandler: TargetTapURLHandler","    ) async -> [AdCellViewModel] {","        await withTaskGroup(","            of: AdCellViewModel.self,","            returning: [AdCellViewModel].self","        ) { group in","            for i in Int.zero..<requests.count {","                let request = requests[i]","                group.addTask {","                    await .init(id: i, service, request, targetURLHandler)","                }","            }","","            \/\/ ...","        }","    }","}"],"fileType":"swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events","role":"project","estimatedTime":"1hr 0min","kind":"project","abstract":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" and how we can interact with them."}],"type":"topic","title":"Monitor and process ad-related events","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events"},"11-custom-handling-target-tap-urls.swift":{"type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":4},{"line":5},{"line":6},{"line":7},{"line":8}],"identifier":"11-custom-handling-target-tap-urls.swift","fileName":"TargetTapURLHandler.swift","content":["\/\/ ...","struct TargetTapURLHandler: TargetURLHandler {","    var onReceive: @MainActor (TargetURL) -> Void","","    @MainActor","    func isValidURL(_ url: URL) async -> Bool { \/\/ Can be skipped","        UIApplication.shared.canOpenURL(url)","    }","}","\/\/ ..."]},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking#User-tagging":{"kind":"section","abstract":[{"type":"text","text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality."}],"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#User-tagging","title":"User tagging","url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking#User-tagging"},"doc://com.adsdk.core/tutorials/AdSDKCore/AdSDK-Cache-Management":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management","title":"AdSDK Cache Management","role":"project","estimatedTime":"10min","type":"topic","kind":"project","abstract":[{"type":"text","text":"The SDK supports a persistent cache with resources related to ad, these can be banners or other resources, depending on the type of ad. In this tutorial, we’ll look at how an application developer can control the cache."}],"url":"\/tutorials\/adsdkcore\/adsdk-cache-management"},"doc://com.adsdk.core/tutorials/AdSDKCore/AdSDK-Cache-Management#Flushing-the-cache":{"kind":"section","title":"Flushing the cache","role":"pseudoSymbol","abstract":[{"type":"text","text":"The SDK supports a persistent cache with resources related to ad, these can be banners or other resources, depending on the type of ad. In this tutorial, we’ll look at how an application developer can control the cache."}],"type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Flushing-the-cache","url":"\/tutorials\/adsdkcore\/adsdk-cache-management#Flushing-the-cache"},"doc://com.adsdk.core/documentation/AdSDKCore/AdRequest":{"url":"\/documentation\/adsdkcore\/adrequest","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","abstract":[{"type":"text","text":"Describes a request to load an advertisement."}],"title":"AdRequest","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AdRequest"}],"navigatorTitle":[{"kind":"identifier","text":"AdRequest"}],"type":"topic"},"doc://com.adsdk.core/tutorials/AdSDKCore/Custom-Handling-Of-Target-Tap-URLs":{"title":"Custom handling of target tap URLs","url":"\/tutorials\/adsdkcore\/custom-handling-of-target-tap-urls","abstract":[{"type":"text","text":"Sometimes you need to handle taps in your own way. For example, to display ads in the internal browser in the app. In this tutorial, we will learn how to customise the SDK’s tap handling behaviour."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs","role":"project","type":"topic","estimatedTime":"20min","kind":"project"},"doc://com.adsdk.core/documentation/AdSDKCore/AdError/invalidTargetURL(_:)":{"kind":"symbol","abstract":[{"type":"text","text":"Validation error for the URL associated with the tap."}],"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"invalidTargetURL"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"URL","preciseIdentifier":"s:10Foundation3URLV"},{"kind":"text","text":")"}],"role":"symbol","title":"AdError.invalidTargetURL(_:)","type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError\/invalidTargetURL(_:)","url":"\/documentation\/adsdkcore\/aderror\/invalidtargeturl(_:)"},"05-custom-handling-target-tap-urls.swift":{"fileName":"AdCell.swift","type":"file","syntax":"swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}],"content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    \/\/ ...","    init(","        id: Int,","        _ service: AdService,","        _ request: AdRequest,","        _ targetURLHandler: TargetTapURLHandler","    ) async {","        self.id = id","        self.service = service","","        do {","            let advertisement = try await getAdvertisement(request)","","            self.advertisement = advertisement","","            let ratio = advertisement.metadata?.aspectRatio ?? 2","","            state = .loaded(advertisement, aspectRatio: ratio)","","        } catch {","            state = .error(error.localizedDescription)","        }","    }","}","\/\/ ..."],"fileType":"swift","identifier":"05-custom-handling-target-tap-urls.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tracking-events":{"kind":"section","title":"Monitor and process advertising tracking events","role":"pseudoSymbol","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tracking-events","type":"section","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitor-and-process-advertising-tracking-events","abstract":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" and how we can interact with them."}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tap-events":{"title":"Monitor and process advertising tap events","kind":"section","type":"section","abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" and how we can interact with them."}],"role":"pseudoSymbol","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitor-and-process-advertising-tap-events","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tap-events"},"02-custom-handling-target-tap-urls.swift":{"syntax":"swift","identifier":"02-custom-handling-target-tap-urls.swift","fileType":"swift","content":["import UIKit","import AdSDKCore","","struct TargetURL: Identifiable {","    let id: String","    let url: URL","","    init(url: URL) {","        self.id = url.absoluteString","        self.url = url","    }","}"],"highlights":[],"fileName":"TargetTapURLHandler.swift","type":"file"},"doc://com.adsdk.core/tutorials/AdSDKCore/AdSDK-Cache-Management#Limiting-the-cache-size":{"abstract":[{"type":"text","text":"The SDK supports a persistent cache with resources related to ad, these can be banners or other resources, depending on the type of ad. In this tutorial, we’ll look at how an application developer can control the cache."}],"role":"pseudoSymbol","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Limiting-the-cache-size","kind":"section","type":"section","url":"\/tutorials\/adsdkcore\/adsdk-cache-management#Limiting-the-cache-size","title":"Limiting the cache size"},"03-custom-handling-target-tap-urls-screenshot.png":{"type":"image","identifier":"03-custom-handling-target-tap-urls-screenshot.png","alt":"A phone screen showing the internal browser with the VirtualMinds website open.","variants":[{"traits":["1x","light"],"url":"\/images\/com.adsdk.core\/03-custom-handling-target-tap-urls-screenshot.png"}]},"doc://com.adsdk.core/tutorials/Meet-AdSDK/Working-with-the-built-in-capabilities-of-the-SDK":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK","url":"\/tutorials\/meet-adsdk\/working-with-the-built-in-capabilities-of-the-sdk","role":"article","kind":"article","title":"Working with the built-in capabilities of the SDK","type":"topic","abstract":[]},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Event-management":{"url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Event-management","kind":"section","role":"pseudoSymbol","title":"Event management","abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Event-management","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising":{"estimatedTime":"1hr 30min","type":"topic","role":"project","url":"\/tutorials\/adsdkcore\/creating-customised-advertising","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"kind":"project","title":"Creating customised advertising"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Creating-inline-advertisements":{"url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Creating-inline-advertisements","kind":"section","role":"pseudoSymbol","title":"Creating inline advertisements","abstract":[{"type":"text","text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-inline-advertisements","type":"section"},"04-custom-handling-target-tap-urls.swift":{"syntax":"swift","fileType":"swift","highlights":[],"fileName":"AdCell.swift","identifier":"04-custom-handling-target-tap-urls.swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    \/\/ ...","    init(id: Int, _ service: AdService, _ request: AdRequest) async {","        self.id = id","        self.service = service","","        do {","            let advertisement = try await getAdvertisement(request)","","            self.advertisement = advertisement","","            let ratio = advertisement.metadata?.aspectRatio ?? 2","","            state = .loaded(advertisement, aspectRatio: ratio)","","        } catch {","            state = .error(error.localizedDescription)","        }","    }","}","\/\/ ..."],"type":"file"},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking","type":"topic","kind":"project","url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking","abstract":[{"type":"text","text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality."}],"title":"User tagging and conversion tracking","role":"project","estimatedTime":"30min"},"doc://com.adsdk.core/documentation/AdSDKCore/AdService/makeAdvertisement(request:placementType:targetURLHandler:eventDelegate:)":{"title":"makeAdvertisement(request:placementType:targetURLHandler:eventDelegate:)","url":"\/documentation\/adsdkcore\/adservice\/makeadvertisement(request:placementtype:targeturlhandler:eventdelegate:)","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService\/makeAdvertisement(request:placementType:targetURLHandler:eventDelegate:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeAdvertisement","kind":"identifier"},{"text":"(","kind":"text"},{"text":"request","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore0A7RequestV","text":"AdRequest","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"placementType","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore0A13PlacementTypeO","text":"AdPlacementType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"targetURLHandler","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore16TargetURLHandlerP","text":"TargetURLHandler","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"eventDelegate","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore0A13EventDelegateP","text":"AdEventDelegate","kind":"typeIdentifier"},{"text":"?) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore0A5ErrorO","text":"AdError","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore13AdvertisementP","text":"Advertisement","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Creating an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" object and performing ad request."}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK":{"abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK","type":"section","title":"Registering a renderer in the SDK","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Registering-a-renderer-in-the-SDK","role":"pseudoSymbol","kind":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Creating-a-presentation-layer":{"kind":"section","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"type":"section","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Creating-a-presentation-layer","role":"pseudoSymbol","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-presentation-layer","title":"Creating a presentation layer"},"09-custom-handling-target-tap-urls.swift":{"type":"file","syntax":"swift","fileType":"swift","identifier":"09-custom-handling-target-tap-urls.swift","fileName":"TargetTapURLHandler.swift","highlights":[],"content":["\/\/ ...","struct TargetTapURLHandler {","    var onReceive: @MainActor (TargetURL) -> Void","}","\/\/ ..."]},"doc://com.adsdk.core/tutorials/AdSDKCore/First-Steps-For-Working-With-AdSDK":{"role":"project","kind":"project","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK","abstract":[{"type":"text","text":"This tutorial will guide you the first steps for working with the "},{"code":"AdSDK","type":"codeVoice"},{"type":"text","text":" - creating an "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService","type":"reference"},{"type":"text","text":"."}],"type":"topic","title":"First steps for working with AdSDK","estimatedTime":"15min","url":"\/tutorials\/adsdkcore\/first-steps-for-working-with-adsdk"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad#Presenting-interstitial-ad":{"type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Presenting-interstitial-ad","title":"Presenting interstitial ad","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Presenting-interstitial-ad","abstract":[{"text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application.","type":"text"}],"role":"pseudoSymbol","kind":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking#Preparing-the-app":{"url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking#Preparing-the-app","type":"section","role":"pseudoSymbol","abstract":[{"text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality.","type":"text"}],"kind":"section","title":"Preparing the app","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Preparing-the-app"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Creating-a-business-layer":{"abstract":[{"text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"type":"section","title":"Creating a business layer","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Creating-a-business-layer","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-business-layer","kind":"section","role":"pseudoSymbol"},"07-custom-handling-target-tap-urls.swift":{"fileName":"InlineList.swift","type":"file","fileType":"swift","syntax":"swift","content":["\/\/ MARK: - View","struct InlineList: View {","    @State var viewModel: InlineListViewModel","","    var body: some View {","        ScrollView {","            \/\/ ...","        }","        .adsContainer()","        .navigationTitle(\"Inline Ads List\")","        .task {\/* ... *\/}","        .sheet(item: $viewModel.presentedTargetURL) {","            Browser(targetURL: $0.url)","        }","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class InlineListViewModel {","    var dataSource = [AdCellViewModel]()","    var presentedTargetURL: TargetURL?","","    private let service: AdService","","    init(_ service: AdService) {\/* ... *\/}","}","","extension InlineListViewModel {","    func fetchAds() async {","        \/\/ ...","        dataSource = await getDataSource(service, requests)","    }","","    private nonisolated func getDataSource(","        _ service: AdService,","        _ requests: [AdRequest]","    ) async -> [AdCellViewModel] {","        await withTaskGroup(","            of: AdCellViewModel.self,","            returning: [AdCellViewModel].self","        ) { group in","            for i in Int.zero..<requests.count {","                let request = requests[i]","                group.addTask {","                    await .init(id: i, service, request)","                }","            }","","            \/\/ ...","        }","    }","}"],"highlights":[{"line":12},{"line":13},{"line":14},{"line":23}],"identifier":"07-custom-handling-target-tap-urls.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad":{"abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}],"role":"project","title":"Create and display interstitial ad","kind":"project","type":"topic","estimatedTime":"25min","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad"},"doc://com.adsdk.core/documentation/AdSDKCore/TagRequest":{"abstract":[{"type":"text","text":"Describes a request to “tag” a user."}],"role":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TagRequest","kind":"identifier"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"TagRequest","kind":"identifier"}],"url":"\/documentation\/adsdkcore\/tagrequest","title":"TagRequest"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-Parameters-For-All-Request-Types#Modifying-global-parameters":{"type":"section","abstract":[{"text":"We already know how to create and perform ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest","isActive":true,"type":"reference"},{"text":", and ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest","isActive":true,"type":"reference"},{"text":". However, each of them can have additional parameters, which are called global parameters because they are specified globally for all requests. The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each request.","type":"text"}],"role":"pseudoSymbol","title":"Modifying global parameters","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Modifying-global-parameters","url":"\/tutorials\/adsdkcore\/global-parameters-for-all-request-types#Modifying-global-parameters","kind":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-Parameters-For-All-Request-Types":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types","title":"Global parameters for all request types","role":"project","type":"topic","kind":"project","url":"\/tutorials\/adsdkcore\/global-parameters-for-all-request-types","abstract":[{"type":"text","text":"We already know how to create and perform "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest"},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest"},{"type":"text","text":", and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest"},{"type":"text","text":". However, each of them can have additional parameters, which are called global parameters because they are specified globally for all requests. The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each request."}],"estimatedTime":"20min"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement":{"navigatorTitle":[{"text":"Advertisement","kind":"identifier"}],"kind":"symbol","title":"Advertisement","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Advertisement","kind":"identifier"}],"url":"\/documentation\/adsdkcore\/advertisement","role":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"topic","abstract":[{"text":"A key object interface describing the advertisement.","type":"text"}]},"06-custom-handling-target-tap-urls.swift":{"syntax":"swift","identifier":"06-custom-handling-target-tap-urls.swift","content":["\/\/ MARK: - View","struct InlineList: View {","    @State var viewModel: InlineListViewModel","","    var body: some View {","        ScrollView {","            \/\/ ...","        }","        .adsContainer()","        .navigationTitle(\"Inline Ads List\")","        .task {\/* ... *\/}","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class InlineListViewModel {","    var dataSource = [AdCellViewModel]()","","    private let service: AdService","","    init(_ service: AdService) {\/* ... *\/}","}","","extension InlineListViewModel {","    func fetchAds() async {","        \/\/ ...","        dataSource = await getDataSource(service, requests)","    }","","    private nonisolated func getDataSource(","        _ service: AdService,","        _ requests: [AdRequest]","    ) async -> [AdCellViewModel] {","        await withTaskGroup(","            of: AdCellViewModel.self,","            returning: [AdCellViewModel].self","        ) { group in","            for i in Int.zero..<requests.count {","                let request = requests[i]","                group.addTask {","                    await .init(id: i, service, request)","                }","            }","","            \/\/ ...","        }","    }","}"],"type":"file","highlights":[],"fileType":"swift","fileName":"InlineList.swift"},"01-custom-handling-target-tap-urls-screenshot.png":{"type":"image","identifier":"01-custom-handling-target-tap-urls-screenshot.png","alt":"Xcode window showing the correct project structure with Screens\/Browser.swift.","variants":[{"traits":["1x","light"],"url":"\/images\/com.adsdk.core\/01-custom-handling-target-tap-urls-screenshot.png"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-Parameters-For-All-Request-Types#Preparing-the-app":{"type":"section","abstract":[{"text":"We already know how to create and perform ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest","type":"reference"},{"text":", and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest","type":"reference"},{"text":". However, each of them can have additional parameters, which are called global parameters because they are specified globally for all requests. The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each request.","type":"text"}],"role":"pseudoSymbol","title":"Preparing the app","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Preparing-the-app","url":"\/tutorials\/adsdkcore\/global-parameters-for-all-request-types#Preparing-the-app","kind":"section"},"doc://com.adsdk.core/tutorials/Meet-AdSDK":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","type":"topic","kind":"overview","url":"\/tutorials\/meet-adsdk","abstract":[{"type":"text","text":"Manage, display, and create your custom advertisements on iOS using cutting-edge technologies such as Structured Concurrency, and SwiftUI."}],"title":"Meet nextgen AdSDK","role":"overview"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad#Creating-interstitial-advertisements":{"abstract":[{"text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application.","type":"text"}],"kind":"section","title":"Creating interstitial advertisements","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Creating-interstitial-advertisements","role":"pseudoSymbol","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Creating-interstitial-advertisements","type":"section"},"01-custom-handling-target-tap-urls.swift":{"content":["import SwiftUI","import SafariServices","","struct Browser: UIViewControllerRepresentable {","    let targetURL: URL","","    func makeUIViewController(context: Context) -> SFSafariViewController {","        SFSafariViewController(url: targetURL)","    }","","    func updateUIViewController(","        _ uiViewController: SFSafariViewController,","        context: Context","    ) {}","}"],"syntax":"swift","type":"file","identifier":"01-custom-handling-target-tap-urls.swift","highlights":[],"fileName":"Browser.swift","fileType":"swift"},"03-custom-handling-target-tap-urls.swift":{"fileName":"TargetTapURLHandler.swift","highlights":[{"line":4},{"line":5},{"line":6},{"line":7}],"syntax":"swift","type":"file","identifier":"03-custom-handling-target-tap-urls.swift","content":["import UIKit","import AdSDKCore","","struct TargetTapURLHandler {","    var onReceive: @MainActor (TargetURL) -> Void","}","","struct TargetURL: Identifiable {","    let id: String","    let url: URL","","    init(url: URL) {","        self.id = url.absoluteString","        self.url = url","    }","}"],"fileType":"swift"},"13-custom-handling-target-tap-urls.swift":{"syntax":"swift","identifier":"13-custom-handling-target-tap-urls.swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    \/\/ ...","    init(","        id: Int,","        _ service: AdService,","        _ request: AdRequest,","        _ targetURLHandler: TargetTapURLHandler","    ) async {","        self.id = id","        self.service = service","","        do {","            let advertisement = try await getAdvertisement(request)","","            self.advertisement = advertisement","","            let ratio = advertisement.metadata?.aspectRatio ?? 2","","            state = .loaded(advertisement, aspectRatio: ratio)","","        } catch {","            state = .error(error.localizedDescription)","        }","    }","}","","private extension AdCellViewModel {","    func getAdvertisement(","        _ request: AdRequest","    ) async throws(AdError) -> Advertisement {","        try await service.makeAdvertisement(","            request: request,","            placementType: .inline, \/\/ .inline by default","            targetURLHandler: nil, \/\/ Can be skipped","            eventDelegate: self","        )","    }","    \/\/ ...","}","\/\/ ..."],"type":"file","highlights":[],"fileType":"swift","fileName":"AdCell.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitoring-of-ad-related-events":{"type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitoring-of-ad-related-events","role":"pseudoSymbol","title":"Monitoring of ad-related events","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitoring-of-ad-related-events","abstract":[{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"text":" and how we can interact with them.","type":"text"}],"kind":"section"}},"variantOverrides":[{"traits":[{"interfaceLanguage":"occ"}],"patch":[{"path":"\/identifier\/interfaceLanguage","op":"replace","value":"occ"}]}]}