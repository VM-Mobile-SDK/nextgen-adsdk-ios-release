{"hierarchy":{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","modules":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK","projects":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK#AdService-creation"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-inline-advertisements","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Defining-the-size-of-the-inline-ad","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-and-displaying-a-list-of-advertisements","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Tracking-ad-visibility","kind":"task"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Creating-interstitial-advertisements","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Presenting-interstitial-ad","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Hiding-interstitial-ad","kind":"task"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitoring-of-ad-related-events","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Request-to-unload-or-hide-ad","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tracking-events","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tap-events","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-custom-advertising-events","kind":"task"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Preparing-the-app","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#User-tagging","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Conversion-tracking","kind":"task"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Preparing-the-app","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Modifying-global-parameters","kind":"task"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Limiting-the-cache-size","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Flushing-the-cache","kind":"task"}]}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements","projects":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Preparing-the-app","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Creating-a-target-URL-handler","kind":"task"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-business-layer"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Event-management"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-presentation-layer"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Advanced-management-of-advertising-resources"}]}]}],"paths":[["doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/$volume","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK"],["doc:\/\/com.adsdk.core\/documentation\/AdSDKCore"]]},"sections":[{"estimatedTimeInMinutes":60,"content":[{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference"},{"text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference"},{"text":" and how we can interact with them.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"We will continue to build the app, so be sure to follow all the previous tutorials. You can download "},{"type":"reference","identifier":"https:\/\/github.com\/VM-Mobile-SDK\/nextgen-adsdk-ios-tutorial\/tree\/built-in-capabilities\/monitor-process-ad-events","isActive":true},{"type":"text","text":" which has already implemented all steps from this tutorial."}],"type":"paragraph"}],"title":"Monitor and process ad-related events","kind":"hero","chapter":"Working with the built-in capabilities of the SDK"},{"tasks":[{"anchor":"Monitoring-of-ad-related-events","stepsSection":[{"code":"01-monitor-process-ad-events.swift","runtimePreview":null,"media":null,"caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Let’s open our "},{"type":"codeVoice","code":"AdCell.swift"},{"type":"text","text":"."}],"type":"paragraph"}]},{"code":"02-monitor-process-ad-events.swift","runtimePreview":null,"media":null,"caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"To monitor and interact with any ad event, we should implement "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate","isActive":true},{"type":"text","text":" and pass it when creating an "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true},{"type":"text","text":". Now we’re ready to get started with various advertising-related events!"}],"type":"paragraph"}]}],"title":"Monitoring of ad-related events","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"In this section, we’ll look at how you can know when and what kind of event happened.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}]},{"anchor":"Request-to-unload-or-hide-ad","stepsSection":[{"type":"step","caption":[],"media":null,"code":"03-monitor-process-ad-events.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Let’s continue with "},{"type":"codeVoice","code":"AdCell.swift"},{"type":"text","text":"."}],"type":"paragraph"}]},{"type":"step","caption":[{"content":[{"inlineContent":[{"type":"text","text":"If you know that you do not have inline ads that can be hidden or removed, you can ignore this method for inline ads."}],"type":"paragraph"}],"type":"aside","style":"note","name":"Note"}],"media":null,"code":"04-monitor-process-ad-events.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"To monitor the moment when an ad wants to be removed or hidden, you can implement ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate\/unloadRequest()","isActive":true},{"text":". You may already remember its use with interstitial ads, where it is an essential part of the implementation. In the case of inline ads, this method can also be used in customised HTML or customised ads.","type":"text"}],"type":"paragraph"}]},{"type":"step","caption":[],"media":null,"code":"05-monitor-process-ad-events.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Let’s implement this method so that it displays the message to the user and removes the ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]}],"title":"Request to unload or hide ad","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"In this section, we’ll look at how an "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference"},{"type":"text","text":" can request an app to unload or hide the ad."}],"type":"paragraph"}]}]},{"anchor":"Monitor-and-process-advertising-tracking-events","stepsSection":[{"code":"06-monitor-process-ad-events.swift","runtimePreview":null,"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"You may remember how we added the ","type":"text"},{"code":".adsContainer()","type":"codeVoice"},{"text":" modifier to the ","type":"text"},{"code":"InlineList","type":"codeVoice"},{"text":". ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingEvent"},{"text":" has an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingEvent\/viewable(percentage:)"},{"text":" in it, which is why we added this modifier. Without it, this tracking will not work.","type":"text"}]}],"caption":[]},{"code":"07-monitor-process-ad-events.swift","runtimePreview":null,"media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Let’s continue with "},{"code":"AdCell.swift","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[]},{"code":"08-monitor-process-ad-events.swift","runtimePreview":null,"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"You can use two methods to monitor tracking events - ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate\/trackingEventProcessed(_:processedURLs:metadata:)","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate\/trackingEventProcessingFailed(_:processedURLs:failedURLs:)","isActive":true,"type":"reference"},{"text":".","type":"text"}]}],"caption":[]},{"code":"09-monitor-process-ad-events.swift","runtimePreview":null,"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Let’s start with the first one, it signals a successful tracking on the server. As you can see, one tracking event can have multiple URLs to track on the server, so you have the ","type":"text"},{"type":"codeVoice","code":"processedURLs"},{"text":" parameter, which contains a list of all the URLs that were requested.","type":"text"}]}],"caption":[]},{"code":"10-monitor-process-ad-events.swift","runtimePreview":null,"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"The second method is called in case of an error. In this case, since the event can have several URLs, you get a list of those URLs that were successfully requested and those that failed.","type":"text"}]}],"caption":[]},{"code":"11-monitor-process-ad-events.swift","runtimePreview":null,"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition, you must specify how you want to handle this error with "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventFailureAction","isActive":true},{"type":"text","text":". You can either "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventFailureAction\/ignore","isActive":true},{"type":"text","text":" the error, in which case the server will not know about this event, or try to "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventFailureAction\/retry","isActive":true},{"type":"text","text":" the requests to the URLs that failed."}]}],"caption":[]}],"title":"Monitor and process advertising tracking events","contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" can perform tracking, depending on the response from the server. The SDK uses "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingEvent"},{"type":"text","text":" to identify them. Most often, you’ll use these methods for debugging or handling errors related to tracking. In this section, we’ll look how we can work with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingEvent"},{"type":"text","text":"."}]}],"kind":"contentAndMedia"}]},{"anchor":"Monitor-and-process-advertising-tap-events","stepsSection":[{"caption":[],"media":null,"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Let’s continue with ","type":"text"},{"code":"AdCell.swift","type":"codeVoice"},{"text":".","type":"text"}]}],"code":"12-monitor-process-ad-events.swift"},{"caption":[],"media":null,"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Same with tracking events, you can use two methods to monitor tap events - "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate\/tapEventProcessed(_:processedURL:metadata:)"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate\/tapEventProcessingFailed(_:_:)"},{"type":"text","text":"."}]}],"code":"13-monitor-process-ad-events.swift"},{"caption":[{"type":"paragraph","inlineContent":[{"text":"Read the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapEvent\/silentTap(_:)","isActive":true},{"text":" documentation to better understand when to use this event.","type":"text"}]}],"media":null,"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s start with the first one, it signals a successful tap processing. As you can see, all "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapEvent","isActive":true},{"type":"text","text":" except "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapEvent\/silentTap(_:)","isActive":true},{"type":"text","text":" should eventually show something to the user. In the case of "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapEvent\/silentTap(_:)","isActive":true},{"type":"text","text":", the SDK only handles the tracking associated with the tap."}]}],"code":"14-monitor-process-ad-events.swift"},{"caption":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Most often, the error is related to an incorrect URL received in the advertisement, but in the case of ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapEvent\/silentTap(_:)"},{"text":", it can be errors related to redirect processing.","type":"text"}]}],"type":"aside","style":"note","name":"Note"}],"media":null,"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The second method is called in case of an error. In this case, we get the "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapEvent","isActive":true},{"type":"text","text":" that caused the "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError","isActive":true},{"type":"text","text":". Just like with "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingEvent","isActive":true},{"type":"text","text":", you can decide how you will handle this error with "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventFailureAction","isActive":true},{"type":"text","text":"."}]}],"code":"15-monitor-process-ad-events.swift"}],"title":"Monitor and process advertising tap events","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"text":"As a rule, tapping on an ad will trigger a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapEvent","type":"reference"},{"text":" in the SDK. This can be either a simple opening of the URL to the user in an external browser or more complex logic with redirect processing. Most often, you’ll use these methods for debugging or handling tap-related errors. In this section, we’ll look how we can work with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapEvent","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Monitor-and-process-custom-advertising-events","stepsSection":[{"code":"16-monitor-process-ad-events.swift","type":"step","content":[{"inlineContent":[{"type":"text","text":"Let’s continue with "},{"type":"codeVoice","code":"AdCell.swift"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[],"runtimePreview":null,"media":null},{"code":"17-monitor-process-ad-events.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s start with the simplest event, when the "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRenderer","isActive":true},{"type":"text","text":" wants to notify the application of an event with a name and an optional message – "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate\/rendererMessageReceived(name:message:)","isActive":true},{"type":"text","text":"."}]}],"caption":[],"runtimePreview":null,"media":null},{"code":"18-monitor-process-ad-events.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The renderer can send any message that you can process. In our case, we just want to print this event."}]}],"caption":[],"runtimePreview":null,"media":null},{"code":"19-monitor-process-ad-events.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"In addition, the custom ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRenderer"},{"text":" can perform custom tracking. To monitor such events, you can use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate\/customTrackingEventProcessed(name:url:metadata:)"},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate\/customTrackingEventProcessingFailed(name:url:_:)"},{"text":".","type":"text"}]}],"caption":[],"runtimePreview":null,"media":null},{"code":"20-monitor-process-ad-events.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The logic is similar to tracking or tap events monitoring and handling. You can get the name of the event, the URL where the request was made, a possible error, and decide how to handle it."}]}],"caption":[],"runtimePreview":null,"media":null}],"title":"Monitor and process custom advertising events","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"The AdSDK offers extensive customisation functionality, such as creating customised ads and sending customised events. In this section, we will consider only those events that can occur when using a custom renderer or custom HTML advertising."}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}]}],"kind":"tasks"},{"abstract":[{"text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality.","type":"text"}],"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking","overridingTitle":"Get started","type":"reference"},"title":"User tagging and conversion tracking","kind":"callToAction","featuredEyebrow":"Tutorial"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events"]},{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events"]}],"metadata":{"category":"Meet AdSDK","role":"project","categoryPathComponent":"Meet-AdSDK","title":"Monitor and process ad-related events"},"kind":"project","schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events"},"references":{"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Tracking-ad-visibility":{"url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Tracking-ad-visibility","type":"section","abstract":[{"type":"text","text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy."}],"role":"pseudoSymbol","kind":"section","title":"Tracking ad visibility","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Tracking-ad-visibility"},"doc://com.adsdk.core/documentation/AdSDKCore/AdEventDelegate/unloadRequest()":{"defaultImplementations":1,"title":"unloadRequest()","kind":"symbol","type":"topic","url":"\/documentation\/adsdkcore\/adeventdelegate\/unloadrequest()","required":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate\/unloadRequest()","abstract":[{"text":"A method of notifying the app that an ad wants to be closed.","type":"text"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unloadRequest","kind":"identifier"},{"text":"()","kind":"text"}]},"doc://com.adsdk.core/tutorials/Meet-AdSDK":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","type":"topic","kind":"overview","url":"\/tutorials\/meet-adsdk","abstract":[{"type":"text","text":"Manage, display, and create your custom advertisements on iOS using cutting-edge technologies such as Structured Concurrency, and SwiftUI."}],"title":"Meet nextgen AdSDK","role":"overview"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitoring-of-ad-related-events":{"type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitoring-of-ad-related-events","role":"pseudoSymbol","title":"Monitoring of ad-related events","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitoring-of-ad-related-events","abstract":[{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"text":" and how we can interact with them.","type":"text"}],"kind":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Creating-a-business-layer":{"abstract":[{"text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"type":"section","title":"Creating a business layer","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Creating-a-business-layer","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-business-layer","kind":"section","role":"pseudoSymbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking#Conversion-tracking":{"abstract":[{"text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Conversion-tracking","type":"section","title":"Conversion tracking","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking#Conversion-tracking"},"doc://com.adsdk.core/tutorials/AdSDKCore/Custom-Handling-Of-Target-Tap-URLs#Creating-a-target-URL-handler":{"kind":"section","type":"section","title":"Creating a target URL handler","url":"\/tutorials\/adsdkcore\/custom-handling-of-target-tap-urls#Creating-a-target-URL-handler","abstract":[{"text":"Sometimes you need to handle taps in your own way. For example, to display ads in the internal browser in the app. In this tutorial, we will learn how to customise the SDK’s tap handling behaviour.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Creating-a-target-URL-handler"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Defining-the-size-of-the-inline-ad":{"type":"section","abstract":[{"type":"text","text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy."}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Defining-the-size-of-the-inline-ad","title":"Defining the size of the inline ad","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Defining-the-size-of-the-inline-ad"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tracking-events":{"kind":"section","title":"Monitor and process advertising tracking events","role":"pseudoSymbol","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tracking-events","type":"section","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitor-and-process-advertising-tracking-events","abstract":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" and how we can interact with them."}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events","role":"project","estimatedTime":"1hr 0min","kind":"project","abstract":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" and how we can interact with them."}],"type":"topic","title":"Monitor and process ad-related events","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events"},"doc://com.adsdk.core/documentation/AdSDKCore/AdEventDelegate/customTrackingEventProcessingFailed(name:url:_:)":{"kind":"symbol","required":true,"role":"symbol","title":"customTrackingEventProcessingFailed(name:url:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"customTrackingEventProcessingFailed","kind":"identifier"},{"text":"(","kind":"text"},{"text":"name","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"url","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"URL","preciseIdentifier":"s:10Foundation3URLV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"AdError","preciseIdentifier":"s:9AdSDKCore0A5ErrorO","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"AdEventFailureAction","preciseIdentifier":"s:9AdSDKCore0A18EventFailureActionO","kind":"typeIdentifier"}],"defaultImplementations":1,"type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate\/customTrackingEventProcessingFailed(name:url:_:)","url":"\/documentation\/adsdkcore\/adeventdelegate\/customtrackingeventprocessingfailed(name:url:_:)","abstract":[{"type":"text","text":"A method for notifying about failure renderer custom tracking event processing."}]},"doc://com.adsdk.core/documentation/AdSDKCore/AdEventDelegate/rendererMessageReceived(name:message:)":{"kind":"symbol","required":true,"title":"rendererMessageReceived(name:message:)","defaultImplementations":1,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"rendererMessageReceived","kind":"identifier"},{"text":"(","kind":"text"},{"text":"name","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"text":"message","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":"?)","kind":"text"}],"url":"\/documentation\/adsdkcore\/adeventdelegate\/renderermessagereceived(name:message:)","abstract":[{"text":"A method for sending a message from a renderer to an application.","type":"text"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate\/rendererMessageReceived(name:message:)"},"09-monitor-process-ad-events.swift":{"type":"file","fileName":"AdCell.swift","content":["\/\/ ...","extension AdCellViewModel: AdEventDelegate {","    func trackingEventProcessed(","        _ event: TrackingEvent,","        processedURLs: [URL],","        metadata: AdMetadata","    ) {","        switch event {","        case .impression:","            print(\"My ad is ready\")","        case .viewable(let percentage):","            print(\"\\(percentage)% of my ads are now visible on the screen.\")","        @unknown default: print(\"Unexpected event\")","        }","","        print(\"SDK notified server about that via URLs: \\(processedURLs)\")","    }","","    func trackingEventProcessingFailed(","        _ event: TrackingEvent,","        processedURLs: [URL],","        failedURLs: [URL : AdError]","    ) async -> AdEventFailureAction {","","    }","}","\/\/ ..."],"identifier":"09-monitor-process-ad-events.swift","fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":16}],"syntax":"swift"},"12-monitor-process-ad-events.swift":{"fileType":"swift","identifier":"12-monitor-process-ad-events.swift","type":"file","fileName":"AdCell.swift","content":["\/\/ ...","extension AdCellViewModel: AdEventDelegate {","    \/\/ ...","}","\/\/ ..."],"syntax":"swift","highlights":[]},"13-monitor-process-ad-events.swift":{"identifier":"13-monitor-process-ad-events.swift","syntax":"swift","fileType":"swift","highlights":[{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}],"content":["\/\/ ...","extension AdCellViewModel: AdEventDelegate {","    \/\/ ...","    func tapEventProcessed(","        _ event: TapEvent,","        processedURL: URL,","        metadata: AdMetadata","    ) {","","    }","","    func tapEventProcessingFailed(","        _ event: TapEvent,","        _ error: AdError","    ) async -> AdEventFailureAction {","","    }","}","\/\/ ..."],"type":"file","fileName":"AdCell.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Request-to-unload-or-hide-ad":{"role":"pseudoSymbol","abstract":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":" and how we can interact with them.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Request-to-unload-or-hide-ad","type":"section","title":"Request to unload or hide ad","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Request-to-unload-or-hide-ad","kind":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad#Creating-interstitial-advertisements":{"abstract":[{"text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application.","type":"text"}],"kind":"section","title":"Creating interstitial advertisements","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Creating-interstitial-advertisements","role":"pseudoSymbol","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Creating-interstitial-advertisements","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad#Hiding-interstitial-ad":{"type":"section","abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Hiding-interstitial-ad","title":"Hiding interstitial ad","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Hiding-interstitial-ad"},"doc://com.adsdk.core/documentation/AdSDKCore/TrackingEvent":{"navigatorTitle":[{"text":"TrackingEvent","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingEvent","kind":"symbol","url":"\/documentation\/adsdkcore\/trackingevent","title":"TrackingEvent","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TrackingEvent","kind":"identifier"}],"type":"topic","abstract":[{"text":"An enum with all tracking events types that SDK can process.","type":"text"}]},"doc://com.adsdk.core/documentation/AdSDKCore/AdEventFailureAction":{"navigatorTitle":[{"text":"AdEventFailureAction","kind":"identifier"}],"type":"topic","title":"AdEventFailureAction","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventFailureAction","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AdEventFailureAction","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/adsdkcore\/adeventfailureaction","abstract":[{"type":"text","text":"An enum for handling failed events associated with "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true},{"type":"text","text":"."}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads":{"title":"Create and display inline ads","kind":"project","abstract":[{"text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads","role":"project","estimatedTime":"45min","type":"topic","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads"},"doc://com.adsdk.core/documentation/AdSDKCore/AdEventDelegate/trackingEventProcessed(_:processedURLs:metadata:)":{"type":"topic","title":"trackingEventProcessed(_:processedURLs:metadata:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"trackingEventProcessed"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore13TrackingEventO","text":"TrackingEvent"},{"kind":"text","text":", "},{"kind":"externalParam","text":"processedURLs"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV","text":"URL"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"metadata"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A8MetadataC","text":"AdMetadata"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"A method for notifying about successful "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingEvent","type":"reference","isActive":true},{"type":"text","text":" processing."}],"url":"\/documentation\/adsdkcore\/adeventdelegate\/trackingeventprocessed(_:processedurls:metadata:)","kind":"symbol","required":true,"defaultImplementations":1,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate\/trackingEventProcessed(_:processedURLs:metadata:)","role":"symbol"},"doc://com.adsdk.core/documentation/AdSDKCore/AdEventDelegate/tapEventProcessingFailed(_:_:)":{"url":"\/documentation\/adsdkcore\/adeventdelegate\/tapeventprocessingfailed(_:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"tapEventProcessingFailed","kind":"identifier"},{"text":"(","kind":"text"},{"text":"TapEvent","preciseIdentifier":"s:9AdSDKCore8TapEventO","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"AdError","preciseIdentifier":"s:9AdSDKCore0A5ErrorO","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"AdEventFailureAction","preciseIdentifier":"s:9AdSDKCore0A18EventFailureActionO","kind":"typeIdentifier"}],"required":true,"abstract":[{"type":"text","text":"A method for notifying about failure "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapEvent","isActive":true},{"type":"text","text":" processing."}],"kind":"symbol","defaultImplementations":1,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate\/tapEventProcessingFailed(_:_:)","title":"tapEventProcessingFailed(_:_:)","role":"symbol","type":"topic"},"doc://com.adsdk.core/documentation/AdSDKCore/AdEventDelegate/customTrackingEventProcessed(name:url:metadata:)":{"url":"\/documentation\/adsdkcore\/adeventdelegate\/customtrackingeventprocessed(name:url:metadata:)","kind":"symbol","required":true,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"customTrackingEventProcessed"},{"kind":"text","text":"("},{"kind":"externalParam","text":"name"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"url"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV","text":"URL"},{"kind":"text","text":", "},{"kind":"externalParam","text":"metadata"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A8MetadataC","text":"AdMetadata"},{"kind":"text","text":")"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate\/customTrackingEventProcessed(name:url:metadata:)","abstract":[{"type":"text","text":"A method for notifying about successful renderer custom tracking event processing."}],"type":"topic","title":"customTrackingEventProcessed(name:url:metadata:)","role":"symbol","defaultImplementations":1},"19-monitor-process-ad-events.swift":{"fileType":"swift","content":["\/\/ ...","extension AdCellViewModel: AdEventDelegate {","    \/\/ ...","    func rendererMessageReceived(name: String, message: String?) {","        print(\"Renderer sent event \\(name), message: \\(String(describing: message)).\")","        print(\"We can create custom logic in the application based on it.\")","    }","","    func customTrackingEventProcessed(name: String, url: URL, metadata: AdMetadata) {","","    }","","    func customTrackingEventProcessingFailed(","        name: String,","        url: URL,","        _ error: AdError","    ) async -> AdEventFailureAction {","","    }","}","\/\/ ..."],"identifier":"19-monitor-process-ad-events.swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19}],"syntax":"swift","type":"file","fileName":"AdCell.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Creating-a-presentation-layer":{"kind":"section","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"type":"section","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Creating-a-presentation-layer","role":"pseudoSymbol","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-presentation-layer","title":"Creating a presentation layer"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK":{"abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK","type":"section","title":"Registering a renderer in the SDK","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Registering-a-renderer-in-the-SDK","role":"pseudoSymbol","kind":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/AdSDK-Cache-Management":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management","title":"AdSDK Cache Management","role":"project","estimatedTime":"10min","type":"topic","kind":"project","abstract":[{"type":"text","text":"The SDK supports a persistent cache with resources related to ad, these can be banners or other resources, depending on the type of ad. In this tutorial, we’ll look at how an application developer can control the cache."}],"url":"\/tutorials\/adsdkcore\/adsdk-cache-management"},"18-monitor-process-ad-events.swift":{"highlights":[{"line":5},{"line":6}],"syntax":"swift","content":["\/\/ ...","extension AdCellViewModel: AdEventDelegate {","    \/\/ ...","    func rendererMessageReceived(name: String, message: String?) {","        print(\"Renderer sent event \\(name), message: \\(String(describing: message)).\")","        print(\"We can create custom logic in the application based on it.\")","    }","}","\/\/ ..."],"type":"file","fileName":"AdCell.swift","fileType":"swift","identifier":"18-monitor-process-ad-events.swift"},"doc://com.adsdk.core/documentation/AdSDKCore/TapEvent/silentTap(_:)":{"abstract":[{"text":"Processes the redirect of the passed URL without processing the target URL.","type":"text"}],"url":"\/documentation\/adsdkcore\/tapevent\/silenttap(_:)","kind":"symbol","title":"TapEvent.silentTap(_:)","role":"symbol","type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapEvent\/silentTap(_:)","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"silentTap","kind":"identifier"},{"text":"(","kind":"text"},{"text":"URL","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV"},{"text":")","kind":"text"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-Parameters-For-All-Request-Types#Modifying-global-parameters":{"type":"section","abstract":[{"text":"We already know how to create and perform ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest","isActive":true,"type":"reference"},{"text":", and ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest","isActive":true,"type":"reference"},{"text":". However, each of them can have additional parameters, which are called global parameters because they are specified globally for all requests. The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each request.","type":"text"}],"role":"pseudoSymbol","title":"Modifying global parameters","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Modifying-global-parameters","url":"\/tutorials\/adsdkcore\/global-parameters-for-all-request-types#Modifying-global-parameters","kind":"section"},"05-monitor-process-ad-events.swift":{"highlights":[{"line":22},{"line":23},{"line":27}],"syntax":"swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id: Int","    var state: CellState = .loading","","    private var advertisement: Advertisement?","","    init(id: Int, _ service: AdService, _ request: AdRequest) async { \/* ... *\/ }","}","","private extension AdCellViewModel {","    func getAdvertisement(","        _ service: AdService,","        _ request: AdRequest","    ) async throws(AdError) -> Advertisement { \/* ... *\/ }","}","","extension AdCellViewModel: AdEventDelegate {","    func unloadRequest() {","        state = .error(\"Unloaded\")","        advertisement = nil","    }","}","\/\/ ...",""],"type":"file","fileName":"AdCell.swift","fileType":"swift","identifier":"05-monitor-process-ad-events.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-custom-advertising-events":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-custom-advertising-events","type":"section","kind":"section","title":"Monitor and process custom advertising events","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitor-and-process-custom-advertising-events","abstract":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" and how we can interact with them."}],"role":"pseudoSymbol"},"doc://com.adsdk.core/tutorials/Meet-AdSDK/Working-with-the-built-in-capabilities-of-the-SDK":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK","url":"\/tutorials\/meet-adsdk\/working-with-the-built-in-capabilities-of-the-sdk","role":"article","kind":"article","title":"Working with the built-in capabilities of the SDK","type":"topic","abstract":[]},"https://github.com/VM-Mobile-SDK/nextgen-adsdk-ios-tutorial/tree/built-in-capabilities/monitor-process-ad-events":{"titleInlineContent":[{"text":"this project","type":"text"}],"type":"link","identifier":"https:\/\/github.com\/VM-Mobile-SDK\/nextgen-adsdk-ios-tutorial\/tree\/built-in-capabilities\/monitor-process-ad-events","url":"https:\/\/github.com\/VM-Mobile-SDK\/nextgen-adsdk-ios-tutorial\/tree\/built-in-capabilities\/monitor-process-ad-events","title":"this project"},"doc://com.adsdk.core/documentation/AdSDKCore/AdRenderer":{"url":"\/documentation\/adsdkcore\/adrenderer","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AdRenderer","kind":"identifier"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"AdRenderer","kind":"identifier"}],"type":"topic","abstract":[{"text":"Custom renderer interface.","type":"text"}],"title":"AdRenderer","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRenderer"},"15-monitor-process-ad-events.swift":{"highlights":[{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":39},{"line":40},{"line":41},{"line":45}],"content":["\/\/ ...","extension AdCellViewModel: AdEventDelegate {","    \/\/ ...","    func tapEventProcessed(","        _ event: TapEvent,","        processedURL: URL,","        metadata: AdMetadata","    ) {","        switch event {","        case .tap, .tapURL:","            print(\"My ad was tapped.\")","            print(\"\\(processedURL) opened for the user.\")","        case .tapAsset(let id):","            print(\"My banner with \\(id) was tapped.\")","            print(\"\\(processedURL) opened for the user.\")","        case .silentTap(let url):","            print(\"My renderer want to process click counter \\(url) redirect.\")","            print(\"As a result of redirects we get \\(url).\")","            print(\"This URL is NOT opened for the user.\")","","        @unknown default: print(\"Unexpected event\")","        }","    }","","    func tapEventProcessingFailed(","        _ event: TapEvent,","        _ error: AdError","    ) async -> AdEventFailureAction {","        switch event {","        case .tap, .tapURL:","            print(\"My ad was tapped\")","        case .tapAsset(let id):","            print(\"My banner with \\(id) was tapped\")","        case .silentTap(let url):","            print(\"My renderer want to process click counter \\(url) redirect\")","        @unknown default: print(\"Unexpected event\")","        }","","        print(\"But failed during processing tap with error: \\(error.localizedDescription)\")","","        return .ignore","    }","}","\/\/ ...",""],"syntax":"swift","fileName":"AdCell.swift","fileType":"swift","type":"file","identifier":"15-monitor-process-ad-events.swift"},"02-monitor-process-ad-events.swift":{"content":["\/\/ ...","private extension AdCellViewModel {","    func getAdvertisement(","        _ service: AdService,","        _ request: AdRequest","    ) async throws(AdError) -> Advertisement {","        try await service.makeAdvertisement(","            request: request,","            placementType: .inline, \/\/ .inline by default","            targetURLHandler: nil, \/\/ Can be skipped","            eventDelegate: self","        )","    }","}","","extension AdCellViewModel: AdEventDelegate {","","}","\/\/ ..."],"highlights":[{"line":11},{"line":15},{"line":16},{"line":17},{"line":18}],"fileType":"swift","syntax":"swift","identifier":"02-monitor-process-ad-events.swift","type":"file","fileName":"AdCell.swift"},"11-monitor-process-ad-events.swift":{"syntax":"swift","content":["\/\/ ...","extension AdCellViewModel: AdEventDelegate {","    func trackingEventProcessed(","        _ event: TrackingEvent,","        processedURLs: [URL],","        metadata: AdMetadata","    ) {","        switch event {","        case .impression:","            print(\"My ad is ready\")","        case .viewable(let percentage):","            print(\"\\(percentage)% of my ads are now visible on the screen.\")","        @unknown default: print(\"Unexpected event\")","        }","","        print(\"SDK notified server about that via URLs: \\(processedURLs)\")","    }","","    func trackingEventProcessingFailed(","        _ event: TrackingEvent,","        processedURLs: [URL],","        failedURLs: [URL : AdError]","    ) async -> AdEventFailureAction {","        switch event {","        case .impression:","            print(\"My ad is ready\")","        case .viewable(let percentage):","            print(\"\\(percentage)% of my ads are now visible on the screen.\")","        @unknown default: print(\"Unexpected event\")","        }","","        print(\"SDK notified server about that via URLs: \\(processedURLs)\")","        print(\"But failed during requesting those: \\(failedURLs)\")","","        return .ignore","    }","}","\/\/ ..."],"fileName":"AdCell.swift","fileType":"swift","type":"file","identifier":"11-monitor-process-ad-events.swift","highlights":[{"line":34},{"line":35}]},"doc://com.adsdk.core/documentation/AdSDKCore/AdRequest":{"url":"\/documentation\/adsdkcore\/adrequest","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","abstract":[{"type":"text","text":"Describes a request to load an advertisement."}],"title":"AdRequest","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AdRequest"}],"navigatorTitle":[{"kind":"identifier","text":"AdRequest"}],"type":"topic"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Creating-and-displaying-a-list-of-advertisements":{"url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Creating-and-displaying-a-list-of-advertisements","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-and-displaying-a-list-of-advertisements","abstract":[{"type":"text","text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy."}],"type":"section","title":"Creating and displaying a list of advertisements","role":"pseudoSymbol","kind":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking#User-tagging":{"kind":"section","abstract":[{"type":"text","text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality."}],"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#User-tagging","title":"User tagging","url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking#User-tagging"},"07-monitor-process-ad-events.swift":{"fileType":"swift","identifier":"07-monitor-process-ad-events.swift","type":"file","fileName":"AdCell.swift","content":["\/\/ ...","extension AdCellViewModel: AdEventDelegate {","    \/\/ ...","}","\/\/ ..."],"syntax":"swift","highlights":[]},"doc://com.adsdk.core/documentation/AdSDKCore/AdEventFailureAction/retry":{"fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"retry","kind":"identifier"}],"abstract":[{"type":"text","text":"The SDK should process the event again."}],"kind":"symbol","type":"topic","url":"\/documentation\/adsdkcore\/adeventfailureaction\/retry","role":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventFailureAction\/retry","title":"AdEventFailureAction.retry"},"04-monitor-process-ad-events.swift":{"syntax":"swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id: Int","    var state: CellState = .loading","","    private var advertisement: Advertisement?","","    init(id: Int, _ service: AdService, _ request: AdRequest) async { \/* ... *\/ }","}","","private extension AdCellViewModel {","    func getAdvertisement(","        _ service: AdService,","        _ request: AdRequest","    ) async throws(AdError) -> Advertisement { \/* ... *\/ }","}","","extension AdCellViewModel: AdEventDelegate {","    func unloadRequest() {","    }","}","\/\/ ..."],"fileName":"AdCell.swift","fileType":"swift","type":"file","identifier":"04-monitor-process-ad-events.swift","highlights":[{"line":21},{"line":22}]},"doc://com.adsdk.core/documentation/AdSDKCore/TagRequest":{"abstract":[{"type":"text","text":"Describes a request to “tag” a user."}],"role":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TagRequest","kind":"identifier"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"TagRequest","kind":"identifier"}],"url":"\/documentation\/adsdkcore\/tagrequest","title":"TagRequest"},"doc://com.adsdk.core/documentation/AdSDKCore/TrackingRequest":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TrackingRequest"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest","type":"topic","kind":"symbol","url":"\/documentation\/adsdkcore\/trackingrequest","title":"TrackingRequest","abstract":[{"type":"text","text":"Trigger a request for conversion tracking."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TrackingRequest"}]},"doc://com.adsdk.core/documentation/AdSDKCore/AdEventDelegate/tapEventProcessed(_:processedURL:metadata:)":{"url":"\/documentation\/adsdkcore\/adeventdelegate\/tapeventprocessed(_:processedurl:metadata:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"tapEventProcessed","kind":"identifier"},{"text":"(","kind":"text"},{"text":"TapEvent","kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore8TapEventO"},{"text":", ","kind":"text"},{"text":"processedURL","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"URL","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV"},{"text":", ","kind":"text"},{"text":"metadata","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AdMetadata","kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A8MetadataC"},{"text":")","kind":"text"}],"required":true,"kind":"symbol","abstract":[{"text":"A method for notifying about successful ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapEvent","isActive":true},{"text":" processing.","type":"text"}],"defaultImplementations":1,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate\/tapEventProcessed(_:processedURL:metadata:)","title":"tapEventProcessed(_:processedURL:metadata:)","role":"symbol","type":"topic"},"doc://com.adsdk.core/documentation/AdSDKCore/AdService":{"navigatorTitle":[{"kind":"identifier","text":"AdService"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AdService"}],"abstract":[{"type":"text","text":"A key object for configuring your advertisements."}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService","url":"\/documentation\/adsdkcore\/adservice","role":"symbol","type":"topic","kind":"symbol","title":"AdService"},"doc://com.adsdk.core/tutorials/AdSDKCore/AdSDK-Cache-Management#Flushing-the-cache":{"kind":"section","title":"Flushing the cache","role":"pseudoSymbol","abstract":[{"type":"text","text":"The SDK supports a persistent cache with resources related to ad, these can be banners or other resources, depending on the type of ad. In this tutorial, we’ll look at how an application developer can control the cache."}],"type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Flushing-the-cache","url":"\/tutorials\/adsdkcore\/adsdk-cache-management#Flushing-the-cache"},"14-monitor-process-ad-events.swift":{"syntax":"swift","type":"file","content":["\/\/ ...","extension AdCellViewModel: AdEventDelegate {","    \/\/ ...","    func tapEventProcessed(","        _ event: TapEvent,","        processedURL: URL,","        metadata: AdMetadata","    ) {","        switch event {","        case .tap, .tapURL:","            print(\"My ad was tapped.\")","            print(\"\\(processedURL) opened for the user.\")","        case .tapAsset(let id):","            print(\"My banner with \\(id) was tapped.\")","            print(\"\\(processedURL) opened for the user.\")","        case .silentTap(let url):","            print(\"My renderer want to process click counter \\(url) redirect.\")","            print(\"As a result of redirects we get \\(url).\")","            print(\"This URL is NOT opened for the user.\")","","        @unknown default: print(\"Unexpected event\")","        }","    }","","    func tapEventProcessingFailed(","        _ event: TapEvent,","        _ error: AdError","    ) async -> AdEventFailureAction {","","    }","}","\/\/ ..."],"identifier":"14-monitor-process-ad-events.swift","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":21},{"line":22}],"fileName":"AdCell.swift"},"08-monitor-process-ad-events.swift":{"identifier":"08-monitor-process-ad-events.swift","type":"file","highlights":[{"line":3},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}],"fileName":"AdCell.swift","content":["\/\/ ...","extension AdCellViewModel: AdEventDelegate {","    func trackingEventProcessed(","        _ event: TrackingEvent,","        processedURLs: [URL],","        metadata: AdMetadata","    ) {","","    }","","    func trackingEventProcessingFailed(","        _ event: TrackingEvent,","        processedURLs: [URL],","        failedURLs: [URL : AdError]","    ) async -> AdEventFailureAction {","","    }","}","\/\/ ..."],"syntax":"swift","fileType":"swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking#Preparing-the-app":{"url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking#Preparing-the-app","type":"section","role":"pseudoSymbol","abstract":[{"text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality.","type":"text"}],"kind":"section","title":"Preparing the app","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Preparing-the-app"},"doc://com.adsdk.core/tutorials/Meet-AdSDK/Extending-the-SDK-with-your-custom-advertisements":{"type":"topic","title":"Extending the SDK with your custom advertisements","role":"article","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements","abstract":[],"url":"\/tutorials\/meet-adsdk\/extending-the-sdk-with-your-custom-advertisements","kind":"article"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tap-events":{"title":"Monitor and process advertising tap events","kind":"section","type":"section","abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" and how we can interact with them."}],"role":"pseudoSymbol","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitor-and-process-advertising-tap-events","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tap-events"},"doc://com.adsdk.core/documentation/AdSDKCore/AdError":{"abstract":[{"type":"text","text":"Type of SDK-related error."}],"navigatorTitle":[{"text":"AdError","kind":"identifier"}],"role":"symbol","title":"AdError","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AdError","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError","url":"\/documentation\/adsdkcore\/aderror","kind":"symbol"},"doc://com.adsdk.core/documentation/AdSDKCore/AdEventDelegate":{"type":"topic","role":"symbol","url":"\/documentation\/adsdkcore\/adeventdelegate","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AdEventDelegate","kind":"identifier"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate","title":"AdEventDelegate","navigatorTitle":[{"text":"AdEventDelegate","kind":"identifier"}],"abstract":[{"type":"text","text":"An interface of object for tracking and processing "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true},{"type":"text","text":" related events."}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad#Presenting-interstitial-ad":{"type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Presenting-interstitial-ad","title":"Presenting interstitial ad","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Presenting-interstitial-ad","abstract":[{"text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application.","type":"text"}],"role":"pseudoSymbol","kind":"section"},"03-monitor-process-ad-events.swift":{"fileType":"swift","identifier":"03-monitor-process-ad-events.swift","type":"file","fileName":"AdCell.swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id: Int","    var state: CellState = .loading","","    private var advertisement: Advertisement?","","    init(id: Int, _ service: AdService, _ request: AdRequest) async { \/* ... *\/ }","}","","private extension AdCellViewModel {","    func getAdvertisement(","        _ service: AdService,","        _ request: AdRequest","    ) async throws(AdError) -> Advertisement { \/* ... *\/ }","}","","extension AdCellViewModel: AdEventDelegate {","","}","\/\/ ..."],"syntax":"swift","highlights":[]},"doc://com.adsdk.core/tutorials/AdSDKCore/Custom-Handling-Of-Target-Tap-URLs#Preparing-the-app":{"abstract":[{"type":"text","text":"Sometimes you need to handle taps in your own way. For example, to display ads in the internal browser in the app. In this tutorial, we will learn how to customise the SDK’s tap handling behaviour."}],"url":"\/tutorials\/adsdkcore\/custom-handling-of-target-tap-urls#Preparing-the-app","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Preparing-the-app","title":"Preparing the app","type":"section","kind":"section","role":"pseudoSymbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking","type":"topic","kind":"project","url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking","abstract":[{"type":"text","text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality."}],"title":"User tagging and conversion tracking","role":"project","estimatedTime":"30min"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Event-management":{"url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Event-management","kind":"section","role":"pseudoSymbol","title":"Event management","abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Event-management","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-Parameters-For-All-Request-Types#Preparing-the-app":{"type":"section","abstract":[{"text":"We already know how to create and perform ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest","type":"reference"},{"text":", and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest","type":"reference"},{"text":". However, each of them can have additional parameters, which are called global parameters because they are specified globally for all requests. The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each request.","type":"text"}],"role":"pseudoSymbol","title":"Preparing the app","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Preparing-the-app","url":"\/tutorials\/adsdkcore\/global-parameters-for-all-request-types#Preparing-the-app","kind":"section"},"16-monitor-process-ad-events.swift":{"fileType":"swift","identifier":"16-monitor-process-ad-events.swift","type":"file","fileName":"AdCell.swift","content":["\/\/ ...","extension AdCellViewModel: AdEventDelegate {","    \/\/ ...","}","\/\/ ..."],"syntax":"swift","highlights":[]},"17-monitor-process-ad-events.swift":{"highlights":[{"line":4},{"line":5}],"syntax":"swift","content":["\/\/ ...","extension AdCellViewModel: AdEventDelegate {","    \/\/ ...","    func rendererMessageReceived(name: String, message: String?) {","    }","}","\/\/ ..."],"type":"file","fileName":"AdCell.swift","fileType":"swift","identifier":"17-monitor-process-ad-events.swift"},"10-monitor-process-ad-events.swift":{"highlights":[{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":32},{"line":33}],"identifier":"10-monitor-process-ad-events.swift","type":"file","content":["\/\/ ...","extension AdCellViewModel: AdEventDelegate {","    func trackingEventProcessed(","        _ event: TrackingEvent,","        processedURLs: [URL],","        metadata: AdMetadata","    ) {","        switch event {","        case .impression:","            print(\"My ad is ready\")","        case .viewable(let percentage):","            print(\"\\(percentage)% of my ads are now visible on the screen.\")","        @unknown default: print(\"Unexpected event\")","        }","","        print(\"SDK notified server about that via URLs: \\(processedURLs)\")","    }","","    func trackingEventProcessingFailed(","        _ event: TrackingEvent,","        processedURLs: [URL],","        failedURLs: [URL : AdError]","    ) async -> AdEventFailureAction {","        switch event {","        case .impression:","            print(\"My ad is ready\")","        case .viewable(let percentage):","            print(\"\\(percentage)% of my ads are now visible on the screen.\")","        @unknown default: print(\"Unexpected event\")","        }","","        print(\"SDK notified server about that via URLs: \\(processedURLs)\")","        print(\"But failed during requesting those: \\(failedURLs)\")","    }","}","\/\/ ..."],"fileType":"swift","syntax":"swift","fileName":"AdCell.swift"},"doc://com.adsdk.core/documentation/AdSDKCore/TrackingEvent/viewable(percentage:)":{"kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingEvent\/viewable(percentage:)","url":"\/documentation\/adsdkcore\/trackingevent\/viewable(percentage:)","abstract":[{"type":"text","text":"Notifies the ad server that the user has seen some part of an advertisement."}],"fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"viewable","kind":"identifier"},{"text":"(","kind":"text"},{"text":"percentage","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AdVisibilityPercentage","kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A20VisibilityPercentageO"},{"text":")","kind":"text"}],"title":"TrackingEvent.viewable(percentage:)","type":"topic","role":"symbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/First-Steps-For-Working-With-AdSDK":{"role":"project","kind":"project","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK","abstract":[{"type":"text","text":"This tutorial will guide you the first steps for working with the "},{"code":"AdSDK","type":"codeVoice"},{"type":"text","text":" - creating an "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService","type":"reference"},{"type":"text","text":"."}],"type":"topic","title":"First steps for working with AdSDK","estimatedTime":"15min","url":"\/tutorials\/adsdkcore\/first-steps-for-working-with-adsdk"},"20-monitor-process-ad-events.swift":{"content":["\/\/ ...","extension AdCellViewModel: AdEventDelegate {","    \/\/ ...","    func rendererMessageReceived(name: String, message: String?) {","        print(\"Renderer sent event \\(name), message: \\(String(describing: message)).\")","        print(\"We can create custom logic in the application based on it.\")","    }","","    func customTrackingEventProcessed(name: String, url: URL, metadata: AdMetadata) {","        print(\"Renderer perform custom tracking event \\(name)\")","        print(\"\\(url) was requested\")","    }","","    func customTrackingEventProcessingFailed(","        name: String,","        url: URL,","        _ error: AdError","    ) async -> AdEventFailureAction {","        print(\"Renderer perform custom tracking event \\(name)\")","        print(\"But request to \\(url) failed with error \\(error.localizedDescription)\")","","        return .ignore","    }","}","\/\/ ..."],"fileType":"swift","fileName":"AdCell.swift","identifier":"20-monitor-process-ad-events.swift","syntax":"swift","type":"file","highlights":[{"line":10},{"line":11},{"line":19},{"line":20},{"line":22}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-Parameters-For-All-Request-Types":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types","title":"Global parameters for all request types","role":"project","type":"topic","kind":"project","url":"\/tutorials\/adsdkcore\/global-parameters-for-all-request-types","abstract":[{"type":"text","text":"We already know how to create and perform "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest"},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest"},{"type":"text","text":", and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest"},{"type":"text","text":". However, each of them can have additional parameters, which are called global parameters because they are specified globally for all requests. The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each request."}],"estimatedTime":"20min"},"doc://com.adsdk.core/documentation/AdSDKCore/AdEventFailureAction/ignore":{"type":"topic","title":"AdEventFailureAction.ignore","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ignore","kind":"identifier"}],"role":"symbol","url":"\/documentation\/adsdkcore\/adeventfailureaction\/ignore","abstract":[{"type":"text","text":"The SDK should ignore this failure event processing."}],"kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventFailureAction\/ignore"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Creating-inline-advertisements":{"url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Creating-inline-advertisements","kind":"section","role":"pseudoSymbol","title":"Creating inline advertisements","abstract":[{"type":"text","text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-inline-advertisements","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Advanced-management-of-advertising-resources":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Advanced-management-of-advertising-resources","type":"section","kind":"section","title":"Advanced management of advertising resources","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Advanced-management-of-advertising-resources","abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads."}],"role":"pseudoSymbol"},"doc://com.adsdk.core/documentation/AdSDKCore/TapEvent":{"title":"TapEvent","navigatorTitle":[{"text":"TapEvent","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"An enum with all types of ad tap processing."}],"url":"\/documentation\/adsdkcore\/tapevent","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"TapEvent","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TapEvent"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement":{"navigatorTitle":[{"text":"Advertisement","kind":"identifier"}],"kind":"symbol","title":"Advertisement","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Advertisement","kind":"identifier"}],"url":"\/documentation\/adsdkcore\/advertisement","role":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"topic","abstract":[{"text":"A key object interface describing the advertisement.","type":"text"}]},"doc://com.adsdk.core/documentation/AdSDKCore/AdEventDelegate/trackingEventProcessingFailed(_:processedURLs:failedURLs:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"trackingEventProcessingFailed"},{"kind":"text","text":"("},{"preciseIdentifier":"s:9AdSDKCore13TrackingEventO","kind":"typeIdentifier","text":"TrackingEvent"},{"kind":"text","text":", "},{"kind":"externalParam","text":"processedURLs"},{"kind":"text","text":": ["},{"preciseIdentifier":"s:10Foundation3URLV","kind":"typeIdentifier","text":"URL"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"failedURLs"},{"kind":"text","text":": ["},{"preciseIdentifier":"s:10Foundation3URLV","kind":"typeIdentifier","text":"URL"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:9AdSDKCore0A5ErrorO","kind":"typeIdentifier","text":"AdError"},{"kind":"text","text":"]) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:9AdSDKCore0A18EventFailureActionO","kind":"typeIdentifier","text":"AdEventFailureAction"}],"abstract":[{"type":"text","text":"A method for notifying about failure "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingEvent","type":"reference","isActive":true},{"type":"text","text":" processing."}],"role":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEventDelegate\/trackingEventProcessingFailed(_:processedURLs:failedURLs:)","type":"topic","url":"\/documentation\/adsdkcore\/adeventdelegate\/trackingeventprocessingfailed(_:processedurls:failedurls:)","kind":"symbol","required":true,"title":"trackingEventProcessingFailed(_:processedURLs:failedURLs:)","defaultImplementations":1},"06-monitor-process-ad-events.swift":{"fileType":"swift","identifier":"06-monitor-process-ad-events.swift","type":"file","fileName":"InlineList.swift","content":["\/\/ ...","struct InlineList: View {","    @State var viewModel: InlineListViewModel","","    var body: some View {","        ScrollView {","            LazyVStack {","                ForEach(viewModel.dataSource) { viewModel in","                    AdCell(viewModel: viewModel)","                }","            }","        }","        .adsContainer() \/\/ <----- To enable visibility tracking","        .navigationTitle(\"Inline Ads List\")","        .task {","            await viewModel.fetchAds()","        }","    }","}","\/\/ ..."],"syntax":"swift","highlights":[]},"doc://com.adsdk.core/tutorials/AdSDKCore/AdSDK-Cache-Management#Limiting-the-cache-size":{"abstract":[{"type":"text","text":"The SDK supports a persistent cache with resources related to ad, these can be banners or other resources, depending on the type of ad. In this tutorial, we’ll look at how an application developer can control the cache."}],"role":"pseudoSymbol","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Limiting-the-cache-size","kind":"section","type":"section","url":"\/tutorials\/adsdkcore\/adsdk-cache-management#Limiting-the-cache-size","title":"Limiting the cache size"},"01-monitor-process-ad-events.swift":{"fileType":"swift","identifier":"01-monitor-process-ad-events.swift","type":"file","fileName":"AdCell.swift","content":["\/\/ ...","private extension AdCellViewModel {","    func getAdvertisement(","        _ service: AdService,","        _ request: AdRequest","    ) async throws(AdError) -> Advertisement {","        try await service.makeAdvertisement(","            request: request,","            placementType: .inline, \/\/ .inline by default","            targetURLHandler: nil, \/\/ Can be skipped","            eventDelegate: nil \/\/ Can be skipped","        )","    }","}","\/\/ ..."],"syntax":"swift","highlights":[]},"doc://com.adsdk.core/tutorials/AdSDKCore/First-Steps-For-Working-With-AdSDK#AdService-creation":{"title":"AdService creation","url":"\/tutorials\/adsdkcore\/first-steps-for-working-with-adsdk#AdService-creation","role":"pseudoSymbol","type":"section","kind":"section","abstract":[{"text":"This tutorial will guide you the first steps for working with the ","type":"text"},{"type":"codeVoice","code":"AdSDK"},{"text":" - creating an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService"},{"text":".","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK#AdService-creation"},"doc://com.adsdk.core/tutorials/AdSDKCore/Custom-Handling-Of-Target-Tap-URLs":{"title":"Custom handling of target tap URLs","url":"\/tutorials\/adsdkcore\/custom-handling-of-target-tap-urls","abstract":[{"type":"text","text":"Sometimes you need to handle taps in your own way. For example, to display ads in the internal browser in the app. In this tutorial, we will learn how to customise the SDK’s tap handling behaviour."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs","role":"project","type":"topic","estimatedTime":"20min","kind":"project"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising":{"estimatedTime":"1hr 30min","type":"topic","role":"project","url":"\/tutorials\/adsdkcore\/creating-customised-advertising","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"kind":"project","title":"Creating customised advertising"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad":{"abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}],"role":"project","title":"Create and display interstitial ad","kind":"project","type":"topic","estimatedTime":"25min","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad"}},"variantOverrides":[{"traits":[{"interfaceLanguage":"occ"}],"patch":[{"path":"\/identifier\/interfaceLanguage","op":"replace","value":"occ"}]}]}