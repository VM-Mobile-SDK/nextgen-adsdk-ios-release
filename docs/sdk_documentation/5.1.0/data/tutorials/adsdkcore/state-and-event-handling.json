{"hierarchy":{"paths":[["doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/$volume","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK"]],"modules":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK","projects":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Ads","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Ads#First-steps-for-working-with-AdSDK","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Ads#Loading-and-displaying-advertisements"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-state-of-advertisements"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Handling-errors-during-the-loading-and-decoding-of-advertisements","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-advertising-events"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad#Defining-the-size-of-the-advertisement","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters#Modifying-global-parameters"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters"}]}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK"},"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"project","identifier":{"url":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling","interfaceLanguage":"swift"},"sections":[{"chapter":"Working with the built-in capabilities of the SDK","kind":"hero","title":"Handling the state and events of advertising","content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section.","type":"text"}]}],"estimatedTimeInMinutes":25},{"kind":"tasks","tasks":[{"title":"Observing the state of advertisements","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Observe the state of advertisements to react appropriately within the application.","type":"text"}],"type":"paragraph"}]}],"stepsSection":[{"type":"step","caption":[{"inlineContent":[{"text":"As you may remember, our implementation is not entirely correct because we send the ","type":"text"},{"code":"ready","type":"codeVoice"},{"type":"text","text":" state and pass "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" to "},{"type":"codeVoice","code":"AdView"},{"type":"text","text":" without checking whether the advertising content has been loaded."}],"type":"paragraph"}],"content":[{"inlineContent":[{"text":"Let’s go back to the AdCell file.","type":"text"}],"type":"paragraph"}],"media":null,"code":"01-state-event-handling.swift","runtimePreview":null},{"media":null,"type":"step","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The state of the advertisement is represented through the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState"},{"type":"text","text":" enum. Thanks to this, we can understand at which stage of the loading process our advertisement currently is."}]}],"code":"02-state-event-handling.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To access the current state of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":", you can use the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/state"},{"type":"text","text":" property. However, in our case, we want to observe changes in this state. For this purpose, you can use "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/stateStream","isActive":true},{"text":" or ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/statePublisher"},{"type":"text","text":"."}]}]},{"type":"step","media":null,"caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The next step is to respond to changes in the advertisement state in our "},{"type":"codeVoice","code":"AdCellViewModel"},{"type":"text","text":". If the advertisement is in the "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/loading","isActive":true},{"type":"text","text":" or "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/caching"},{"text":" stage, we want to display the ","type":"text"},{"code":"loading","type":"codeVoice"},{"text":" state of the advertisement. If the advertisement is ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/readyToPresent(metadata:)"},{"text":", we want to send a signal to display the ","type":"text"},{"type":"codeVoice","code":"AdView"},{"text":". If the advertisement encounters an ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/error(_:)","isActive":true,"type":"reference"},{"type":"text","text":" during loading or decoding, we send an error state to our "},{"code":"AdCell","type":"codeVoice"},{"text":".","type":"text"}]}],"code":"03-state-event-handling.swift"}],"anchor":"Observing-the-state-of-advertisements"},{"title":"Handling errors during the loading and decoding of advertisements","stepsSection":[{"type":"step","caption":[],"code":"03-state-event-handling.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s continue with our "},{"type":"codeVoice","code":"observeState()"},{"type":"text","text":" method."}]}],"media":null},{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"First, we need to understand if the error is related to decoding. If you are not using custom native renderers, the type of error you can get from the SDK will always be "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError","isActive":true},{"text":". Thanks to it, you can find out the reason of the error.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"media":null,"code":"04-state-event-handling.swift"},{"media":null,"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Now let’s add a ","type":"text"},{"code":"retryCount","type":"codeVoice"},{"text":" property, which will keep track of how many times we have attempted to reload the advertisement. If we receive a ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError\/decoding","isActive":true},{"type":"text","text":" error and "},{"type":"codeVoice","code":"retryCount"},{"text":" is equal to zero, we will increment the ","type":"text"},{"type":"codeVoice","code":"retryCount"},{"type":"text","text":" by 1 and call the "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/reload()","isActive":true},{"type":"text","text":" method, which will attempt to make the request again."}]}],"code":"05-state-event-handling.swift","caption":[]}],"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"You can handle errors as you see fit. In our application we will implement it in a way that when an error related to decoding is encountered, the advertisement will attempt to reload the content, and only after a second error is received, it will be displayed on the screen.","type":"text"}]}],"mediaPosition":"trailing"}],"anchor":"Handling-errors-during-the-loading-and-decoding-of-advertisements"},{"anchor":"Observing-the-advertising-events","title":"Observing the advertising events","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Observe the advertising events to respond to them in the application.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s continue with our "},{"type":"codeVoice","code":"AdCellViewModel"},{"type":"text","text":"."}]}],"type":"step","code":"06-state-event-handling.swift","caption":[],"runtimePreview":null,"media":null},{"type":"step","runtimePreview":null,"caption":[],"media":null,"code":"07-state-event-handling.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The SDK can send many events related to advertisements. It may be useful for you to observe them, for example, for debugging or other purposes. To do this, you can use "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/eventStream","isActive":true},{"type":"text","text":" or "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/eventPublisher","type":"reference","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Advertising events in the SDK are represented as the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEvent"},{"text":" enum. Let’s add the following logic – if the user tap on the advertisement, we want to find out which URL was associated with this event.","type":"text"}]}],"runtimePreview":null,"code":"08-state-event-handling.swift","type":"step","caption":[{"inlineContent":[{"text":"Note: in the case of a tap event, the URL can either represent the URL to which the user was redirected in the browser, or the URL that the SDK processed without the user’s knowledge.","type":"text"}],"type":"paragraph"}],"media":null},{"runtimePreview":null,"type":"step","media":null,"code":"09-state-event-handling.swift","caption":[],"content":[{"inlineContent":[{"text":"In addition, the SDK can observe the percentage of visibility of the advertisement on the screen and send events related to this to the server if it was configured in such a way on the server. This can be useful if you are displaying advertisements in a ","type":"text"},{"type":"codeVoice","code":"List"},{"text":". Open the FirstScreen file.","type":"text"}],"type":"paragraph"}]},{"code":"10-state-event-handling.swift","runtimePreview":null,"type":"step","content":[{"inlineContent":[{"text":"Import AdSDKSwiftUI and add the ","type":"text"},{"code":"adsContainer()","type":"codeVoice"},{"type":"text","text":" modifier to your List. This allows the "},{"code":"AdView","type":"codeVoice"},{"type":"text","text":", which is in the hierarchy of the "},{"type":"codeVoice","code":"List"},{"type":"text","text":", to understand its percentage of visibility on the screen."}],"type":"paragraph"}],"caption":[],"media":null},{"type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Now, if your advertisement was configured on the server to track the percentage of visibility on the screen, you can observe "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEvent\/viewable(percentage:url:metadata:)","type":"reference"},{"text":" event.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"code":"11-state-event-handling.swift","caption":[]}]}]},{"action":{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad","type":"reference","overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}]},"abstract":[{"type":"text","text":"This tutorial will teach you how to define the size of the advertisement, taking into account the aspect ratio parameter. In it, we will continue the development of the application we started in the previous section."}],"featuredEyebrow":"Tutorial","title":"Defining the size of the advertisement","kind":"callToAction"}],"metadata":{"category":"Meet AdSDK","title":"Handling the state and events of advertising","categoryPathComponent":"Meet-AdSDK","role":"project"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/adsdkcore\/state-and-event-handling"]},{"paths":["\/tutorials\/adsdkcore\/state-and-event-handling"],"traits":[{"interfaceLanguage":"occ"}]}],"references":{"07-state-event-handling.swift":{"highlights":[{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37}],"identifier":"07-state-event-handling.swift","fileName":"AdCell.swift","type":"file","fileType":"swift","syntax":"swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","    private var retryCount = Int.zero","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() { \/* ... *\/ }","","    func observeEvents() {","        Task {","            for await event in ad.eventStream {","                print(event)","            }","        }","    }","","    \/\/ Combine","    \/*","    func observeEvents() {","        ad.eventPublisher","            .sink { [weak self] event in","                print(event)","            }","            .store(in: &subscriptions)","    }","    *\/","}","\/\/ ..."]},"doc://com.adsdk.core/documentation/AdSDKCore/AdState/readyToPresent(metadata:)":{"kind":"symbol","type":"topic","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readyToPresent","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"metadata"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A8MetadataC","text":"AdMetadata"},{"text":")","kind":"text"}],"title":"AdState.readyToPresent(metadata:)","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/readyToPresent(metadata:)","abstract":[{"text":"Signals that the advertisement is now ready to be displayed for the user.","type":"text"}],"url":"\/documentation\/adsdkcore\/adstate\/readytopresent(metadata:)","role":"symbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Ads#Loading-and-displaying-advertisements":{"type":"section","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial will guide you in creating a simple app that can load and display a list of advertisement."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Ads#Loading-and-displaying-advertisements","url":"\/tutorials\/adsdkcore\/create-and-display-ads#Loading-and-displaying-advertisements","title":"Loading and displaying advertisements"},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling#Observing-the-state-of-advertisements":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-state-of-advertisements","abstract":[{"type":"text","text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section."}],"url":"\/tutorials\/adsdkcore\/state-and-event-handling#Observing-the-state-of-advertisements","title":"Observing the state of advertisements","type":"section","kind":"section","role":"pseudoSymbol"},"03-state-event-handling.swift":{"fileType":"swift","type":"file","highlights":[],"syntax":"swift","identifier":"03-state-event-handling.swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() {","        Task {","            for await state in ad.stateStream {","                switch state {","                case .loading, .caching:","                    self.state = .loading","                case .readyToPresent(let metadata):","                    self.state = .ready(ad)","                case .error(let error):","                    self.state = .error","","                @unknown default: break","                }","            }","        }","    }","}","\/\/ ..."],"fileName":"AdCell.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Defining-Size-Of-Ad":{"kind":"project","abstract":[{"text":"This tutorial will teach you how to define the size of the advertisement, taking into account the aspect ratio parameter. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"estimatedTime":"15min","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad","title":"Defining the size of the advertisement","url":"\/tutorials\/adsdkcore\/defining-size-of-ad","type":"topic","role":"project"},"02-state-event-handling.swift":{"highlights":[{"line":12},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37}],"identifier":"02-state-event-handling.swift","fileName":"AdCell.swift","type":"file","fileType":"swift","syntax":"swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() {","        Task {","            for await state in ad.stateStream {","                print(state)","            }","        }","    }","","    \/\/ Combine","    \/*","    func observeState() {","        ad.statePublisher","            .sink { [weak self] state in","                guard let self else { return }","","                print(state)","            }","            .store(in: &subscriptions)","    }","    *\/","}","\/\/ ..."]},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-AdRequest-Parameters#Modifying-global-parameters":{"type":"section","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"We already know how to create an "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true,"type":"reference"},{"type":"text","text":". However, an "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","type":"reference"},{"text":" can have additional parameters beyond those you pass during initialization. These additional parameters are global for all ","type":"text"},{"code":"AdRequests","type":"codeVoice"},{"text":". The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","type":"reference"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters#Modifying-global-parameters","url":"\/tutorials\/adsdkcore\/global-adrequest-parameters#Modifying-global-parameters","title":"Modifying global parameters"},"doc://com.adsdk.core/tutorials/Meet-AdSDK":{"kind":"overview","abstract":[{"text":"Manage, display, and create your custom advertisements on iOS using cutting-edge technologies such as Combine, Modern Concurrency, and SwiftUI based on the AdSDK.","type":"text"}],"role":"overview","title":"Meet nextgen AdSDK","type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","url":"\/tutorials\/meet-adsdk"},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling#Observing-the-advertising-events":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-advertising-events","abstract":[{"type":"text","text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section."}],"url":"\/tutorials\/adsdkcore\/state-and-event-handling#Observing-the-advertising-events","title":"Observing the advertising events","type":"section","kind":"section","role":"pseudoSymbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling#Handling-errors-during-the-loading-and-decoding-of-advertisements":{"type":"section","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Handling-errors-during-the-loading-and-decoding-of-advertisements","url":"\/tutorials\/adsdkcore\/state-and-event-handling#Handling-errors-during-the-loading-and-decoding-of-advertisements","title":"Handling errors during the loading and decoding of advertisements"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Ads#First-steps-for-working-with-AdSDK":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Ads#First-steps-for-working-with-AdSDK","abstract":[{"type":"text","text":"This tutorial will guide you in creating a simple app that can load and display a list of advertisement."}],"url":"\/tutorials\/adsdkcore\/create-and-display-ads#First-steps-for-working-with-AdSDK","title":"First steps for working with AdSDK","type":"section","kind":"section","role":"pseudoSymbol"},"doc://com.adsdk.core/documentation/AdSDKCore/AdError":{"title":"AdError","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AdError","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AdError"}],"url":"\/documentation\/adsdkcore\/aderror","abstract":[{"type":"text","text":"Type of SDK-related error."}],"role":"symbol","type":"topic"},"09-state-event-handling.swift":{"fileType":"swift","type":"file","highlights":[],"syntax":"swift","identifier":"09-state-event-handling.swift","content":["import SwiftUI","import AdSDKCore","","struct FirstScreen: View {","    @State var viewModel: FirstScreenViewModel","","    var body: some View {","        List {","            ForEach(viewModel.ads) { ad in","                AdCell(viewModel: ad)","            }","        }","        .listStyle(.plain)","        .clipped()","    }","}","\/\/ ..."],"fileName":"FirstScreen.swift"},"doc://com.adsdk.core/documentation/AdSDKCore/AdState/caching":{"title":"AdState.caching","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/caching","url":"\/documentation\/adsdkcore\/adstate\/caching","abstract":[{"type":"text","text":"Signals that the advertisement assets are currently being cached."}],"kind":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"caching"}],"type":"topic","role":"symbol"},"04-state-event-handling.swift":{"highlights":[{"line":26},{"line":27},{"line":28},{"line":29},{"line":31},{"line":32}],"identifier":"04-state-event-handling.swift","fileName":"AdCell.swift","type":"file","fileType":"swift","syntax":"swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() {","        Task {","            for await state in ad.stateStream {","                switch state {","                case .loading, .caching:","                    self.state = .loading","                case .readyToPresent(let metadata):","                    self.state = .ready(ad)","                case .error(let error):","                    guard let error = error as? AdError,","                          case .decoding = error else {","                        return self.state = .error","                    }","","                    \/\/ Handle decoding error","","                @unknown default: break","                }","            }","        }","    }","}","\/\/ ..."]},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/stateStream":{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/stateStream","type":"topic","url":"\/documentation\/adsdkcore\/advertisement\/statestream","title":"stateStream","abstract":[{"type":"text","text":"Advertisement async state stream."}],"required":true,"role":"symbol","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stateStream","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:ScS","text":"AsyncStream","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"AdState","kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A5StateO"},{"kind":"text","text":">"}]},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/state":{"url":"\/documentation\/adsdkcore\/advertisement\/state","role":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/state","abstract":[{"type":"text","text":"Current "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState"},{"text":" of ","type":"text"},{"code":"Advertisement","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"state","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore0A5StateO","text":"AdState","kind":"typeIdentifier"}],"kind":"symbol","required":true,"title":"state"},"doc://com.adsdk.core/documentation/AdSDKCore/AdEvent/viewable(percentage:url:metadata:)":{"url":"\/documentation\/adsdkcore\/adevent\/viewable(percentage:url:metadata:)","kind":"symbol","type":"topic","title":"AdEvent.viewable(percentage:url:metadata:)","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEvent\/viewable(percentage:url:metadata:)","role":"symbol","abstract":[{"text":"Signals that the user has seen an advertisement.","type":"text"}],"fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"viewable","kind":"identifier"},{"kind":"text","text":"("},{"text":"percentage","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A20VisibilityPercentageO","text":"AdVisibilityPercentage"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"url"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV","text":"URL"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"metadata"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A8MetadataC","text":"AdMetadata"},{"text":")","kind":"text"}]},"05-state-event-handling.swift":{"fileType":"swift","type":"file","highlights":[{"line":9},{"line":28},{"line":29},{"line":33},{"line":34}],"syntax":"swift","identifier":"05-state-event-handling.swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","    private var retryCount = Int.zero","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() {","        Task {","            for await state in ad.stateStream {","                switch state {","                case .loading, .caching:","                    self.state = .loading","                case .readyToPresent(let metadata):","                    self.state = .ready(ad)","                case .error(let error):","                    guard let error = error as? AdError,","                          case .decoding = error,","                          retryCount == .zero else {","                        return self.state = .error","                    }","","                    retryCount += 1","                    ad.reload()","","                @unknown default: break","                }","            }","        }","    }","}","\/\/ ..."],"fileName":"AdCell.swift"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/reload()":{"required":true,"kind":"symbol","abstract":[{"type":"text","text":"Makes a request for advertisement data to the server."}],"role":"symbol","type":"topic","title":"reload()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reload"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/reload()","url":"\/documentation\/adsdkcore\/advertisement\/reload()"},"06-state-event-handling.swift":{"highlights":[],"identifier":"06-state-event-handling.swift","fileName":"AdCell.swift","type":"file","fileType":"swift","syntax":"swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","    private var retryCount = Int.zero","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() { \/* ... *\/ }","}","\/\/ ..."]},"doc://com.adsdk.core/documentation/AdSDKCore/AdError/decoding":{"type":"topic","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decoding"}],"title":"AdError.decoding","kind":"symbol","abstract":[{"type":"text","text":"Error related to data decoding."}],"role":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError\/decoding","url":"\/documentation\/adsdkcore\/aderror\/decoding"},"doc://com.adsdk.core/documentation/AdSDKCore/AdEvent":{"navigatorTitle":[{"text":"AdEvent","kind":"identifier"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEvent","title":"AdEvent","type":"topic","url":"\/documentation\/adsdkcore\/adevent","abstract":[{"text":"A representation of the ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference","isActive":true},{"type":"text","text":" events."}],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"AdEvent","kind":"identifier"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling":{"kind":"project","abstract":[{"text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"estimatedTime":"25min","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling","title":"Handling the state and events of advertising","url":"\/tutorials\/adsdkcore\/state-and-event-handling","type":"topic","role":"project"},"doc://com.adsdk.core/tutorials/Meet-AdSDK/Working-with-the-built-in-capabilities-of-the-SDK":{"type":"topic","kind":"article","role":"article","abstract":[],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK","url":"\/tutorials\/meet-adsdk\/working-with-the-built-in-capabilities-of-the-sdk","title":"Working with the built-in capabilities of the SDK"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement":{"title":"Advertisement","type":"topic","navigatorTitle":[{"text":"Advertisement","kind":"identifier"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","abstract":[{"type":"text","text":"A key object interface describing the advertisement."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Advertisement","kind":"identifier"}],"url":"\/documentation\/adsdkcore\/advertisement"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-AdRequest-Parameters":{"kind":"project","abstract":[{"type":"text","text":"We already know how to create an "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true},{"text":". However, an ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true},{"text":" can have additional parameters beyond those you pass during initialization. These additional parameters are global for all ","type":"text"},{"code":"AdRequests","type":"codeVoice"},{"type":"text","text":". The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true,"type":"reference"},{"text":".","type":"text"}],"estimatedTime":"10min","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters","title":"Global AdRequest parameters","url":"\/tutorials\/adsdkcore\/global-adrequest-parameters","type":"topic","role":"project"},"10-state-event-handling.swift":{"highlights":[{"line":3},{"line":16}],"identifier":"10-state-event-handling.swift","fileName":"FirstScreen.swift","type":"file","fileType":"swift","syntax":"swift","content":["import SwiftUI","import AdSDKCore","import AdSDKSwiftUI","","struct FirstScreen: View {","    @State var viewModel: FirstScreenViewModel","","    var body: some View {","        List {","            ForEach(viewModel.ads) { ad in","                AdCell(viewModel: ad)","            }","        }","        .listStyle(.plain)","        .clipped()","        .adsContainer()","    }","}","\/\/ ..."]},"01-state-event-handling.swift":{"fileType":"swift","type":"file","highlights":[],"syntax":"swift","identifier":"01-state-event-handling.swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","","    init(_ ad: Advertisement) {","        self.ad = ad","        state = .ready(ad)","    }","}","\/\/ ..."],"fileName":"AdCell.swift"},"08-state-event-handling.swift":{"highlights":[{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29}],"identifier":"08-state-event-handling.swift","fileName":"AdCell.swift","type":"file","fileType":"swift","syntax":"swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","    private var retryCount = Int.zero","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() { \/* ... *\/ }","","    func observeEvents() {","        Task {","            for await event in ad.eventStream {","                switch event {","                case let .tap(url, metadata):","                    print(\"The user tapped on the advertisement.\")","                    print(\"SDK processed the following URL: \\(url)\")","","                default: break","                }","            }","        }","    }","}","\/\/ ..."]},"11-state-event-handling.swift":{"fileType":"swift","type":"file","highlights":[],"syntax":"swift","identifier":"11-state-event-handling.swift","content":["\/\/ ...","private extension AdCellViewModel {","    func observeState() { \/* ... *\/ }","","    func observeEvents() {","        Task {","            for await event in ad.eventStream {","                switch event {","                case let .tap(url, metadata):","                    print(\"The user tapped on the advertisement.\")","                    print(\"SDK processed the following URL: \\(url)\")","","                case let .viewable(percentage, url, metadata):","                    print(\"\\(percentage) percent of the advertisement is visible.\")","                    print(\"SDK processed the following URL: \\(url)\")","","                default: break","                }","            }","        }","    }","}","\/\/ ..."],"fileName":"AdCell.swift"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/statePublisher":{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/statePublisher","type":"topic","url":"\/documentation\/adsdkcore\/advertisement\/statepublisher","title":"statePublisher","abstract":[{"text":"Advertisement state publisher.","type":"text"}],"required":true,"role":"symbol","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"statePublisher","kind":"identifier"},{"text":": ","kind":"text"},{"text":"AnyPublisher","preciseIdentifier":"s:7Combine12AnyPublisherV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"AdState","kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A5StateO"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Never","preciseIdentifier":"s:s5NeverO"},{"text":">","kind":"text"}]},"doc://com.adsdk.core/documentation/AdSDKCore/AdRequest":{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Describes a request to load an advertisement."}],"navigatorTitle":[{"text":"AdRequest","kind":"identifier"}],"url":"\/documentation\/adsdkcore\/adrequest","title":"AdRequest","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AdRequest"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Defining-Size-Of-Ad#Defining-the-size-of-the-advertisement":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad#Defining-the-size-of-the-advertisement","abstract":[{"type":"text","text":"This tutorial will teach you how to define the size of the advertisement, taking into account the aspect ratio parameter. In it, we will continue the development of the application we started in the previous section."}],"url":"\/tutorials\/adsdkcore\/defining-size-of-ad#Defining-the-size-of-the-advertisement","title":"Defining the size of the advertisement","type":"section","kind":"section","role":"pseudoSymbol"},"doc://com.adsdk.core/documentation/AdSDKCore/AdState/loading":{"type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"Signals that the advertisement data is currently being loaded from the server.","type":"text"}],"fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"loading"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/loading","url":"\/documentation\/adsdkcore\/adstate\/loading","title":"AdState.loading"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Ads":{"kind":"project","abstract":[{"text":"This tutorial will guide you in creating a simple app that can load and display a list of advertisement.","type":"text"}],"role":"project","title":"Create And Display Ads","type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Ads","estimatedTime":"20min","url":"\/tutorials\/adsdkcore\/create-and-display-ads"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/eventStream":{"url":"\/documentation\/adsdkcore\/advertisement\/eventstream","role":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/eventStream","abstract":[{"type":"text","text":"Advertisement async event stream."}],"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"eventStream","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:ScS","text":"AsyncStream","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:9AdSDKCore0A5EventO","text":"AdEvent","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","required":true,"title":"eventStream"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/eventPublisher":{"url":"\/documentation\/adsdkcore\/advertisement\/eventpublisher","role":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/eventPublisher","abstract":[{"type":"text","text":"Advertisement event publisher."}],"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"eventPublisher","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Combine12AnyPublisherV","text":"AnyPublisher","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:9AdSDKCore0A5EventO","text":"AdEvent","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s5NeverO","text":"Never","kind":"typeIdentifier"},{"kind":"text","text":">"}],"kind":"symbol","required":true,"title":"eventPublisher"},"doc://com.adsdk.core/documentation/AdSDKCore/AdState":{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AdState","kind":"identifier"}],"url":"\/documentation\/adsdkcore\/adstate","type":"topic","abstract":[{"text":"A representation of the ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"text":" life cycle.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"AdState"}],"title":"AdState","role":"symbol","kind":"symbol"},"doc://com.adsdk.core/documentation/AdSDKCore/AdState/error(_:)":{"kind":"symbol","abstract":[{"text":"Signals that an advertisement lifecycle error has occurred.","type":"text"}],"role":"symbol","type":"topic","title":"AdState.error(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"error"},{"text":"(","kind":"text"},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/error(_:)","url":"\/documentation\/adsdkcore\/adstate\/error(_:)"}},"variantOverrides":[{"traits":[{"interfaceLanguage":"occ"}],"patch":[{"path":"\/identifier\/interfaceLanguage","value":"occ","op":"replace"}]}]}