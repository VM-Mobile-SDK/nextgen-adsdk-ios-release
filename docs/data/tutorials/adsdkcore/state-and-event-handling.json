{"hierarchy":{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","modules":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK","projects":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#First-steps-for-working-with-AdSDK"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Loading-and-displaying-advertisements","kind":"task"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-state-of-advertisements","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Handling-errors-during-the-loading-and-decoding-of-advertisements","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-advertising-events","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad#Defining-the-size-of-the-advertisement"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad#Interstitial-Ad-Object","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad#Presenting-interstitial","kind":"task"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters#Modifying-global-parameters","kind":"task"}]}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements","projects":[{"sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-business-layer","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#State-and-event-management"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-presentation-layer","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising"},{"sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Load-And-Cache-Assets#Asset-loading-and-caching","kind":"task"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Load-And-Cache-Assets"}]}],"paths":[["doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/$volume","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"project","sections":[{"title":"Handling the state and events of advertising","kind":"hero","chapter":"Working with the built-in capabilities of the SDK","estimatedTimeInMinutes":25,"content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section.","type":"text"}]}]},{"kind":"tasks","tasks":[{"contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"Observe the state of advertisements to react appropriately within the application.","type":"text"}]}],"kind":"contentAndMedia"}],"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s go back to the AdCell file."}]}],"type":"step","media":null,"runtimePreview":null,"caption":[{"inlineContent":[{"text":"As you may remember, our implementation is not entirely correct because we send the ","type":"text"},{"code":"ready","type":"codeVoice"},{"text":" state and pass ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"AdView"},{"type":"text","text":" without checking whether the advertising content has been loaded."}],"type":"paragraph"}],"code":"01-state-event-handling.swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"To access the current state of the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":", you can use the "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/state","type":"reference"},{"type":"text","text":" property. However, in our case, we want to observe changes in this state. For this purpose, you can use "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/stateStream","isActive":true,"type":"reference"},{"type":"text","text":" or "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/statePublisher","type":"reference"},{"type":"text","text":"."}]}],"runtimePreview":null,"code":"02-state-event-handling.swift","type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The state of the advertisement is represented through the "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState","isActive":true,"type":"reference"},{"type":"text","text":" enum. Thanks to this, we can understand at which stage of the loading process our advertisement currently is."}]}],"media":null},{"type":"step","code":"03-state-event-handling.swift","media":null,"caption":[],"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"The next step is to respond to changes in the advertisement state in our "},{"type":"codeVoice","code":"AdCellViewModel"},{"type":"text","text":". If the advertisement is in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/loading"},{"type":"text","text":" or "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/caching","isActive":true},{"type":"text","text":" stage, we want to display the "},{"type":"codeVoice","code":"loading"},{"text":" state of the advertisement. If the advertisement is ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/readyToPresent(metadata:)","type":"reference","isActive":true},{"text":", we want to send a signal to display the ","type":"text"},{"code":"AdView","type":"codeVoice"},{"text":". If the advertisement encounters an ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/error(_:)","isActive":true},{"text":" during loading or decoding, we send an error state to our ","type":"text"},{"code":"AdCell","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]}],"title":"Observing the state of advertisements","anchor":"Observing-the-state-of-advertisements"},{"title":"Handling errors during the loading and decoding of advertisements","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can handle errors as you see fit. In our application we will implement it in a way that when an error related to decoding is encountered, the advertisement will attempt to reload the content, and only after a second error is received, it will be displayed on the screen."}]}]}],"stepsSection":[{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Let’s continue with our ","type":"text"},{"type":"codeVoice","code":"observeState()"},{"type":"text","text":" method."}]}],"code":"03-state-event-handling.swift","media":null,"runtimePreview":null,"caption":[]},{"media":null,"content":[{"inlineContent":[{"type":"text","text":"First, we need to understand if the error is related to decoding. If you are not using custom native renderers, the type of error you can get from the SDK will always be "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError"},{"text":". Thanks to it, you can find out the reason of the error.","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","code":"04-state-event-handling.swift","runtimePreview":null},{"media":null,"type":"step","code":"05-state-event-handling.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"Now let’s add a ","type":"text"},{"code":"retryCount","type":"codeVoice"},{"text":" property, which will keep track of how many times we have attempted to reload the advertisement. If we receive a ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError\/decoding","isActive":true},{"text":" error and ","type":"text"},{"type":"codeVoice","code":"retryCount"},{"type":"text","text":" is equal to zero, we will increment the "},{"code":"retryCount","type":"codeVoice"},{"text":" by 1 and call the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/reload()"},{"text":" method, which will attempt to make the request again.","type":"text"}],"type":"paragraph"}],"caption":[]}],"anchor":"Handling-errors-during-the-loading-and-decoding-of-advertisements"},{"anchor":"Observing-the-advertising-events","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Observe the advertising events to respond to them in the application.","type":"text"}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"stepsSection":[{"code":"06-state-event-handling.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s continue with our "},{"code":"AdCellViewModel","type":"codeVoice"},{"text":".","type":"text"}]}],"caption":[],"type":"step","media":null},{"content":[{"inlineContent":[{"text":"The SDK can send many events related to advertisements. It may be useful for you to observe them, for example, for debugging or other purposes. To do this, you can use ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/eventStream","isActive":true,"type":"reference"},{"text":" or ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/eventPublisher"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[],"media":null,"runtimePreview":null,"type":"step","code":"07-state-event-handling.swift"},{"code":"08-state-event-handling.swift","caption":[{"inlineContent":[{"text":"Note: in the case of a tap event, the URL can either represent the URL to which the user was redirected in the browser, or the URL that the SDK processed without the user’s knowledge.","type":"text"}],"type":"paragraph"}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Advertising events in the SDK are represented as the "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEvent","type":"reference","isActive":true},{"type":"text","text":" enum. Let’s add the following logic – if the user tap on the advertisement, we want to find out which URL was associated with this event."}]}],"runtimePreview":null,"media":null},{"caption":[],"runtimePreview":null,"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"In addition, the SDK can observe the percentage of visibility of the advertisement on the screen and send events related to this to the server if it was configured in such a way on the server. This can be useful if you are displaying advertisements in a ","type":"text"},{"type":"codeVoice","code":"List"},{"type":"text","text":". Open the FirstScreen file."}]}],"code":"09-state-event-handling.swift"},{"media":null,"content":[{"inlineContent":[{"text":"Import AdSDKSwiftUI and add the ","type":"text"},{"code":"adsContainer()","type":"codeVoice"},{"type":"text","text":" modifier to your List. This allows the "},{"type":"codeVoice","code":"AdView"},{"type":"text","text":", which is in the hierarchy of the "},{"code":"List","type":"codeVoice"},{"text":", to understand its percentage of visibility on the screen.","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","code":"10-state-event-handling.swift","runtimePreview":null},{"media":null,"code":"11-state-event-handling.swift","type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Now, if your advertisement was configured on the server to track the percentage of visibility on the screen, you can observe "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEvent\/viewable(percentage:url:metadata:)"},{"type":"text","text":" event."}],"type":"paragraph"}],"runtimePreview":null}],"title":"Observing the advertising events"}]},{"action":{"overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"overridingTitle":"Get started","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad","isActive":true,"type":"reference"},"title":"Defining the size of the advertisement","featuredEyebrow":"Tutorial","abstract":[{"type":"text","text":"This tutorial will teach you how to define the size of the advertisement, taking into account the aspect ratio parameter. In it, we will continue the development of the application we started in the previous section."}],"kind":"callToAction"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/adsdkcore\/state-and-event-handling"]},{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/tutorials\/adsdkcore\/state-and-event-handling"]}],"identifier":{"url":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling","interfaceLanguage":"swift"},"metadata":{"categoryPathComponent":"Meet-AdSDK","title":"Handling the state and events of advertising","category":"Meet AdSDK","role":"project"},"references":{"05-state-event-handling.swift":{"syntax":"swift","type":"file","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","    private var retryCount = Int.zero","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() {","        Task {","            for await state in ad.stateStream {","                switch state {","                case .loading, .caching:","                    self.state = .loading","                case .readyToPresent(let metadata):","                    self.state = .ready(ad)","                case .error(let error):","                    guard let error = error as? AdError,","                          case .decoding = error,","                          retryCount == .zero else {","                        return self.state = .error","                    }","","                    retryCount += 1","                    ad.reload()","","                @unknown default: break","                }","            }","        }","    }","}","\/\/ ..."],"identifier":"05-state-event-handling.swift","highlights":[{"line":9},{"line":28},{"line":29},{"line":33},{"line":34}],"fileType":"swift","fileName":"AdCell.swift"},"doc://com.adsdk.core/tutorials/Meet-AdSDK":{"abstract":[{"type":"text","text":"Manage, display, and create your custom advertisements on iOS using cutting-edge technologies such as Combine, Modern Concurrency, and SwiftUI based on the AdSDK."}],"url":"\/tutorials\/meet-adsdk","title":"Meet nextgen AdSDK","role":"overview","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","type":"topic","kind":"overview"},"doc://com.adsdk.core/documentation/AdSDKCore/AdState/readyToPresent(metadata:)":{"title":"AdState.readyToPresent(metadata:)","role":"symbol","kind":"symbol","abstract":[{"text":"Signals that the advertisement is now ready to be displayed for the user.","type":"text"}],"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"readyToPresent","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"metadata"},{"kind":"text","text":": "},{"text":"AdMetadata","kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A8MetadataC"},{"text":")","kind":"text"}],"type":"topic","url":"\/documentation\/adsdkcore\/adstate\/readytopresent(metadata:)","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/readyToPresent(metadata:)"},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling#Handling-errors-during-the-loading-and-decoding-of-advertisements":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Handling-errors-during-the-loading-and-decoding-of-advertisements","url":"\/tutorials\/adsdkcore\/state-and-event-handling#Handling-errors-during-the-loading-and-decoding-of-advertisements","title":"Handling errors during the loading and decoding of advertisements"},"doc://com.adsdk.core/documentation/AdSDKCore/AdError":{"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Type of SDK-related error."}],"title":"AdError","kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"AdError","kind":"identifier"}],"navigatorTitle":[{"text":"AdError","kind":"identifier"}],"url":"\/documentation\/adsdkcore\/aderror"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement":{"kind":"symbol","title":"Advertisement","abstract":[{"text":"A key object interface describing the advertisement.","type":"text"}],"url":"\/documentation\/adsdkcore\/advertisement","navigatorTitle":[{"text":"Advertisement","kind":"identifier"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Advertisement"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"topic"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/statePublisher":{"abstract":[{"text":"Advertisement state publisher.","type":"text"}],"url":"\/documentation\/adsdkcore\/advertisement\/statepublisher","role":"symbol","title":"statePublisher","required":true,"type":"topic","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"statePublisher","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Combine12AnyPublisherV","text":"AnyPublisher","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"AdState","preciseIdentifier":"s:9AdSDKCore0A5StateO","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5NeverO","text":"Never"},{"kind":"text","text":">"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/statePublisher"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads":{"estimatedTime":"20min","kind":"project","role":"project","abstract":[{"text":"This tutorial will guide you in creating a simple app that can load and display a list of advertisement.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads","title":"Create and display inline ads"},"11-state-event-handling.swift":{"syntax":"swift","type":"file","content":["\/\/ ...","private extension AdCellViewModel {","    func observeState() { \/* ... *\/ }","","    func observeEvents() {","        Task {","            for await event in ad.eventStream {","                switch event {","                case let .tap(url, metadata):","                    print(\"The user tapped on the advertisement.\")","                    print(\"SDK processed the following URL: \\(url)\")","","                case let .viewable(percentage, url, metadata):","                    print(\"\\(percentage) percent of the advertisement is visible.\")","                    print(\"SDK processed the following URL: \\(url)\")","","                default: break","                }","            }","        }","    }","}","\/\/ ..."],"identifier":"11-state-event-handling.swift","highlights":[],"fileName":"AdCell.swift","fileType":"swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling#Observing-the-state-of-advertisements":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"title":"Observing the state of advertisements","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-state-of-advertisements","url":"\/tutorials\/adsdkcore\/state-and-event-handling#Observing-the-state-of-advertisements","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Load-And-Cache-Assets":{"estimatedTime":"15min","kind":"project","role":"project","abstract":[{"text":"Last time we created our custom advert, in which we display an image received from the server. This time, we will refactor the code related to loading the image and add caching.","type":"text"}],"title":"Download and cache ad assets in your custom ads","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Load-And-Cache-Assets","url":"\/tutorials\/adsdkcore\/load-and-cache-assets","type":"topic"},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling#Observing-the-advertising-events":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section."}],"type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-advertising-events","url":"\/tutorials\/adsdkcore\/state-and-event-handling#Observing-the-advertising-events","title":"Observing the advertising events"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"title":"Registering a renderer in the SDK","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Registering-a-renderer-in-the-SDK","type":"section"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/reload()":{"abstract":[{"type":"text","text":"Makes a request for advertisement data to the server."}],"required":true,"url":"\/documentation\/adsdkcore\/advertisement\/reload()","title":"reload()","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"reload","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/reload()","type":"topic","kind":"symbol"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/state":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"state"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A5StateO","text":"AdState"}],"role":"symbol","title":"state","required":true,"abstract":[{"type":"text","text":"Current "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState","type":"reference","isActive":true},{"type":"text","text":" of "},{"code":"Advertisement","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/state","url":"\/documentation\/adsdkcore\/advertisement\/state"},"doc://com.adsdk.core/documentation/AdSDKCore/AdState":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AdState","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AdState"}],"role":"symbol","title":"AdState","abstract":[{"type":"text","text":"A representation of the "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference","isActive":true},{"type":"text","text":" life cycle."}],"type":"topic","kind":"symbol","url":"\/documentation\/adsdkcore\/adstate","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState"},"doc://com.adsdk.core/documentation/AdSDKCore/AdState/error(_:)":{"title":"AdState.error(_:)","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Signals that an advertisement lifecycle error has occurred."}],"fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"error","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"text":")","kind":"text"}],"type":"topic","url":"\/documentation\/adsdkcore\/adstate\/error(_:)","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/error(_:)"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-and-Display-Interstitial-Ad#Presenting-interstitial":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application.","type":"text"}],"type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad#Presenting-interstitial","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Presenting-interstitial","title":"Presenting interstitial"},"07-state-event-handling.swift":{"syntax":"swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","    private var retryCount = Int.zero","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() { \/* ... *\/ }","","    func observeEvents() {","        Task {","            for await event in ad.eventStream {","                print(event)","            }","        }","    }","","    \/\/ Combine","    \/*","    func observeEvents() {","        ad.eventPublisher","            .sink { [weak self] event in","                print(event)","            }","            .store(in: &subscriptions)","    }","    *\/","}","\/\/ ..."],"fileType":"swift","identifier":"07-state-event-handling.swift","type":"file","highlights":[{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37}],"fileName":"AdCell.swift"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/eventPublisher":{"title":"eventPublisher","required":true,"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Advertisement event publisher."}],"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"eventPublisher"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Combine12AnyPublisherV","text":"AnyPublisher","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"AdEvent","kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A5EventO"},{"text":", ","kind":"text"},{"text":"Never","kind":"typeIdentifier","preciseIdentifier":"s:s5NeverO"},{"text":">","kind":"text"}],"type":"topic","url":"\/documentation\/adsdkcore\/advertisement\/eventpublisher","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/eventPublisher"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-and-Display-Interstitial-Ad#Interstitial-Ad-Object":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application.","type":"text"}],"type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad#Interstitial-Ad-Object","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Interstitial-Ad-Object","title":"Interstitial Ad Object"},"01-state-event-handling.swift":{"fileName":"AdCell.swift","fileType":"swift","syntax":"swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","","    init(_ ad: Advertisement) {","        self.ad = ad","        state = .ready(ad)","    }","}","\/\/ ..."],"highlights":[],"identifier":"01-state-event-handling.swift","type":"file"},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling":{"estimatedTime":"25min","kind":"project","role":"project","abstract":[{"text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling","url":"\/tutorials\/adsdkcore\/state-and-event-handling","title":"Handling the state and events of advertising"},"doc://com.adsdk.core/documentation/AdSDKCore/AdEvent/viewable(percentage:url:metadata:)":{"abstract":[{"type":"text","text":"Signals that the user has seen an advertisement."}],"kind":"symbol","type":"topic","url":"\/documentation\/adsdkcore\/adevent\/viewable(percentage:url:metadata:)","role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"viewable","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"percentage"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A20VisibilityPercentageO","text":"AdVisibilityPercentage"},{"kind":"text","text":", "},{"text":"url","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"URL","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"metadata"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"AdMetadata","preciseIdentifier":"s:9AdSDKCore0A8MetadataC"},{"kind":"text","text":")"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEvent\/viewable(percentage:url:metadata:)","title":"AdEvent.viewable(percentage:url:metadata:)"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/eventStream":{"url":"\/documentation\/adsdkcore\/advertisement\/eventstream","abstract":[{"type":"text","text":"Advertisement async event stream."}],"title":"eventStream","type":"topic","kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/eventStream","required":true,"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"eventStream"},{"kind":"text","text":": "},{"preciseIdentifier":"s:ScS","text":"AsyncStream","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"AdEvent","preciseIdentifier":"s:9AdSDKCore0A5EventO","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising":{"estimatedTime":"1hr 0min","kind":"project","role":"project","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising","url":"\/tutorials\/adsdkcore\/creating-customised-advertising","title":"Creating customised advertising"},"02-state-event-handling.swift":{"identifier":"02-state-event-handling.swift","fileType":"swift","type":"file","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() {","        Task {","            for await state in ad.stateStream {","                print(state)","            }","        }","    }","","    \/\/ Combine","    \/*","    func observeState() {","        ad.statePublisher","            .sink { [weak self] state in","                guard let self else { return }","","                print(state)","            }","            .store(in: &subscriptions)","    }","    *\/","}","\/\/ ..."],"highlights":[{"line":12},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37}],"fileName":"AdCell.swift","syntax":"swift"},"03-state-event-handling.swift":{"identifier":"03-state-event-handling.swift","fileType":"swift","type":"file","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() {","        Task {","            for await state in ad.stateStream {","                switch state {","                case .loading, .caching:","                    self.state = .loading","                case .readyToPresent(let metadata):","                    self.state = .ready(ad)","                case .error(let error):","                    self.state = .error","","                @unknown default: break","                }","            }","        }","    }","}","\/\/ ..."],"highlights":[],"fileName":"AdCell.swift","syntax":"swift"},"10-state-event-handling.swift":{"fileType":"swift","content":["import SwiftUI","import AdSDKCore","import AdSDKSwiftUI","","struct FirstScreen: View {","    @State var viewModel: FirstScreenViewModel","","    var body: some View {","        List {","            ForEach(viewModel.ads) { ad in","                AdCell(viewModel: ad)","            }","        }","        .listStyle(.plain)","        .clipped()","        .adsContainer()","    }","}","\/\/ ..."],"identifier":"10-state-event-handling.swift","fileName":"FirstScreen.swift","highlights":[{"line":3},{"line":16}],"syntax":"swift","type":"file"},"doc://com.adsdk.core/tutorials/Meet-AdSDK/Extending-the-SDK-with-your-custom-advertisements":{"kind":"article","role":"article","abstract":[],"title":"Extending the SDK with your custom advertisements","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements","url":"\/tutorials\/meet-adsdk\/extending-the-sdk-with-your-custom-advertisements","type":"topic"},"doc://com.adsdk.core/documentation/AdSDKCore/AdRequest":{"abstract":[{"text":"Describes a request to load an advertisement.","type":"text"}],"title":"AdRequest","url":"\/documentation\/adsdkcore\/adrequest","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AdRequest","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","navigatorTitle":[{"kind":"identifier","text":"AdRequest"}],"kind":"symbol"},"09-state-event-handling.swift":{"fileType":"swift","content":["import SwiftUI","import AdSDKCore","","struct FirstScreen: View {","    @State var viewModel: FirstScreenViewModel","","    var body: some View {","        List {","            ForEach(viewModel.ads) { ad in","                AdCell(viewModel: ad)","            }","        }","        .listStyle(.plain)","        .clipped()","    }","}","\/\/ ..."],"fileName":"FirstScreen.swift","identifier":"09-state-event-handling.swift","highlights":[],"type":"file","syntax":"swift"},"doc://com.adsdk.core/documentation/AdSDKCore/AdError/decoding":{"role":"symbol","kind":"symbol","title":"AdError.decoding","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"decoding"}],"url":"\/documentation\/adsdkcore\/aderror\/decoding","type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError\/decoding","abstract":[{"text":"Error related to data decoding.","type":"text"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Load-And-Cache-Assets#Asset-loading-and-caching":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"Last time we created our custom advert, in which we display an image received from the server. This time, we will refactor the code related to loading the image and add caching.","type":"text"}],"title":"Asset loading and caching","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Load-And-Cache-Assets#Asset-loading-and-caching","url":"\/tutorials\/adsdkcore\/load-and-cache-assets#Asset-loading-and-caching","type":"section"},"04-state-event-handling.swift":{"identifier":"04-state-event-handling.swift","fileType":"swift","type":"file","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() {","        Task {","            for await state in ad.stateStream {","                switch state {","                case .loading, .caching:","                    self.state = .loading","                case .readyToPresent(let metadata):","                    self.state = .ready(ad)","                case .error(let error):","                    guard let error = error as? AdError,","                          case .decoding = error else {","                        return self.state = .error","                    }","","                    \/\/ Handle decoding error","","                @unknown default: break","                }","            }","        }","    }","}","\/\/ ..."],"highlights":[{"line":26},{"line":27},{"line":28},{"line":29},{"line":31},{"line":32}],"fileName":"AdCell.swift","syntax":"swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Creating-a-presentation-layer":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"title":"Creating a presentation layer","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-presentation-layer","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Creating-a-presentation-layer","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#First-steps-for-working-with-AdSDK":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial will guide you in creating a simple app that can load and display a list of advertisement.","type":"text"}],"type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#First-steps-for-working-with-AdSDK","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#First-steps-for-working-with-AdSDK","title":"First steps for working with AdSDK"},"doc://com.adsdk.core/documentation/AdSDKCore/AdEvent":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AdEvent","kind":"identifier"}],"navigatorTitle":[{"text":"AdEvent","kind":"identifier"}],"role":"symbol","title":"AdEvent","type":"topic","abstract":[{"text":"A representation of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" events."}],"kind":"symbol","url":"\/documentation\/adsdkcore\/adevent","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEvent"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Creating-a-business-layer":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"title":"Creating a business layer","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-business-layer","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Creating-a-business-layer","type":"section"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/stateStream":{"url":"\/documentation\/adsdkcore\/advertisement\/statestream","abstract":[{"type":"text","text":"Advertisement async state stream."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/stateStream","title":"stateStream","required":true,"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"stateStream","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:ScS","kind":"typeIdentifier","text":"AsyncStream"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore0A5StateO","text":"AdState","kind":"typeIdentifier"},{"kind":"text","text":">"}]},"doc://com.adsdk.core/tutorials/Meet-AdSDK/Working-with-the-built-in-capabilities-of-the-SDK":{"kind":"article","role":"article","abstract":[],"title":"Working with the built-in capabilities of the SDK","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK","url":"\/tutorials\/meet-adsdk\/working-with-the-built-in-capabilities-of-the-sdk","type":"topic"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-and-Display-Interstitial-Ad":{"estimatedTime":"15min","kind":"project","role":"project","abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}],"title":"Create and display interstitial ad","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad","type":"topic"},"doc://com.adsdk.core/documentation/AdSDKCore/AdState/caching":{"title":"AdState.caching","role":"symbol","kind":"symbol","abstract":[{"text":"Signals that the advertisement assets are currently being cached.","type":"text"}],"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"caching"}],"type":"topic","url":"\/documentation\/adsdkcore\/adstate\/caching","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/caching"},"doc://com.adsdk.core/tutorials/AdSDKCore/Defining-Size-Of-Ad":{"estimatedTime":"15min","kind":"project","role":"project","abstract":[{"text":"This tutorial will teach you how to define the size of the advertisement, taking into account the aspect ratio parameter. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad","url":"\/tutorials\/adsdkcore\/defining-size-of-ad","title":"Defining the size of the advertisement"},"08-state-event-handling.swift":{"identifier":"08-state-event-handling.swift","fileType":"swift","type":"file","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","    private var retryCount = Int.zero","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() { \/* ... *\/ }","","    func observeEvents() {","        Task {","            for await event in ad.eventStream {","                switch event {","                case let .tap(url, metadata):","                    print(\"The user tapped on the advertisement.\")","                    print(\"SDK processed the following URL: \\(url)\")","","                default: break","                }","            }","        }","    }","}","\/\/ ..."],"highlights":[{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29}],"fileName":"AdCell.swift","syntax":"swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#State-and-event-management":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"title":"State and event management","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#State-and-event-management","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#State-and-event-management","type":"section"},"doc://com.adsdk.core/documentation/AdSDKCore/AdState/loading":{"title":"AdState.loading","role":"symbol","kind":"symbol","abstract":[{"text":"Signals that the advertisement data is currently being loaded from the server.","type":"text"}],"fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"loading"}],"type":"topic","url":"\/documentation\/adsdkcore\/adstate\/loading","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/loading"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Loading-and-displaying-advertisements":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial will guide you in creating a simple app that can load and display a list of advertisement.","type":"text"}],"title":"Loading and displaying advertisements","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Loading-and-displaying-advertisements","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Loading-and-displaying-advertisements","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Defining-Size-Of-Ad#Defining-the-size-of-the-advertisement":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial will teach you how to define the size of the advertisement, taking into account the aspect ratio parameter. In it, we will continue the development of the application we started in the previous section."}],"title":"Defining the size of the advertisement","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad#Defining-the-size-of-the-advertisement","url":"\/tutorials\/adsdkcore\/defining-size-of-ad#Defining-the-size-of-the-advertisement","type":"section"},"06-state-event-handling.swift":{"fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","    private var retryCount = Int.zero","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() { \/* ... *\/ }","}","\/\/ ..."],"identifier":"06-state-event-handling.swift","fileName":"AdCell.swift","highlights":[],"syntax":"swift","type":"file"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-AdRequest-Parameters#Modifying-global-parameters":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"We already know how to create an "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true},{"type":"text","text":". However, an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest"},{"type":"text","text":" can have additional parameters beyond those you pass during initialization. These additional parameters are global for all "},{"type":"codeVoice","code":"AdRequests"},{"type":"text","text":". The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true,"type":"reference"},{"type":"text","text":"."}],"title":"Modifying global parameters","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters#Modifying-global-parameters","url":"\/tutorials\/adsdkcore\/global-adrequest-parameters#Modifying-global-parameters","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-AdRequest-Parameters":{"estimatedTime":"10min","kind":"project","role":"project","abstract":[{"text":"We already know how to create an ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true,"type":"reference"},{"text":". However, an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest"},{"text":" can have additional parameters beyond those you pass during initialization. These additional parameters are global for all ","type":"text"},{"type":"codeVoice","code":"AdRequests"},{"type":"text","text":". The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true},{"type":"text","text":"."}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters","url":"\/tutorials\/adsdkcore\/global-adrequest-parameters","title":"Global AdRequest parameters"}},"variantOverrides":[{"traits":[{"interfaceLanguage":"occ"}],"patch":[{"value":"occ","path":"\/identifier\/interfaceLanguage","op":"replace"}]}]}