{"metadata":{"category":"Meet AdSDK","title":"Handling the state and events of advertising","categoryPathComponent":"Meet-AdSDK","role":"project"},"kind":"project","sections":[{"content":[{"inlineContent":[{"text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"type":"paragraph"}],"chapter":"Working with the built-in capabilities of the SDK","title":"Handling the state and events of advertising","kind":"hero","estimatedTimeInMinutes":25},{"tasks":[{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Observe the state of advertisements to react appropriately within the application."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Observing the state of advertisements","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Let’s go back to the AdCell file.","type":"text"}]}],"runtimePreview":null,"caption":[{"inlineContent":[{"text":"As you may remember, our implementation is not entirely correct because we send the ","type":"text"},{"type":"codeVoice","code":"ready"},{"text":" state and pass ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference","isActive":true},{"type":"text","text":" to "},{"type":"codeVoice","code":"AdView"},{"type":"text","text":" without checking whether the advertising content has been loaded."}],"type":"paragraph"}],"type":"step","code":"01-state-event-handling.swift","media":null},{"media":null,"code":"02-state-event-handling.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"To access the current state of the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":", you can use the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/state"},{"type":"text","text":" property. However, in our case, we want to observe changes in this state. For this purpose, you can use "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/stateStream","isActive":true},{"text":" or ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/statePublisher"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"text":"The state of the advertisement is represented through the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState"},{"type":"text","text":" enum. Thanks to this, we can understand at which stage of the loading process our advertisement currently is."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The next step is to respond to changes in the advertisement state in our ","type":"text"},{"type":"codeVoice","code":"AdCellViewModel"},{"type":"text","text":". If the advertisement is in the "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/loading","isActive":true},{"type":"text","text":" or "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/caching","isActive":true,"type":"reference"},{"text":" stage, we want to display the ","type":"text"},{"type":"codeVoice","code":"loading"},{"text":" state of the advertisement. If the advertisement is ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/readyToPresent(metadata:)","isActive":true,"type":"reference"},{"text":", we want to send a signal to display the ","type":"text"},{"type":"codeVoice","code":"AdView"},{"type":"text","text":". If the advertisement encounters an "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/error(_:)","isActive":true},{"type":"text","text":" during loading or decoding, we send an error state to our "},{"type":"codeVoice","code":"AdCell"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null,"code":"03-state-event-handling.swift"}],"anchor":"Observing-the-state-of-advertisements"},{"stepsSection":[{"content":[{"inlineContent":[{"type":"text","text":"Let’s continue with our "},{"type":"codeVoice","code":"observeState()"},{"type":"text","text":" method."}],"type":"paragraph"}],"caption":[],"type":"step","code":"03-state-event-handling.swift","runtimePreview":null,"media":null},{"code":"04-state-event-handling.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"First, we need to understand if the error is related to decoding. If you are not using custom native renderers, the type of error you can get from the SDK will always be "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError"},{"type":"text","text":". Thanks to it, you can find out the reason of the error."}]}],"type":"step","media":null,"caption":[],"runtimePreview":null},{"media":null,"caption":[],"runtimePreview":null,"code":"05-state-event-handling.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Now let’s add a ","type":"text"},{"code":"retryCount","type":"codeVoice"},{"type":"text","text":" property, which will keep track of how many times we have attempted to reload the advertisement. If we receive a "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError\/decoding","type":"reference","isActive":true},{"type":"text","text":" error and "},{"code":"retryCount","type":"codeVoice"},{"type":"text","text":" is equal to zero, we will increment the "},{"code":"retryCount","type":"codeVoice"},{"text":" by 1 and call the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/reload()"},{"type":"text","text":" method, which will attempt to make the request again."}]}],"type":"step"}],"title":"Handling errors during the loading and decoding of advertisements","contentSection":[{"content":[{"inlineContent":[{"text":"You can handle errors as you see fit. In our application we will implement it in a way that when an error related to decoding is encountered, the advertisement will attempt to reload the content, and only after a second error is received, it will be displayed on the screen.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Handling-errors-during-the-loading-and-decoding-of-advertisements"},{"title":"Observing the advertising events","anchor":"Observing-the-advertising-events","stepsSection":[{"type":"step","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Let’s continue with our ","type":"text"},{"type":"codeVoice","code":"AdCellViewModel"},{"text":".","type":"text"}]}],"code":"06-state-event-handling.swift","runtimePreview":null},{"caption":[],"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"The SDK can send many events related to advertisements. It may be useful for you to observe them, for example, for debugging or other purposes. To do this, you can use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/eventStream","type":"reference"},{"type":"text","text":" or "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/eventPublisher","type":"reference","isActive":true},{"text":".","type":"text"}]}],"runtimePreview":null,"code":"07-state-event-handling.swift"},{"media":null,"code":"08-state-event-handling.swift","type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: in the case of a tap event, the URL can either represent the URL to which the user was redirected in the browser, or the URL that the SDK processed without the user’s knowledge."}]}],"content":[{"inlineContent":[{"type":"text","text":"Advertising events in the SDK are represented as the "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEvent","isActive":true},{"type":"text","text":" enum. Let’s add the following logic – if the user tap on the advertisement, we want to find out which URL was associated with this event."}],"type":"paragraph"}],"runtimePreview":null},{"code":"09-state-event-handling.swift","type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"In addition, the SDK can observe the percentage of visibility of the advertisement on the screen and send events related to this to the server if it was configured in such a way on the server. This can be useful if you are displaying advertisements in a "},{"type":"codeVoice","code":"List"},{"type":"text","text":". Open the FirstScreen file."}],"type":"paragraph"}],"runtimePreview":null,"media":null},{"code":"10-state-event-handling.swift","media":null,"caption":[],"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Import AdSDKSwiftUI and add the ","type":"text"},{"code":"adsContainer()","type":"codeVoice"},{"type":"text","text":" modifier to your List. This allows the "},{"type":"codeVoice","code":"AdView"},{"text":", which is in the hierarchy of the ","type":"text"},{"code":"List","type":"codeVoice"},{"type":"text","text":", to understand its percentage of visibility on the screen."}]}]},{"type":"step","code":"11-state-event-handling.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, if your advertisement was configured on the server to track the percentage of visibility on the screen, you can observe "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEvent\/viewable(percentage:url:metadata:)"},{"type":"text","text":" event."}]}],"media":null,"runtimePreview":null,"caption":[]}],"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Observe the advertising events to respond to them in the application."}],"type":"paragraph"}],"mediaPosition":"trailing"}]}],"kind":"tasks"},{"title":"Defining the size of the advertisement","kind":"callToAction","featuredEyebrow":"Tutorial","abstract":[{"text":"This tutorial will teach you how to define the size of the advertisement, taking into account the aspect ratio parameter. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"action":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad","overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"isActive":true,"type":"reference"}}],"identifier":{"url":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling","interfaceLanguage":"swift"},"hierarchy":{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","modules":[{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#First-steps-for-working-with-AdSDK"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Loading-and-displaying-advertisements"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads"},{"sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-state-of-advertisements","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Handling-errors-during-the-loading-and-decoding-of-advertisements","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-advertising-events","kind":"task"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling"},{"sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad#Defining-the-size-of-the-advertisement"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad#Interstitial-Ad-Object"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad#Presenting-interstitial","kind":"task"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters#Modifying-global-parameters","kind":"task"}]}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements","projects":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-business-layer"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#State-and-event-management","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-presentation-layer","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK","kind":"task"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Load-And-Cache-Assets","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Load-And-Cache-Assets#Asset-loading-and-caching","kind":"task"}]}]}],"paths":[["doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/$volume","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/tutorials\/adsdkcore\/state-and-event-handling"],"traits":[{"interfaceLanguage":"swift"}]},{"paths":["\/tutorials\/adsdkcore\/state-and-event-handling"],"traits":[{"interfaceLanguage":"occ"}]}],"references":{"03-state-event-handling.swift":{"identifier":"03-state-event-handling.swift","type":"file","highlights":[],"fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() {","        Task {","            for await state in ad.stateStream {","                switch state {","                case .loading, .caching:","                    self.state = .loading","                case .readyToPresent(let metadata):","                    self.state = .ready(ad)","                case .error(let error):","                    self.state = .error","","                @unknown default: break","                }","            }","        }","    }","}","\/\/ ..."],"syntax":"swift","fileName":"AdCell.swift"},"04-state-event-handling.swift":{"identifier":"04-state-event-handling.swift","type":"file","highlights":[{"line":26},{"line":27},{"line":28},{"line":29},{"line":31},{"line":32}],"fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() {","        Task {","            for await state in ad.stateStream {","                switch state {","                case .loading, .caching:","                    self.state = .loading","                case .readyToPresent(let metadata):","                    self.state = .ready(ad)","                case .error(let error):","                    guard let error = error as? AdError,","                          case .decoding = error else {","                        return self.state = .error","                    }","","                    \/\/ Handle decoding error","","                @unknown default: break","                }","            }","        }","    }","}","\/\/ ..."],"syntax":"swift","fileName":"AdCell.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-and-Display-Interstitial-Ad#Presenting-interstitial":{"url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Presenting-interstitial","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad#Presenting-interstitial","type":"section","title":"Presenting interstitial","kind":"section","abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}],"role":"pseudoSymbol"},"doc://com.adsdk.core/documentation/AdSDKCore/AdError/decoding":{"url":"\/documentation\/adsdkcore\/aderror\/decoding","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError\/decoding","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decoding"}],"type":"topic","title":"AdError.decoding","abstract":[{"type":"text","text":"Error related to data decoding."}],"kind":"symbol","role":"symbol"},"doc://com.adsdk.core/documentation/AdSDKCore/AdError":{"role":"symbol","type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdError","navigatorTitle":[{"text":"AdError","kind":"identifier"}],"abstract":[{"type":"text","text":"Type of SDK-related error."}],"url":"\/documentation\/adsdkcore\/aderror","title":"AdError","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AdError"}]},"05-state-event-handling.swift":{"identifier":"05-state-event-handling.swift","type":"file","highlights":[{"line":9},{"line":28},{"line":29},{"line":33},{"line":34}],"fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","    private var retryCount = Int.zero","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() {","        Task {","            for await state in ad.stateStream {","                switch state {","                case .loading, .caching:","                    self.state = .loading","                case .readyToPresent(let metadata):","                    self.state = .ready(ad)","                case .error(let error):","                    guard let error = error as? AdError,","                          case .decoding = error,","                          retryCount == .zero else {","                        return self.state = .error","                    }","","                    retryCount += 1","                    ad.reload()","","                @unknown default: break","                }","            }","        }","    }","}","\/\/ ..."],"syntax":"swift","fileName":"AdCell.swift"},"06-state-event-handling.swift":{"identifier":"06-state-event-handling.swift","type":"file","highlights":[],"fileType":"swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","    private var retryCount = Int.zero","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() { \/* ... *\/ }","}","\/\/ ..."],"syntax":"swift","fileName":"AdCell.swift"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/state":{"url":"\/documentation\/adsdkcore\/advertisement\/state","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/state","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"state"},{"kind":"text","text":": "},{"text":"AdState","preciseIdentifier":"s:9AdSDKCore0A5StateO","kind":"typeIdentifier"}],"type":"topic","required":true,"title":"state","kind":"symbol","abstract":[{"type":"text","text":"Current "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState","isActive":true},{"type":"text","text":" of "},{"type":"codeVoice","code":"Advertisement"},{"type":"text","text":"."}],"role":"symbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-and-Display-Interstitial-Ad":{"url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad","estimatedTime":"15min","type":"topic","title":"Create and display interstitial ad","abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}],"kind":"project","role":"project"},"doc://com.adsdk.core/documentation/AdSDKCore/AdEvent":{"abstract":[{"type":"text","text":"A representation of the "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"text":" events.","type":"text"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AdEvent","kind":"identifier"}],"url":"\/documentation\/adsdkcore\/adevent","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEvent","type":"topic","navigatorTitle":[{"text":"AdEvent","kind":"identifier"}],"title":"AdEvent","role":"symbol","kind":"symbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-and-Display-Interstitial-Ad#Interstitial-Ad-Object":{"url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Interstitial-Ad-Object","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad#Interstitial-Ad-Object","type":"section","title":"Interstitial Ad Object","kind":"section","abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}],"role":"pseudoSymbol"},"doc://com.adsdk.core/tutorials/Meet-AdSDK/Working-with-the-built-in-capabilities-of-the-SDK":{"url":"\/tutorials\/meet-adsdk\/working-with-the-built-in-capabilities-of-the-sdk","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK","type":"topic","title":"Working with the built-in capabilities of the SDK","abstract":[],"kind":"article","role":"article"},"doc://com.adsdk.core/documentation/AdSDKCore/AdState/readyToPresent(metadata:)":{"fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"readyToPresent","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"metadata"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore0A8MetadataC","kind":"typeIdentifier","text":"AdMetadata"},{"kind":"text","text":")"}],"title":"AdState.readyToPresent(metadata:)","kind":"symbol","url":"\/documentation\/adsdkcore\/adstate\/readytopresent(metadata:)","abstract":[{"text":"Signals that the advertisement is now ready to be displayed for the user.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/readyToPresent(metadata:)","role":"symbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling#Observing-the-state-of-advertisements":{"role":"pseudoSymbol","title":"Observing the state of advertisements","type":"section","kind":"section","url":"\/tutorials\/adsdkcore\/state-and-event-handling#Observing-the-state-of-advertisements","abstract":[{"type":"text","text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-state-of-advertisements"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/statePublisher":{"role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"statePublisher"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Combine12AnyPublisherV","text":"AnyPublisher","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"AdState","kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A5StateO"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Never","preciseIdentifier":"s:s5NeverO"},{"text":">","kind":"text"}],"title":"statePublisher","kind":"symbol","url":"\/documentation\/adsdkcore\/advertisement\/statepublisher","abstract":[{"text":"Advertisement state publisher.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/statePublisher","required":true},"doc://com.adsdk.core/tutorials/Meet-AdSDK":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","abstract":[{"type":"text","text":"Manage, display, and create your custom advertisements on iOS using cutting-edge technologies such as Combine, Modern Concurrency, and SwiftUI based on the AdSDK."}],"url":"\/tutorials\/meet-adsdk","title":"Meet nextgen AdSDK","type":"topic","kind":"overview","role":"overview"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads":{"role":"project","title":"Create and display inline ads","kind":"project","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads","type":"topic","estimatedTime":"20min","abstract":[{"type":"text","text":"This tutorial will guide you in creating a simple app that can load and display a list of advertisement."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement":{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","abstract":[{"type":"text","text":"A key object interface describing the advertisement."}],"url":"\/documentation\/adsdkcore\/advertisement","title":"Advertisement","type":"topic","kind":"symbol","navigatorTitle":[{"text":"Advertisement","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Advertisement"}],"role":"symbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Load-And-Cache-Assets#Asset-loading-and-caching":{"role":"pseudoSymbol","title":"Asset loading and caching","type":"section","kind":"section","url":"\/tutorials\/adsdkcore\/load-and-cache-assets#Asset-loading-and-caching","abstract":[{"type":"text","text":"Last time we created our custom advert, in which we display an image received from the server. This time, we will refactor the code related to loading the image and add caching."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Load-And-Cache-Assets#Asset-loading-and-caching"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-AdRequest-Parameters":{"role":"project","title":"Global AdRequest parameters","kind":"project","url":"\/tutorials\/adsdkcore\/global-adrequest-parameters","type":"topic","estimatedTime":"10min","abstract":[{"type":"text","text":"We already know how to create an "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true},{"type":"text","text":". However, an "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true},{"type":"text","text":" can have additional parameters beyond those you pass during initialization. These additional parameters are global for all "},{"code":"AdRequests","type":"codeVoice"},{"text":". The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","type":"reference"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters"},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling#Handling-errors-during-the-loading-and-decoding-of-advertisements":{"role":"pseudoSymbol","title":"Handling errors during the loading and decoding of advertisements","type":"section","kind":"section","url":"\/tutorials\/adsdkcore\/state-and-event-handling#Handling-errors-during-the-loading-and-decoding-of-advertisements","abstract":[{"type":"text","text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Handling-errors-during-the-loading-and-decoding-of-advertisements"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK":{"role":"pseudoSymbol","title":"Registering a renderer in the SDK","kind":"section","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Registering-a-renderer-in-the-SDK","type":"section","abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Loading-and-displaying-advertisements":{"role":"pseudoSymbol","title":"Loading and displaying advertisements","type":"section","kind":"section","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Loading-and-displaying-advertisements","abstract":[{"type":"text","text":"This tutorial will guide you in creating a simple app that can load and display a list of advertisement."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Loading-and-displaying-advertisements"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/reload()":{"role":"symbol","required":true,"title":"reload()","kind":"symbol","url":"\/documentation\/adsdkcore\/advertisement\/reload()","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reload"},{"text":"()","kind":"text"}],"abstract":[{"type":"text","text":"Makes a request for advertisement data to the server."}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/reload()"},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling":{"role":"project","title":"Handling the state and events of advertising","type":"topic","kind":"project","url":"\/tutorials\/adsdkcore\/state-and-event-handling","estimatedTime":"25min","abstract":[{"type":"text","text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#State-and-event-management":{"role":"pseudoSymbol","title":"State and event management","kind":"section","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#State-and-event-management","type":"section","abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#State-and-event-management"},"doc://com.adsdk.core/tutorials/AdSDKCore/Defining-Size-Of-Ad":{"role":"project","title":"Defining the size of the advertisement","type":"topic","kind":"project","url":"\/tutorials\/adsdkcore\/defining-size-of-ad","estimatedTime":"15min","abstract":[{"type":"text","text":"This tutorial will teach you how to define the size of the advertisement, taking into account the aspect ratio parameter. In it, we will continue the development of the application we started in the previous section."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad"},"doc://com.adsdk.core/tutorials/Meet-AdSDK/Extending-the-SDK-with-your-custom-advertisements":{"role":"article","title":"Extending the SDK with your custom advertisements","kind":"article","url":"\/tutorials\/meet-adsdk\/extending-the-sdk-with-your-custom-advertisements","type":"topic","abstract":[],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-AdRequest-Parameters#Modifying-global-parameters":{"kind":"section","role":"pseudoSymbol","type":"section","title":"Modifying global parameters","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters#Modifying-global-parameters","abstract":[{"type":"text","text":"We already know how to create an "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true,"type":"reference"},{"text":". However, an ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true,"type":"reference"},{"type":"text","text":" can have additional parameters beyond those you pass during initialization. These additional parameters are global for all "},{"code":"AdRequests","type":"codeVoice"},{"text":". The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true},{"text":".","type":"text"}],"url":"\/tutorials\/adsdkcore\/global-adrequest-parameters#Modifying-global-parameters"},"doc://com.adsdk.core/tutorials/AdSDKCore/Load-And-Cache-Assets":{"type":"topic","url":"\/tutorials\/adsdkcore\/load-and-cache-assets","estimatedTime":"15min","role":"project","abstract":[{"text":"Last time we created our custom advert, in which we display an image received from the server. This time, we will refactor the code related to loading the image and add caching.","type":"text"}],"title":"Download and cache ad assets in your custom ads","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Load-And-Cache-Assets","kind":"project"},"08-state-event-handling.swift":{"fileType":"swift","identifier":"08-state-event-handling.swift","syntax":"swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","    private var retryCount = Int.zero","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() { \/* ... *\/ }","","    func observeEvents() {","        Task {","            for await event in ad.eventStream {","                switch event {","                case let .tap(url, metadata):","                    print(\"The user tapped on the advertisement.\")","                    print(\"SDK processed the following URL: \\(url)\")","","                default: break","                }","            }","        }","    }","}","\/\/ ..."],"highlights":[{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29}],"fileName":"AdCell.swift","type":"file"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#First-steps-for-working-with-AdSDK":{"kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#First-steps-for-working-with-AdSDK","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#First-steps-for-working-with-AdSDK","abstract":[{"text":"This tutorial will guide you in creating a simple app that can load and display a list of advertisement.","type":"text"}],"role":"pseudoSymbol","title":"First steps for working with AdSDK","type":"section"},"doc://com.adsdk.core/documentation/AdSDKCore/AdEvent/viewable(percentage:url:metadata:)":{"fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"viewable","kind":"identifier"},{"kind":"text","text":"("},{"text":"percentage","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AdVisibilityPercentage","kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A20VisibilityPercentageO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"url"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10Foundation3URLV","kind":"typeIdentifier","text":"URL"},{"kind":"text","text":", "},{"kind":"externalParam","text":"metadata"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9AdSDKCore0A8MetadataC","text":"AdMetadata","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdEvent\/viewable(percentage:url:metadata:)","url":"\/documentation\/adsdkcore\/adevent\/viewable(percentage:url:metadata:)","abstract":[{"text":"Signals that the user has seen an advertisement.","type":"text"}],"role":"symbol","title":"AdEvent.viewable(percentage:url:metadata:)","type":"topic"},"07-state-event-handling.swift":{"fileType":"swift","syntax":"swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","    private var retryCount = Int.zero","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() { \/* ... *\/ }","","    func observeEvents() {","        Task {","            for await event in ad.eventStream {","                print(event)","            }","        }","    }","","    \/\/ Combine","    \/*","    func observeEvents() {","        ad.eventPublisher","            .sink { [weak self] event in","                print(event)","            }","            .store(in: &subscriptions)","    }","    *\/","}","\/\/ ..."],"identifier":"07-state-event-handling.swift","highlights":[{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37}],"fileName":"AdCell.swift","type":"file"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Creating-a-presentation-layer":{"kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-presentation-layer","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Creating-a-presentation-layer","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"role":"pseudoSymbol","title":"Creating a presentation layer","type":"section"},"01-state-event-handling.swift":{"fileType":"swift","syntax":"swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","","    init(_ ad: Advertisement) {","        self.ad = ad","        state = .ready(ad)","    }","}","\/\/ ..."],"identifier":"01-state-event-handling.swift","highlights":[],"fileName":"AdCell.swift","type":"file"},"doc://com.adsdk.core/documentation/AdSDKCore/AdState/error(_:)":{"fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"error"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":")"}],"kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/error(_:)","url":"\/documentation\/adsdkcore\/adstate\/error(_:)","abstract":[{"text":"Signals that an advertisement lifecycle error has occurred.","type":"text"}],"role":"symbol","title":"AdState.error(_:)","type":"topic"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising":{"kind":"project","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising","url":"\/tutorials\/adsdkcore\/creating-customised-advertising","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"role":"project","estimatedTime":"1hr 0min","title":"Creating customised advertising","type":"topic"},"doc://com.adsdk.core/documentation/AdSDKCore/AdState/caching":{"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"caching"}],"kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/caching","url":"\/documentation\/adsdkcore\/adstate\/caching","abstract":[{"text":"Signals that the advertisement assets are currently being cached.","type":"text"}],"role":"symbol","title":"AdState.caching","type":"topic"},"10-state-event-handling.swift":{"fileType":"swift","syntax":"swift","content":["import SwiftUI","import AdSDKCore","import AdSDKSwiftUI","","struct FirstScreen: View {","    @State var viewModel: FirstScreenViewModel","","    var body: some View {","        List {","            ForEach(viewModel.ads) { ad in","                AdCell(viewModel: ad)","            }","        }","        .listStyle(.plain)","        .clipped()","        .adsContainer()","    }","}","\/\/ ..."],"identifier":"10-state-event-handling.swift","highlights":[{"line":3},{"line":16}],"fileName":"FirstScreen.swift","type":"file"},"11-state-event-handling.swift":{"fileType":"swift","identifier":"11-state-event-handling.swift","syntax":"swift","content":["\/\/ ...","private extension AdCellViewModel {","    func observeState() { \/* ... *\/ }","","    func observeEvents() {","        Task {","            for await event in ad.eventStream {","                switch event {","                case let .tap(url, metadata):","                    print(\"The user tapped on the advertisement.\")","                    print(\"SDK processed the following URL: \\(url)\")","","                case let .viewable(percentage, url, metadata):","                    print(\"\\(percentage) percent of the advertisement is visible.\")","                    print(\"SDK processed the following URL: \\(url)\")","","                default: break","                }","            }","        }","    }","}","\/\/ ..."],"highlights":[],"fileName":"AdCell.swift","type":"file"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Creating-a-business-layer":{"kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-business-layer","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Creating-a-business-layer","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"role":"pseudoSymbol","title":"Creating a business layer","type":"section"},"02-state-event-handling.swift":{"fileType":"swift","identifier":"02-state-event-handling.swift","syntax":"swift","content":["\/\/ ...","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","","    init(_ ad: Advertisement) {","        self.ad = ad","        observeState()","    }","}","","private extension AdCellViewModel {","    func observeState() {","        Task {","            for await state in ad.stateStream {","                print(state)","            }","        }","    }","","    \/\/ Combine","    \/*","    func observeState() {","        ad.statePublisher","            .sink { [weak self] state in","                guard let self else { return }","","                print(state)","            }","            .store(in: &subscriptions)","    }","    *\/","}","\/\/ ..."],"highlights":[{"line":12},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37}],"fileName":"AdCell.swift","type":"file"},"doc://com.adsdk.core/documentation/AdSDKCore/AdState/loading":{"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"loading"}],"kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState\/loading","url":"\/documentation\/adsdkcore\/adstate\/loading","abstract":[{"text":"Signals that the advertisement data is currently being loaded from the server.","type":"text"}],"role":"symbol","title":"AdState.loading","type":"topic"},"09-state-event-handling.swift":{"fileType":"swift","identifier":"09-state-event-handling.swift","syntax":"swift","content":["import SwiftUI","import AdSDKCore","","struct FirstScreen: View {","    @State var viewModel: FirstScreenViewModel","","    var body: some View {","        List {","            ForEach(viewModel.ads) { ad in","                AdCell(viewModel: ad)","            }","        }","        .listStyle(.plain)","        .clipped()","    }","}","\/\/ ..."],"highlights":[],"fileName":"FirstScreen.swift","type":"file"},"doc://com.adsdk.core/documentation/AdSDKCore/AdState":{"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AdState"}],"url":"\/documentation\/adsdkcore\/adstate","role":"symbol","navigatorTitle":[{"text":"AdState","kind":"identifier"}],"abstract":[{"text":"A representation of the ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"type":"text","text":" life cycle."}],"title":"AdState","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdState","kind":"symbol"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/stateStream":{"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"stateStream"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:ScS","kind":"typeIdentifier","text":"AsyncStream"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:9AdSDKCore0A5StateO","text":"AdState","kind":"typeIdentifier"},{"kind":"text","text":">"}],"title":"stateStream","kind":"symbol","url":"\/documentation\/adsdkcore\/advertisement\/statestream","abstract":[{"text":"Advertisement async state stream.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/stateStream","required":true},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling#Observing-the-advertising-events":{"kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-advertising-events","url":"\/tutorials\/adsdkcore\/state-and-event-handling#Observing-the-advertising-events","abstract":[{"text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"role":"pseudoSymbol","title":"Observing the advertising events","type":"section"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/eventPublisher":{"abstract":[{"type":"text","text":"Advertisement event publisher."}],"url":"\/documentation\/adsdkcore\/advertisement\/eventpublisher","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/eventPublisher","type":"topic","required":true,"kind":"symbol","title":"eventPublisher","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"eventPublisher"},{"kind":"text","text":": "},{"text":"AnyPublisher","kind":"typeIdentifier","preciseIdentifier":"s:7Combine12AnyPublisherV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"AdEvent","preciseIdentifier":"s:9AdSDKCore0A5EventO"},{"text":", ","kind":"text"},{"text":"Never","kind":"typeIdentifier","preciseIdentifier":"s:s5NeverO"},{"text":">","kind":"text"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Defining-Size-Of-Ad#Defining-the-size-of-the-advertisement":{"kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad#Defining-the-size-of-the-advertisement","url":"\/tutorials\/adsdkcore\/defining-size-of-ad#Defining-the-size-of-the-advertisement","abstract":[{"text":"This tutorial will teach you how to define the size of the advertisement, taking into account the aspect ratio parameter. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"role":"pseudoSymbol","title":"Defining the size of the advertisement","type":"section"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/eventStream":{"role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"eventStream","kind":"identifier"},{"text":": ","kind":"text"},{"text":"AsyncStream","preciseIdentifier":"s:ScS","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"AdEvent","kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A5EventO"},{"text":">","kind":"text"}],"title":"eventStream","kind":"symbol","url":"\/documentation\/adsdkcore\/advertisement\/eventstream","abstract":[{"type":"text","text":"Advertisement async event stream."}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/eventStream","required":true},"doc://com.adsdk.core/documentation/AdSDKCore/AdRequest":{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","abstract":[{"type":"text","text":"Describes a request to load an advertisement."}],"url":"\/documentation\/adsdkcore\/adrequest","title":"AdRequest","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AdRequest"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AdRequest","kind":"identifier"}],"role":"symbol"}},"variantOverrides":[{"traits":[{"interfaceLanguage":"occ"}],"patch":[{"path":"\/identifier\/interfaceLanguage","op":"replace","value":"occ"}]}]}