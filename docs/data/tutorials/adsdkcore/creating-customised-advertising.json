{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/adsdkcore\/creating-customised-advertising"]},{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/tutorials\/adsdkcore\/creating-customised-advertising"]}],"identifier":{"url":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"chapter":"Extending the SDK with your custom advertisements","content":[{"inlineContent":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Your server should already be configured to send the response you expect to receive for displaying your ad.","type":"text"}]}],"estimatedTimeInMinutes":60,"kind":"hero","title":"Creating customised advertising"},{"tasks":[{"stepsSection":[{"code":"01-creating-customised-ad.json","type":"step","media":null,"runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"In a real project, you can make any kind of advertising - video, images layout, etc. To simplify this tutorial, let’s imagine that our server is already configured to send a response like that."}],"type":"paragraph"}]},{"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"At this stage, you will not be able to compile the project until we have fully satisfied all the requirements of the protocol."}]}],"media":null,"code":"02-creating-customised-ad.swift","content":[{"inlineContent":[{"type":"text","text":"First of all, let’s create a new file in our project and name it "},{"type":"codeVoice","code":"MyCustomAd"},{"type":"text","text":". Import the "},{"type":"codeVoice","code":"AdSDKCore"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Combine"},{"type":"text","text":" into it, add an empty class and subscribe to the "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController","isActive":true,"type":"reference"},{"text":" protocol. You can think of this class as a future ViewModel element from the MVVM architectural pattern.","type":"text"}],"type":"paragraph"}],"type":"step"},{"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"For now, you can ignore the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRepository","isActive":true},{"type":"text","text":", we will look at it later."}]}],"code":"03-creating-customised-ad.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Now let’s create an ","type":"text"},{"code":"init","type":"codeVoice"},{"text":" for our class. The protocol requires you to create an initialiser with an ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRepository","isActive":true},{"type":"text","text":" object that will be called inside the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":" when receiving data from the server.","type":"text"}]}],"type":"step"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Let’s add the mandatory ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController\/update(_:_:)","type":"reference"},{"type":"text","text":" method. It will be called every time your ad is loaded or reloaded. It receives "},{"type":"codeVoice","code":"Data"},{"text":", which is a response from the server from which we can get our future image, and ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdMetadata","isActive":true},{"text":".","type":"text"}]}],"code":"04-creating-customised-ad.swift","runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"For now, you can ignore the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdMetadata"},{"type":"text","text":", we will look at it later."}],"type":"paragraph"}],"media":null},{"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"You don’t have to use ","type":"text"},{"code":"Combine","type":"codeVoice"},{"type":"text","text":" here, but we’ve chosen it for the sake of brevity."}]}],"media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"The last step of the business logic is to decode the response and download our image. We’ll create a "},{"type":"codeVoice","code":"MyResponse"},{"text":" struct to decode the JSON, and then implement the decoding and downloading logic using the ","type":"text"},{"type":"codeVoice","code":"Combine"},{"type":"text","text":" framework."}],"type":"paragraph"}],"code":"05-creating-customised-ad.swift"}],"anchor":"Creating-a-business-layer","title":"Creating a business layer","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","media":"01-creating-customised-ad.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When creating custom ads, we will always separate business logic and state management from presentation logic. Let’s start by creating business logic using the "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]}]},{"stepsSection":[{"code":"06-creating-customised-ad.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s take a look at our controller. It does not handle error and success states in any way. In order for the SDK to understand that your ad is ready to be shown or that the preparation of the ad has failed, we need some way of communication."}]}],"caption":[],"media":null},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"All states can be found in the "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdControllerState","type":"reference"},{"text":" documentation.","type":"text"}]}],"runtimePreview":null,"content":[{"inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController","type":"reference"},{"text":" protocol requires a ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController\/state","isActive":true},{"text":" property, which is the ","type":"text"},{"code":"Combine Publisher","type":"codeVoice"},{"text":". With its help, ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" always knows about the state of your custom ad. We also created a "},{"code":"Combine PassthroughSubject","type":"codeVoice"},{"type":"text","text":" to allow state changing."}],"type":"paragraph"}],"code":"07-creating-customised-ad.swift","media":null,"type":"step"},{"caption":[{"inlineContent":[{"text":"Please note that if you do not change the state of your controller, the ad will always be in the loading state and will not be shown to the user.","type":"text"}],"type":"paragraph"}],"code":"08-creating-customised-ad.swift","media":null,"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we can notify the SDK that our ad can be shown to the user, or that it has ended with an error. For this purpose, we use the "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdControllerState\/readyToPresent","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdControllerState\/error(_:)","isActive":true},{"type":"text","text":" states."}]}]},{"code":"09-creating-customised-ad.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Displaying a picture is great, but it would also be nice to implement the logic of redirecting the user to a web browser when they tap on it. To do this, let’s add the "},{"type":"codeVoice","code":"onTap"},{"type":"text","text":" method."}]}],"caption":[],"runtimePreview":null,"type":"step"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"As with state, the ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController","type":"reference","isActive":true},{"type":"text","text":" protocol requires an "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController\/event","type":"reference"},{"type":"text","text":" property that we can use to handle events. In this case, we will use the "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdControllerEvent\/tap","type":"reference"},{"text":" event, which will automatically process the ","type":"text"},{"type":"codeVoice","code":"click_url"},{"text":" from the server response.","type":"text"}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The list of all events that can be processed by the SDK can be found in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdControllerEvent"},{"text":" documentation.","type":"text"}]}],"code":"10-creating-customised-ad.swift","media":null,"type":"step"}],"anchor":"State-and-event-management","title":"State and event management","contentSection":[{"content":[{"inlineContent":[{"text":"In the previous section, we implemented the logic for loading the received advertising banner. The next step is to manage the state and pass events to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia","media":"02-creating-customised-ad.png","mediaPosition":"trailing"}]},{"stepsSection":[{"runtimePreview":null,"content":[{"inlineContent":[{"text":"If the ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController","type":"reference","isActive":true},{"text":" is the business layer of our custom ad and is part of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":" life cycle, then the ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRenderer","isActive":true,"type":"reference"},{"text":" is the presentation layer and part of the ","type":"text"},{"code":"AdView","type":"codeVoice"},{"type":"text","text":" hierarchy. Let’s continue our development in the same file."}],"type":"paragraph"}],"type":"step","media":null,"code":"11-creating-customised-ad.swift","caption":[]},{"type":"step","media":null,"code":"12-creating-customised-ad.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Let’s import ","type":"text"},{"type":"codeVoice","code":"SwiftUI"},{"type":"text","text":", create a "},{"type":"codeVoice","code":"View"},{"type":"text","text":" and subscribe it to the "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRenderer","isActive":true,"type":"reference"},{"text":" protocol. It will contain our presentation logic.","type":"text"}]}],"caption":[],"runtimePreview":null},{"code":"13-creating-customised-ad.swift","media":null,"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"The only thing the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRenderer","type":"reference"},{"text":" protocol requires is an init with a specific type of ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController","isActive":true,"type":"reference"},{"text":". Let’s add it to our View.","type":"text"}]}],"caption":[]},{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"The last step to build our project is to add a renderer type to the controller. We can use typealias to do this. Now we can build the project."}],"type":"paragraph"}],"runtimePreview":null,"media":null,"type":"step","code":"14-creating-customised-ad.swift"},{"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"text":"The final touch will be to create our ","type":"text"},{"code":"View","type":"codeVoice"},{"text":" body, where we display the image when it is loaded and call the ","type":"text"},{"code":"onTap","type":"codeVoice"},{"type":"text","text":" method when the user taps it."}],"type":"paragraph"}],"caption":[],"media":null,"code":"15-creating-customised-ad.swift"}],"title":"Creating a presentation layer","anchor":"Creating-a-presentation-layer","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"text":"Even though our business layer is ready, we still can’t build our project. That’s because the SDK requires a presentation layer. Let’s implement it with ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRenderer","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"media":"03-creating-customised-ad.png"}]},{"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Although we have created a custom ad, in order for the SDK to use it, we need to pass it to the SDK somehow. Let’s do that."}]}]}],"title":"Registering a renderer in the SDK","stepsSection":[{"content":[{"inlineContent":[{"type":"text","text":"First of all, let’s get back to our response from the server. As you can see, it includes the "},{"code":"ad_name","type":"codeVoice"},{"type":"text","text":" field. It is this field that the SDK will use to identify your renderer."}],"type":"paragraph"}],"type":"step","media":null,"caption":[],"code":"16-creating-customised-ad.json","runtimePreview":null},{"type":"step","code":"17-creating-customised-ad.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Let’s go to the "},{"code":"TutorialApp","type":"codeVoice"},{"type":"text","text":" file, the place where we create our "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService","isActive":true},{"type":"text","text":". This is where we will be able to register our custom renderer."}],"type":"paragraph"}],"caption":[],"media":null},{"runtimePreview":null,"code":"18-creating-customised-ad.swift","type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"All we need to do is use the "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService\/registerRenderer(_:forName:)","isActive":true},{"text":" method, passing in the value we expect to receive in the ","type":"text"},{"type":"codeVoice","code":"ad_name"},{"type":"text","text":" field and the renderer type. This way, every time the "},{"type":"codeVoice","code":"ad_name"},{"type":"text","text":" field in the server response is the same as the "},{"code":"String","type":"codeVoice"},{"text":" you passed to this method, the SDK will create your ","type":"text"},{"code":"MyCustomAdController","type":"codeVoice"},{"text":" and display the ","type":"text"},{"code":"MyCustomAdRenderer","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"caption":[]}],"anchor":"Registering-a-renderer-in-the-SDK"}],"kind":"tasks"},{"title":"Download and cache ad assets in your custom ads","kind":"callToAction","abstract":[{"type":"text","text":"Last time we created our custom advert, in which we display an image received from the server. This time, we will refactor the code related to loading the image and add caching."}],"action":{"isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Load-And-Cache-Assets","type":"reference","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial"}],"kind":"project","hierarchy":{"modules":[{"projects":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#First-steps-for-working-with-AdSDK"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Loading-and-displaying-advertisements","kind":"task"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-state-of-advertisements"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Handling-errors-during-the-loading-and-decoding-of-advertisements"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-advertising-events","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad#Defining-the-size-of-the-advertisement"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad#Interstitial-Ad-Object","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad#Presenting-interstitial"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters#Modifying-global-parameters","kind":"task"}]}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK"},{"projects":[{"sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-business-layer","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#State-and-event-management"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-presentation-layer"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising"},{"sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Load-And-Cache-Assets#Asset-loading-and-caching","kind":"task"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Load-And-Cache-Assets"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements"}],"paths":[["doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/$volume","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements"]],"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK"},"metadata":{"categoryPathComponent":"Meet-AdSDK","role":"project","title":"Creating customised advertising","category":"Meet AdSDK"},"references":{"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement":{"url":"\/documentation\/adsdkcore\/advertisement","abstract":[{"type":"text","text":"A key object interface describing the advertisement."}],"kind":"symbol","role":"symbol","type":"topic","title":"Advertisement","navigatorTitle":[{"kind":"identifier","text":"Advertisement"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Advertisement"}]},"17-creating-customised-ad.swift":{"syntax":"swift","highlights":[],"fileType":"swift","identifier":"17-creating-customised-ad.swift","fileName":"TutorialApp.swift","type":"file","content":["\/\/ ...","private extension TutorialViewModel {","    func createAdService() {","        Task { @MainActor in","            do {","                let service = try await AdService.configure(networkID: 1800)","                state = .ready(service)","","            } catch {","                state = .error","            }","        }","    }","    \/\/ ...","}","\/\/ ..."]},"03-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":7}],"fileType":"swift","identifier":"03-creating-customised-ad.swift","fileName":"MyCustomAd.swift","type":"file","content":["import Foundation","import AdSDKCore","import Combine","","@Observable","final class MyCustomAdController: AdController {","    init(_ assetRepository: AssetRepository) {}","}"]},"doc://com.adsdk.core/documentation/AdSDKCore/AdRequest":{"navigatorTitle":[{"text":"AdRequest","kind":"identifier"}],"url":"\/documentation\/adsdkcore\/adrequest","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Describes a request to load an advertisement."}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AdRequest","kind":"identifier"}],"title":"AdRequest","type":"topic"},"doc://com.adsdk.core/documentation/AdSDKCore/AdControllerEvent/tap":{"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"tap"}],"role":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdControllerEvent\/tap","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Signals that the user has tapped an advertisement."}],"url":"\/documentation\/adsdkcore\/adcontrollerevent\/tap","title":"AdControllerEvent.tap"},"doc://com.adsdk.core/tutorials/AdSDKCore/Defining-Size-Of-Ad#Defining-the-size-of-the-advertisement":{"kind":"section","url":"\/tutorials\/adsdkcore\/defining-size-of-ad#Defining-the-size-of-the-advertisement","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad#Defining-the-size-of-the-advertisement","type":"section","abstract":[{"text":"This tutorial will teach you how to define the size of the advertisement, taking into account the aspect ratio parameter. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"role":"pseudoSymbol","title":"Defining the size of the advertisement"},"doc://com.adsdk.core/documentation/AdSDKCore/AdRenderer":{"abstract":[{"type":"text","text":"Custom renderer interface."}],"url":"\/documentation\/adsdkcore\/adrenderer","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AdRenderer"}],"title":"AdRenderer","role":"symbol","type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRenderer","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AdRenderer"}]},"01-creating-customised-ad.json":{"syntax":"json","highlights":[],"content":["{","    \/\/ ...","    ad_name: \"myCustomAd\",","    click_url: \"https:\/\/tap-url.com\",","    body: {","        \/\/ ...","        ext: {","            \/\/ ...","            adData: {","                myImage: \"https:\/\/image.com\"","            }","        }","    }","}"],"fileName":"Response.json","fileType":"json","type":"file","identifier":"01-creating-customised-ad.json"},"doc://com.adsdk.core/tutorials/AdSDKCore/Load-And-Cache-Assets":{"role":"project","title":"Download and cache ad assets in your custom ads","type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Load-And-Cache-Assets","estimatedTime":"15min","url":"\/tutorials\/adsdkcore\/load-and-cache-assets","kind":"project","abstract":[{"type":"text","text":"Last time we created our custom advert, in which we display an image received from the server. This time, we will refactor the code related to loading the image and add caching."}]},"doc://com.adsdk.core/documentation/AdSDKCore/AdMetadata":{"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"AdMetadata","kind":"identifier"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdMetadata","navigatorTitle":[{"kind":"identifier","text":"AdMetadata"}],"url":"\/documentation\/adsdkcore\/admetadata","abstract":[{"type":"text","text":"A class that contains the basic data about the advertisement and renderer."}],"title":"AdMetadata"},"doc://com.adsdk.core/documentation/AdSDKCore/AdService/registerRenderer(_:forName:)":{"title":"registerRenderer(_:forName:)","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService\/registerRenderer(_:forName:)","abstract":[{"type":"text","text":"Registers a custom ad renderer."}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"registerRenderer","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A7ServiceC16registerRenderer_7forNameyxm_SStAA0aE0RzlF1TL_xmfp"},{"kind":"text","text":".Type, "},{"text":"forName","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":")"}],"url":"\/documentation\/adsdkcore\/adservice\/registerrenderer(_:forname:)"},"doc://com.adsdk.core/documentation/AdSDKCore/AssetRepository":{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRepository","abstract":[{"type":"text","text":"Asset loading service."}],"title":"AssetRepository","url":"\/documentation\/adsdkcore\/assetrepository","role":"symbol","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"AssetRepository","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AssetRepository"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads":{"role":"project","title":"Create and display inline ads","type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads","estimatedTime":"20min","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads","kind":"project","abstract":[{"type":"text","text":"This tutorial will guide you in creating a simple app that can load and display a list of advertisement."}]},"02-creating-customised-ad.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/02-creating-customised-ad.png"}],"identifier":"02-creating-customised-ad.png","alt":"The rectangles with the words Advertisement and AdController, where AdController is highlighted. Advertisement is connected to AdController by an arrow and vice versa.","type":"image"},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling#Handling-errors-during-the-loading-and-decoding-of-advertisements":{"kind":"section","url":"\/tutorials\/adsdkcore\/state-and-event-handling#Handling-errors-during-the-loading-and-decoding-of-advertisements","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Handling-errors-during-the-loading-and-decoding-of-advertisements","type":"section","abstract":[{"type":"text","text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section."}],"role":"pseudoSymbol","title":"Handling errors during the loading and decoding of advertisements"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising":{"role":"project","title":"Creating customised advertising","type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising","estimatedTime":"1hr 0min","url":"\/tutorials\/adsdkcore\/creating-customised-advertising","kind":"project","abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads."}]},"18-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}],"fileType":"swift","fileName":"TutorialApp.swift","identifier":"18-creating-customised-ad.swift","type":"file","content":["\/\/ ...","private extension TutorialViewModel {","    func createAdService() {","        Task { @MainActor in","            do {","                let service = try await AdService.configure(networkID: 1800)","                service.registerRenderer(","                    MyCustomAdRenderer.self,","                    forName: \"myCustomAd\"","                )","","                state = .ready(service)","","            } catch {","                state = .error","            }","        }","    }","    \/\/ ...","}","\/\/ ..."]},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling":{"role":"project","type":"topic","title":"Handling the state and events of advertising","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling","estimatedTime":"25min","url":"\/tutorials\/adsdkcore\/state-and-event-handling","kind":"project","abstract":[{"type":"text","text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section."}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK":{"kind":"section","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Registering-a-renderer-in-the-SDK","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK","type":"section","abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads."}],"role":"pseudoSymbol","title":"Registering a renderer in the SDK"},"doc://com.adsdk.core/tutorials/Meet-AdSDK/Working-with-the-built-in-capabilities-of-the-SDK":{"kind":"article","url":"\/tutorials\/meet-adsdk\/working-with-the-built-in-capabilities-of-the-sdk","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK","type":"topic","abstract":[],"role":"article","title":"Working with the built-in capabilities of the SDK"},"doc://com.adsdk.core/tutorials/Meet-AdSDK/Extending-the-SDK-with-your-custom-advertisements":{"kind":"article","url":"\/tutorials\/meet-adsdk\/extending-the-sdk-with-your-custom-advertisements","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements","type":"topic","abstract":[],"role":"article","title":"Extending the SDK with your custom advertisements"},"15-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19}],"fileType":"swift","fileName":"MyCustomAd.swift","identifier":"15-creating-customised-ad.swift","content":["import SwiftUI","","struct MyCustomAdRenderer: View, AdRenderer {","    @State var controller: MyCustomAdController","","    init(controller: MyCustomAdController) {","        _controller = State(initialValue: controller)","    }","","    var body: some View {","        if let data = controller.imageData,","           let uiImage = UIImage(data: data) {","            Image(uiImage: uiImage)","                .resizable()","                .aspectRatio(contentMode: .fit)","                .onTapGesture {","                    controller.onTap()","                }","        }","    }","}","","@Observable","final class MyCustomAdController: AdController {","    typealias Renderer = MyCustomAdRenderer","    \/\/ ...","    private(set) var imageData: Data?","    \/\/ ...","    func onTap() {","        eventSubject.send(.tap)","    }","}","\/\/ ..."],"type":"file"},"doc://com.adsdk.core/documentation/AdSDKCore/AdControllerState":{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdControllerState","abstract":[{"type":"text","text":"Enumeration of the possible states of the "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController","type":"reference"},{"text":".","type":"text"}],"title":"AdControllerState","url":"\/documentation\/adsdkcore\/adcontrollerstate","role":"symbol","kind":"symbol","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AdControllerState"}],"navigatorTitle":[{"kind":"identifier","text":"AdControllerState"}]},"02-creating-customised-ad.swift":{"syntax":"swift","highlights":[],"fileType":"swift","fileName":"MyCustomAd.swift","identifier":"02-creating-customised-ad.swift","type":"file","content":["import Foundation","import AdSDKCore","import Combine","","@Observable","final class MyCustomAdController: AdController {","","}"]},"14-creating-customised-ad.swift":{"syntax":"swift","type":"file","fileName":"MyCustomAd.swift","identifier":"14-creating-customised-ad.swift","fileType":"swift","highlights":[{"line":17}],"content":["import SwiftUI","","struct MyCustomAdRenderer: View, AdRenderer {","    @State var controller: MyCustomAdController","","    init(controller: MyCustomAdController) {","        _controller = State(initialValue: controller)","    }","","    var body: some View {","        Text(\"TODO\")","    }","}","","@Observable","final class MyCustomAdController: AdController {","    typealias Renderer = MyCustomAdRenderer","    \/\/ ...","    private(set) var imageData: Data?","    \/\/ ...","    func onTap() {","        eventSubject.send(.tap)","    }","}","\/\/ ..."]},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Creating-a-business-layer":{"kind":"section","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Creating-a-business-layer","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-business-layer","type":"section","abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads."}],"role":"pseudoSymbol","title":"Creating a business layer"},"12-creating-customised-ad.swift":{"syntax":"swift","type":"file","fileName":"MyCustomAd.swift","identifier":"12-creating-customised-ad.swift","fileType":"swift","highlights":[{"line":1},{"line":2},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8}],"content":["import SwiftUI","","struct MyCustomAdRenderer: View, AdRenderer {","    var body: some View {","        Text(\"TODO\")","    }","}","","@Observable","final class MyCustomAdController: AdController {","    \/\/ ...","    private(set) var imageData: Data?","    \/\/ ...","    func onTap() {","        eventSubject.send(.tap)","    }","}","\/\/ ..."]},"08-creating-customised-ad.swift":{"syntax":"swift","type":"file","fileName":"MyCustomAd.swift","identifier":"08-creating-customised-ad.swift","fileType":"swift","highlights":[{"line":12},{"line":15},{"line":19}],"content":["@Observable","final class MyCustomAdController: AdController {","    \/\/ ...","    var state: AnyPublisher<AdControllerState, Never> {","        stateSubject.eraseToAnyPublisher()","    }","","    private let stateSubject = PassthroughSubject<AdControllerState, Never>()","","    func update(_ data: Data, _ metadata: AdMetadata) {","        \/\/ ...","            .sink { [weak self] completion in","                guard case .failure(let error) = completion else { return }","","                self?.stateSubject.send(.error(error))","","            } receiveValue: { [weak self] imageData in","                self?.imageData = imageData","                self?.stateSubject.send(.readyToPresent)","            }","    }","}","\/\/ ..."]},"doc://com.adsdk.core/tutorials/AdSDKCore/Load-And-Cache-Assets#Asset-loading-and-caching":{"kind":"section","url":"\/tutorials\/adsdkcore\/load-and-cache-assets#Asset-loading-and-caching","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Load-And-Cache-Assets#Asset-loading-and-caching","type":"section","abstract":[{"text":"Last time we created our custom advert, in which we display an image received from the server. This time, we will refactor the code related to loading the image and add caching.","type":"text"}],"role":"pseudoSymbol","title":"Asset loading and caching"},"13-creating-customised-ad.swift":{"syntax":"swift","type":"file","fileName":"MyCustomAd.swift","identifier":"13-creating-customised-ad.swift","fileType":"swift","highlights":[{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9}],"content":["import SwiftUI","","struct MyCustomAdRenderer: View, AdRenderer {","    @State var controller: MyCustomAdController","","    init(controller: MyCustomAdController) {","        _controller = State(initialValue: controller)","    }","","    var body: some View {","        Text(\"TODO\")","    }","}","","@Observable","final class MyCustomAdController: AdController {","    \/\/ ...","    private(set) var imageData: Data?","    \/\/ ...","    func onTap() {","        eventSubject.send(.tap)","    }","}","\/\/ ..."]},"doc://com.adsdk.core/tutorials/Meet-AdSDK":{"url":"\/tutorials\/meet-adsdk","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","kind":"overview","role":"overview","title":"Meet nextgen AdSDK","type":"topic","abstract":[{"type":"text","text":"Manage, display, and create your custom advertisements on iOS using cutting-edge technologies such as Combine, Modern Concurrency, and SwiftUI based on the AdSDK."}]},"06-creating-customised-ad.swift":{"syntax":"swift","type":"file","fileName":"MyCustomAd.swift","identifier":"06-creating-customised-ad.swift","fileType":"swift","highlights":[],"content":["@Observable","final class MyCustomAdController: AdController {","    \/\/ ...","","    func update(_ data: Data, _ metadata: AdMetadata) {","        \/\/ ...","            .sink { completion in","                guard case .failure(let error) = completion else { return }","","                \/\/ Smth went wrong","","            } receiveValue: { [weak self] imageData in","                self?.imageData = imageData","            }","    }","}","\/\/ ..."]},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling#Observing-the-advertising-events":{"kind":"section","url":"\/tutorials\/adsdkcore\/state-and-event-handling#Observing-the-advertising-events","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-advertising-events","type":"section","abstract":[{"text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"role":"pseudoSymbol","title":"Observing the advertising events"},"doc://com.adsdk.core/documentation/AdSDKCore/AdControllerEvent":{"abstract":[{"type":"text","text":"Representation of user actions that can be triggered on an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRenderer"},{"text":".","type":"text"}],"kind":"symbol","url":"\/documentation\/adsdkcore\/adcontrollerevent","navigatorTitle":[{"text":"AdControllerEvent","kind":"identifier"}],"title":"AdControllerEvent","role":"symbol","type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdControllerEvent","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AdControllerEvent"}]},"doc://com.adsdk.core/documentation/AdSDKCore/AdControllerState/readyToPresent":{"type":"topic","title":"AdControllerState.readyToPresent","abstract":[{"type":"text","text":"Signals that the controller has now filled the renderer with content and it is ready for display."}],"url":"\/documentation\/adsdkcore\/adcontrollerstate\/readytopresent","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdControllerState\/readyToPresent","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"readyToPresent","kind":"identifier"}],"kind":"symbol","role":"symbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Loading-and-displaying-advertisements":{"kind":"section","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Loading-and-displaying-advertisements","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Loading-and-displaying-advertisements","type":"section","abstract":[{"type":"text","text":"This tutorial will guide you in creating a simple app that can load and display a list of advertisement."}],"role":"pseudoSymbol","title":"Loading and displaying advertisements"},"16-creating-customised-ad.json":{"syntax":"json","highlights":[],"fileType":"json","fileName":"Response.json","identifier":"16-creating-customised-ad.json","type":"file","content":["{","    \/\/ ...","    ad_name: \"myCustomAd\", \/\/ <------","    click_url: \"https:\/\/tap-url.com\",","    body: {","        \/\/ ...","        ext: {","            \/\/ ...","            adData: {","                myImage: \"https:\/\/image.com\"","            }","        }","    }","}"]},"doc://com.adsdk.core/documentation/AdSDKCore/AdController":{"url":"\/documentation\/adsdkcore\/adcontroller","abstract":[{"type":"text","text":"Controller interface for custom renderer."}],"kind":"symbol","role":"symbol","type":"topic","title":"AdController","navigatorTitle":[{"kind":"identifier","text":"AdController"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"AdController","kind":"identifier"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-and-Display-Interstitial-Ad#Interstitial-Ad-Object":{"kind":"section","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Interstitial-Ad-Object","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad#Interstitial-Ad-Object","type":"section","abstract":[{"text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application.","type":"text"}],"role":"pseudoSymbol","title":"Interstitial Ad Object"},"05-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47}],"fileType":"swift","fileName":"MyCustomAd.swift","identifier":"05-creating-customised-ad.swift","content":["import Foundation","import AdSDKCore","import Combine","","@Observable","final class MyCustomAdController: AdController {","    private(set) var imageData: Data?","","    private var subscription: AnyCancellable?","","    init(_ assetRepository: AssetRepository) {}","","    func update(_ data: Data, _ metadata: AdMetadata) {","        \/\/ 1. Start async stream with Data","        subscription = Just(data)","            \/\/ 2. Decode our response","            .decode(type: MyResponse.self, decoder: JSONDecoder())","            \/\/ 3. Map error to AdError type","            .mapError { _ in AdError.decoding }","            \/\/ 4. Request image from URL","            .flatMap { response in","                URLSession.shared.dataTaskPublisher(for: response.myImage)","                    .map { $0.data }","                    \/\/ 5. Map error to AdError type","                    .mapError { _ in AdError.unspecifiedNetworkError }","                    .eraseToAnyPublisher()","            }","            .sink { completion in","                guard case .failure(let error) = completion else { return }","","                \/\/ Smth went wrong","","            } receiveValue: { [weak self] imageData in","                self?.imageData = imageData","            }","    }","}","","struct MyResponse: Decodable {","    let myImage: URL","","    enum CodingKeys: CodingKey {","        case body, ext, adData, myImage","    }","","    init(from decoder: Decoder) throws { \/\/ ... }","}"],"type":"file"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-and-Display-Interstitial-Ad":{"role":"project","title":"Create and display interstitial ad","type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad","estimatedTime":"15min","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad","kind":"project","abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}]},"09-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":22},{"line":23},{"line":24},{"line":25}],"fileType":"swift","fileName":"MyCustomAd.swift","identifier":"09-creating-customised-ad.swift","type":"file","content":["@Observable","final class MyCustomAdController: AdController {","    \/\/ ...","    var state: AnyPublisher<AdControllerState, Never> {","        stateSubject.eraseToAnyPublisher()","    }","","    private let stateSubject = PassthroughSubject<AdControllerState, Never>()","","    func update(_ data: Data, _ metadata: AdMetadata) {","        \/\/ ...","            .sink { [weak self] completion in","                guard case .failure(let error) = completion else { return }","","                self?.stateSubject.send(.error(error))","","            } receiveValue: { [weak self] imageData in","                self?.imageData = imageData","                self?.stateSubject.send(.readyToPresent)","            }","    }","","    func onTap() {","","    }","}","\/\/ ..."]},"doc://com.adsdk.core/documentation/AdSDKCore/AdControllerState/error(_:)":{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdControllerState\/error(_:)","abstract":[{"type":"text","text":"Signals that the controller has received an error."}],"title":"AdControllerState.error(_:)","url":"\/documentation\/adsdkcore\/adcontrollerstate\/error(_:)","role":"symbol","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"error","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":")"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-and-Display-Interstitial-Ad#Presenting-interstitial":{"kind":"section","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Presenting-interstitial","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad#Presenting-interstitial","type":"section","abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}],"role":"pseudoSymbol","title":"Presenting interstitial"},"doc://com.adsdk.core/documentation/AdSDKCore/AdController/update(_:_:)":{"type":"topic","title":"update(_:_:)","abstract":[{"text":"Passes new data received from the server to the controller.","type":"text"}],"url":"\/documentation\/adsdkcore\/adcontroller\/update(_:_:)","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController\/update(_:_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"update"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Data","preciseIdentifier":"s:10Foundation4DataV"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A8MetadataC","text":"AdMetadata"},{"kind":"text","text":")"}],"kind":"symbol","required":true,"role":"symbol"},"07-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":4},{"line":5},{"line":6},{"line":8},{"line":9}],"fileType":"swift","fileName":"MyCustomAd.swift","identifier":"07-creating-customised-ad.swift","content":["@Observable","final class MyCustomAdController: AdController {","    \/\/ ...","    var state: AnyPublisher<AdControllerState, Never> {","        stateSubject.eraseToAnyPublisher()","    }","","    private let stateSubject = PassthroughSubject<AdControllerState, Never>()","","    func update(_ data: Data, _ metadata: AdMetadata) {","        \/\/ ...","            .sink { completion in","                guard case .failure(let error) = completion else { return }","","                \/\/ Smth went wrong","","            } receiveValue: { [weak self] imageData in","                self?.imageData = imageData","            }","    }","}","\/\/ ..."],"type":"file"},"03-creating-customised-ad.png":{"identifier":"03-creating-customised-ad.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/03-creating-customised-ad.png"}],"alt":"The rectangles with the words Advertisement, AdView, AdController, and AdRenderer where AdController and AdRenderer are highlighted. Advertisement is connected to AdController by an arrow and vice versa. AdRenderer is connected to AdController by an arrow and vice versa. AdView is connected to Advertisement by an arrow and vice versa. AdView is connected to AdRenderer by an arrow"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-AdRequest-Parameters#Modifying-global-parameters":{"kind":"section","url":"\/tutorials\/adsdkcore\/global-adrequest-parameters#Modifying-global-parameters","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters#Modifying-global-parameters","type":"section","abstract":[{"type":"text","text":"We already know how to create an "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","type":"reference","isActive":true},{"text":". However, an ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true,"type":"reference"},{"type":"text","text":" can have additional parameters beyond those you pass during initialization. These additional parameters are global for all "},{"type":"codeVoice","code":"AdRequests"},{"type":"text","text":". The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true},{"type":"text","text":"."}],"role":"pseudoSymbol","title":"Modifying global parameters"},"doc://com.adsdk.core/documentation/AdSDKCore/AdService":{"title":"AdService","role":"symbol","url":"\/documentation\/adsdkcore\/adservice","kind":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AdService"}],"type":"topic","abstract":[{"type":"text","text":"A key object for configuring your advertisements."}],"navigatorTitle":[{"kind":"identifier","text":"AdService"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Defining-Size-Of-Ad":{"role":"project","title":"Defining the size of the advertisement","type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad","estimatedTime":"15min","url":"\/tutorials\/adsdkcore\/defining-size-of-ad","kind":"project","abstract":[{"type":"text","text":"This tutorial will teach you how to define the size of the advertisement, taking into account the aspect ratio parameter. In it, we will continue the development of the application we started in the previous section."}]},"01-creating-customised-ad.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/01-creating-customised-ad.png"}],"identifier":"01-creating-customised-ad.png","alt":"The rectangles with the words Advertisement and AdController, where AdController is highlighted. Advertisement is connected to AdController by an arrow.","type":"image"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-AdRequest-Parameters":{"role":"project","type":"topic","title":"Global AdRequest parameters","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters","estimatedTime":"10min","url":"\/tutorials\/adsdkcore\/global-adrequest-parameters","kind":"project","abstract":[{"type":"text","text":"We already know how to create an "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true},{"type":"text","text":". However, an "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true,"type":"reference"},{"type":"text","text":" can have additional parameters beyond those you pass during initialization. These additional parameters are global for all "},{"type":"codeVoice","code":"AdRequests"},{"type":"text","text":". The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true,"type":"reference"},{"type":"text","text":"."}]},"doc://com.adsdk.core/documentation/AdSDKCore/AdController/state":{"title":"state","required":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController\/state","type":"topic","url":"\/documentation\/adsdkcore\/adcontroller\/state","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"state"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Combine12AnyPublisherV","text":"AnyPublisher"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore0A15ControllerStateO","kind":"typeIdentifier","text":"AdControllerState"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s5NeverO","text":"Never","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","abstract":[{"text":"Controller state publisher.","type":"text"}],"kind":"symbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Creating-a-presentation-layer":{"kind":"section","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Creating-a-presentation-layer","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-presentation-layer","type":"section","abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads."}],"role":"pseudoSymbol","title":"Creating a presentation layer"},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling#Observing-the-state-of-advertisements":{"kind":"section","url":"\/tutorials\/adsdkcore\/state-and-event-handling#Observing-the-state-of-advertisements","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-state-of-advertisements","type":"section","abstract":[{"type":"text","text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section."}],"role":"pseudoSymbol","title":"Observing the state of advertisements"},"10-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":13},{"line":29}],"fileType":"swift","fileName":"MyCustomAd.swift","identifier":"10-creating-customised-ad.swift","type":"file","content":["@Observable","final class MyCustomAdController: AdController {","    \/\/ ...","    var state: AnyPublisher<AdControllerState, Never> {","        stateSubject.eraseToAnyPublisher()","    }","","    var event: AnyPublisher<AdControllerEvent, Never> {","        eventSubject.eraseToAnyPublisher()","    }","","    private let stateSubject = PassthroughSubject<AdControllerState, Never>()","    private let eventSubject = PassthroughSubject<AdControllerEvent, Never>()","","    func update(_ data: Data, _ metadata: AdMetadata) {","        \/\/ ...","            .sink { [weak self] completion in","                guard case .failure(let error) = completion else { return }","","                self?.stateSubject.send(.error(error))","","            } receiveValue: { [weak self] imageData in","                self?.imageData = imageData","                self?.stateSubject.send(.readyToPresent)","            }","    }","","    func onTap() {","        eventSubject.send(.tap)","    }","}","\/\/ ..."]},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#First-steps-for-working-with-AdSDK":{"kind":"section","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#First-steps-for-working-with-AdSDK","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#First-steps-for-working-with-AdSDK","type":"section","abstract":[{"text":"This tutorial will guide you in creating a simple app that can load and display a list of advertisement.","type":"text"}],"role":"pseudoSymbol","title":"First steps for working with AdSDK"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#State-and-event-management":{"kind":"section","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#State-and-event-management","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#State-and-event-management","type":"section","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"role":"pseudoSymbol","title":"State and event management"},"04-creating-customised-ad.swift":{"syntax":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11}],"fileType":"swift","fileName":"MyCustomAd.swift","identifier":"04-creating-customised-ad.swift","content":["import Foundation","import AdSDKCore","import Combine","","@Observable","final class MyCustomAdController: AdController {","    init(_ assetRepository: AssetRepository) {}","","    func update(_ data: Data, _ metadata: AdMetadata) {","        \/\/ Core logic will be there","    }","}"],"type":"file"},"doc://com.adsdk.core/documentation/AdSDKCore/AdController/event":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"event","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyPublisher","preciseIdentifier":"s:7Combine12AnyPublisherV"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore0A15ControllerEventO","text":"AdControllerEvent","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5NeverO","text":"Never"},{"text":">","kind":"text"}],"title":"event","url":"\/documentation\/adsdkcore\/adcontroller\/event","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController\/event","kind":"symbol","required":true,"type":"topic","role":"symbol","abstract":[{"type":"text","text":"Controller event publisher."}]},"11-creating-customised-ad.swift":{"syntax":"swift","type":"file","fileName":"MyCustomAd.swift","identifier":"11-creating-customised-ad.swift","fileType":"swift","highlights":[],"content":["@Observable","final class MyCustomAdController: AdController {","    \/\/ ...","    private(set) var imageData: Data?","    \/\/ ...","    func onTap() {","        eventSubject.send(.tap)","    }","}","\/\/ ..."]}},"variantOverrides":[{"traits":[{"interfaceLanguage":"occ"}],"patch":[{"op":"replace","value":"occ","path":"\/identifier\/interfaceLanguage"}]}]}