{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Load-And-Cache-Assets"},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Last time we created our custom advert, in which we display an image received from the server. This time, we will refactor the code related to loading the image and add caching.","type":"text"}]}],"estimatedTimeInMinutes":15,"chapter":"Extending the SDK with your custom advertisements","kind":"hero","title":"Download and cache ad assets in your custom ads"},{"tasks":[{"title":"Asset loading and caching","anchor":"Asset-loading-and-caching","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s go back to the "},{"type":"codeVoice","code":"MyCustomAd"},{"type":"text","text":" file. Here, in the controller, in the "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController\/update(_:_:)","isActive":true,"type":"reference"},{"type":"text","text":" method, we have the logic for loading an advertising banner."}]}],"code":"01-load-and-cache-assets.swift","runtimePreview":null,"caption":[],"media":null,"type":"step"},{"content":[{"inlineContent":[{"text":"The SDK provides access to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRepository","isActive":true},{"type":"text","text":", which can download advertising resources and cache them. Let’s keep it in our class and create an empty method to use in the "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController\/update(_:_:)","type":"reference","isActive":true},{"type":"text","text":" method."}],"type":"paragraph"}],"type":"step","media":null,"runtimePreview":null,"caption":[],"code":"02-load-and-cache-assets.swift"},{"media":null,"caption":[{"inlineContent":[{"text":"As a rule, the server returns an asset with a specific id, which we can pass here. It will be used to sort the results. In our case, we don’t have it and we use only one asset, so we can pass any id.","type":"text"}],"type":"paragraph"}],"code":"03-load-and-cache-assets.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"The first step to implementing our method is to create a request to the ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRepository","isActive":true,"type":"reference"},{"type":"text","text":". To do this, we create an "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRequest","isActive":true,"type":"reference"},{"type":"text","text":" object, which must have the "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRequest\/url","isActive":true},{"type":"text","text":" of your asset and the "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetResult\/id","isActive":true},{"text":" that will be used to sort the results.","type":"text"}]}],"type":"step"},{"runtimePreview":null,"code":"04-load-and-cache-assets.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"The next step is to call the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRepository\/loadAssets(_:stateSubject:)","isActive":true},{"type":"text","text":" method, which will load the array of assets and return a sorted array of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetResult"},{"type":"text","text":". This method not only loads assets, but also caches them."}]}],"caption":[],"media":null},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"In addition, we pass ","type":"text"},{"type":"codeVoice","code":"stateSubject"},{"type":"text","text":" to this method. In this way, "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRepository"},{"text":" will be able to change the state of our controller to ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdControllerState\/caching","isActive":true},{"text":" when it starts caching.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"media":null,"code":"05-load-and-cache-assets.swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The last step is to return the ","type":"text"},{"code":"Data","type":"codeVoice"},{"type":"text","text":" from the received "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetResult","isActive":true},{"type":"text","text":". After that, we can use our image knowing that it is cached."}]}],"type":"step","runtimePreview":null,"caption":[],"media":null,"code":"06-load-and-cache-assets.swift"}],"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"The SDK includes a cache that you can control the size of. When creating custom ads, we would like to use this cache so that the SDK can control the size of the cache."}],"type":"paragraph"}],"mediaPosition":"trailing"}]}],"kind":"tasks"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/adsdkcore\/load-and-cache-assets"]},{"paths":["\/tutorials\/adsdkcore\/load-and-cache-assets"],"traits":[{"interfaceLanguage":"occ"}]}],"kind":"project","schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/$volume","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements"]],"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","modules":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#First-steps-for-working-with-AdSDK"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Loading-and-displaying-advertisements"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads"},{"sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-state-of-advertisements","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Handling-errors-during-the-loading-and-decoding-of-advertisements","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-advertising-events","kind":"task"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad#Defining-the-size-of-the-advertisement","kind":"task"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad#Interstitial-Ad-Object"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad#Presenting-interstitial"}]},{"sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters#Modifying-global-parameters"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-business-layer"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#State-and-event-management","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-presentation-layer","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Load-And-Cache-Assets","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Load-And-Cache-Assets#Asset-loading-and-caching"}]}]}]},"metadata":{"category":"Meet AdSDK","categoryPathComponent":"Meet-AdSDK","title":"Download and cache ad assets in your custom ads","role":"project"},"references":{"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Creating-a-business-layer":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"title":"Creating a business layer","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-business-layer","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Creating-a-business-layer","type":"section"},"doc://com.adsdk.core/tutorials/Meet-AdSDK/Extending-the-SDK-with-your-custom-advertisements":{"kind":"article","role":"article","abstract":[],"title":"Extending the SDK with your custom advertisements","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements","url":"\/tutorials\/meet-adsdk\/extending-the-sdk-with-your-custom-advertisements","type":"topic"},"doc://com.adsdk.core/documentation/AdSDKCore/AdController/update(_:_:)":{"title":"update(_:_:)","required":true,"role":"symbol","kind":"symbol","abstract":[{"text":"Passes new data received from the server to the controller.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"update"},{"text":"(","kind":"text"},{"text":"Data","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DataV"},{"text":", ","kind":"text"},{"text":"AdMetadata","preciseIdentifier":"s:9AdSDKCore0A8MetadataC","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic","url":"\/documentation\/adsdkcore\/adcontroller\/update(_:_:)","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdController\/update(_:_:)"},"doc://com.adsdk.core/tutorials/AdSDKCore/Load-And-Cache-Assets":{"estimatedTime":"15min","kind":"project","role":"project","abstract":[{"text":"Last time we created our custom advert, in which we display an image received from the server. This time, we will refactor the code related to loading the image and add caching.","type":"text"}],"title":"Download and cache ad assets in your custom ads","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Load-And-Cache-Assets","url":"\/tutorials\/adsdkcore\/load-and-cache-assets","type":"topic"},"doc://com.adsdk.core/tutorials/Meet-AdSDK/Working-with-the-built-in-capabilities-of-the-SDK":{"kind":"article","role":"article","abstract":[],"title":"Working with the built-in capabilities of the SDK","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK","url":"\/tutorials\/meet-adsdk\/working-with-the-built-in-capabilities-of-the-sdk","type":"topic"},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling#Observing-the-state-of-advertisements":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"title":"Observing the state of advertisements","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-state-of-advertisements","url":"\/tutorials\/adsdkcore\/state-and-event-handling#Observing-the-state-of-advertisements","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-AdRequest-Parameters#Modifying-global-parameters":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"We already know how to create an "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true},{"type":"text","text":". However, an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest"},{"type":"text","text":" can have additional parameters beyond those you pass during initialization. These additional parameters are global for all "},{"type":"codeVoice","code":"AdRequests"},{"type":"text","text":". The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true,"type":"reference"},{"type":"text","text":"."}],"title":"Modifying global parameters","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters#Modifying-global-parameters","url":"\/tutorials\/adsdkcore\/global-adrequest-parameters#Modifying-global-parameters","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"title":"Registering a renderer in the SDK","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Registering-a-renderer-in-the-SDK","type":"section"},"doc://com.adsdk.core/tutorials/Meet-AdSDK":{"abstract":[{"type":"text","text":"Manage, display, and create your custom advertisements on iOS using cutting-edge technologies such as Combine, Modern Concurrency, and SwiftUI based on the AdSDK."}],"url":"\/tutorials\/meet-adsdk","title":"Meet nextgen AdSDK","role":"overview","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","type":"topic","kind":"overview"},"doc://com.adsdk.core/documentation/AdSDKCore/AssetRepository/loadAssets(_:stateSubject:)":{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRepository\/loadAssets(_:stateSubject:)","url":"\/documentation\/adsdkcore\/assetrepository\/loadassets(_:statesubject:)","required":true,"kind":"symbol","title":"loadAssets(_:stateSubject:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"loadAssets"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">([","kind":"text"},{"text":"AssetRequest","kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore12AssetRequestV"},{"kind":"text","text":"], "},{"text":"stateSubject","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"PassthroughSubject","preciseIdentifier":"s:7Combine18PassthroughSubjectC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore15AssetRepositoryP10loadAssets_12stateSubject7Combine12AnyPublisherVySayAA0C6ResultVGAA0A5ErrorOGSayAA0C7RequestVG_AF011PassthroughH0Cyqd__s5NeverOGtAA0cD5StateRd__lF1TL_qd__mfp","text":"T"},{"text":", ","kind":"text"},{"text":"Never","preciseIdentifier":"s:s5NeverO","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:7Combine12AnyPublisherV","text":"AnyPublisher","kind":"typeIdentifier"},{"text":"<[","kind":"text"},{"text":"AssetResult","kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore11AssetResultV"},{"kind":"text","text":"], "},{"kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A5ErrorO","text":"AdError"},{"text":">","kind":"text"}],"role":"symbol","abstract":[{"text":"Loads an array of ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetResult","isActive":true},{"type":"text","text":" from an "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRequest","isActive":true,"type":"reference"},{"type":"text","text":" or retrieves it from the cache."}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Load-And-Cache-Assets#Asset-loading-and-caching":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"Last time we created our custom advert, in which we display an image received from the server. This time, we will refactor the code related to loading the image and add caching.","type":"text"}],"title":"Asset loading and caching","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Load-And-Cache-Assets#Asset-loading-and-caching","url":"\/tutorials\/adsdkcore\/load-and-cache-assets#Asset-loading-and-caching","type":"section"},"01-load-and-cache-assets.swift":{"content":["\/\/ ...","@Observable","final class MyCustomAdController: AdController {","    \/\/ ...","    private(set) var imageData: Data?","","    private let stateSubject = PassthroughSubject<AdControllerState, Never>()","    \/\/ ...","","    init(_ assetRepository: AssetRepository) {}","","    func update(_ data: Data, _ metadata: AdMetadata) {","        subscription = Just(data)","            .decode(type: MyResponse.self, decoder: JSONDecoder())","            .mapError { _ in AdError.decoding }","            .flatMap { response in","                URLSession.shared.dataTaskPublisher(for: response.myImage)","                    .map { $0.data }","                    .mapError { _ in AdError.unspecifiedNetworkError }","                    .eraseToAnyPublisher()","            }","            .sink { [weak self] completion in","                guard case .failure(let error) = completion else { return }","","                self?.stateSubject.send(.error(error))","","            } receiveValue: { [weak self] imageData in","                self?.imageData = imageData","                self?.stateSubject.send(.readyToPresent)","            }","    }","    \/\/ ...","}","\/\/ ..."],"identifier":"01-load-and-cache-assets.swift","fileType":"swift","type":"file","fileName":"MyCustomAd.swift","syntax":"swift","highlights":[]},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Loading-and-displaying-advertisements":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial will guide you in creating a simple app that can load and display a list of advertisement.","type":"text"}],"title":"Loading and displaying advertisements","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Loading-and-displaying-advertisements","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Loading-and-displaying-advertisements","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Defining-Size-Of-Ad#Defining-the-size-of-the-advertisement":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial will teach you how to define the size of the advertisement, taking into account the aspect ratio parameter. In it, we will continue the development of the application we started in the previous section."}],"title":"Defining the size of the advertisement","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad#Defining-the-size-of-the-advertisement","url":"\/tutorials\/adsdkcore\/defining-size-of-ad#Defining-the-size-of-the-advertisement","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#First-steps-for-working-with-AdSDK":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial will guide you in creating a simple app that can load and display a list of advertisement.","type":"text"}],"type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#First-steps-for-working-with-AdSDK","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#First-steps-for-working-with-AdSDK","title":"First steps for working with AdSDK"},"doc://com.adsdk.core/documentation/AdSDKCore/AssetResult":{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetResult","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AssetResult"}],"url":"\/documentation\/adsdkcore\/assetresult","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AssetResult","kind":"identifier"}],"type":"topic","abstract":[{"text":"Result of ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRepository\/loadAssets(_:stateSubject:)","isActive":true},{"text":" method.","type":"text"}],"title":"AssetResult","role":"symbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-and-Display-Interstitial-Ad#Interstitial-Ad-Object":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application.","type":"text"}],"type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad#Interstitial-Ad-Object","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Interstitial-Ad-Object","title":"Interstitial Ad Object"},"doc://com.adsdk.core/documentation/AdSDKCore/AssetRequest/url":{"title":"url","role":"symbol","kind":"symbol","abstract":[{"text":"An URL where asset are found.","type":"text"}],"fragments":[{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"kind":"identifier","text":"url"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV","text":"URL"}],"type":"topic","url":"\/documentation\/adsdkcore\/assetrequest\/url","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRequest\/url"},"06-load-and-cache-assets.swift":{"content":["\/\/ ...","@Observable","final class MyCustomAdController: AdController {","    \/\/ ...","    private(set) var imageData: Data?","","    private let stateSubject = PassthroughSubject<AdControllerState, Never>()","    \/\/ ...","    private let assetRepository: AssetRepository","","    init(_ assetRepository: AssetRepository) {","        self.assetRepository = assetRepository","    }","","    func update(_ data: Data, _ metadata: AdMetadata) {","        subscription = Just(data)","            .decode(type: MyResponse.self, decoder: JSONDecoder())","            .mapError { _ in AdError.decoding }","            .flatMap { [weak self] response -> AnyPublisher<Data, AdError> in","                guard let self else {","                    return Fail(error: AdError.reference)","                        .eraseToAnyPublisher()","                }","","                return loadAndCacheImage(url: response.myImage)","            }","            .sink { [weak self] completion in","                guard case .failure(let error) = completion else { return }","","                self?.stateSubject.send(.error(error))","","            } receiveValue: { [weak self] imageData in","                self?.imageData = imageData","                self?.stateSubject.send(.readyToPresent)","            }","    }","    \/\/ ...","}","","private extension MyCustomAdController {","    func loadAndCacheImage(url: URL) -> AnyPublisher<Data, AdError> {","        let request = AssetRequest(id: \"any_id\", url: url)","","        return assetRepository","            .loadAssets(","                [request],","                stateSubject: stateSubject","            )","            .tryMap { results in","                guard let result = results.first else {","                    throw AdError.resourceUnavailable","                }","","                return result.data","            }","            .mapError {","                guard $0 as? AdError else {","                    return AdError.resourceUnavailable","                }","","                return $0","            }","            .eraseToAnyPublisher()","    }","}","\/\/ ..."],"identifier":"06-load-and-cache-assets.swift","type":"file","fileType":"swift","fileName":"MyCustomAd.swift","syntax":"swift","highlights":[{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads":{"estimatedTime":"20min","kind":"project","role":"project","abstract":[{"text":"This tutorial will guide you in creating a simple app that can load and display a list of advertisement.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads","title":"Create and display inline ads"},"03-load-and-cache-assets.swift":{"content":["\/\/ ...","@Observable","final class MyCustomAdController: AdController {","    \/\/ ...","    private(set) var imageData: Data?","","    private let stateSubject = PassthroughSubject<AdControllerState, Never>()","    \/\/ ...","    private let assetRepository: AssetRepository","","    init(_ assetRepository: AssetRepository) {","        self.assetRepository = assetRepository","    }","","    func update(_ data: Data, _ metadata: AdMetadata) {","        subscription = Just(data)","            .decode(type: MyResponse.self, decoder: JSONDecoder())","            .mapError { _ in AdError.decoding }","            .flatMap { [weak self] response -> AnyPublisher<Data, AdError> in","                guard let self else {","                    return Fail(error: AdError.reference)","                        .eraseToAnyPublisher()","                }","","                return loadAndCacheImage(url: response.myImage)","            }","            .sink { [weak self] completion in","                guard case .failure(let error) = completion else { return }","","                self?.stateSubject.send(.error(error))","","            } receiveValue: { [weak self] imageData in","                self?.imageData = imageData","                self?.stateSubject.send(.readyToPresent)","            }","    }","    \/\/ ...","}","","private extension MyCustomAdController {","    func loadAndCacheImage(url: URL) -> AnyPublisher<Data, AdError> {","        let request = AssetRequest(id: \"any_id\", url: url)","    }","}","\/\/ ..."],"identifier":"03-load-and-cache-assets.swift","fileType":"swift","type":"file","fileName":"MyCustomAd.swift","syntax":"swift","highlights":[{"line":42}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#State-and-event-management":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"title":"State and event management","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#State-and-event-management","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#State-and-event-management","type":"section"},"doc://com.adsdk.core/documentation/AdSDKCore/AssetRepository":{"navigatorTitle":[{"text":"AssetRepository","kind":"identifier"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRepository","url":"\/documentation\/adsdkcore\/assetrepository","role":"symbol","title":"AssetRepository","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AssetRepository"}],"abstract":[{"text":"Asset loading service.","type":"text"}],"kind":"symbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling#Observing-the-advertising-events":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section."}],"type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-advertising-events","url":"\/tutorials\/adsdkcore\/state-and-event-handling#Observing-the-advertising-events","title":"Observing the advertising events"},"doc://com.adsdk.core/documentation/AdSDKCore/AdControllerState/caching":{"fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"caching","kind":"identifier"}],"role":"symbol","title":"AdControllerState.caching","abstract":[{"type":"text","text":"Signals that the controller is currently caching resources."}],"type":"topic","kind":"symbol","url":"\/documentation\/adsdkcore\/adcontrollerstate\/caching","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdControllerState\/caching"},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling":{"estimatedTime":"25min","kind":"project","role":"project","abstract":[{"text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling","url":"\/tutorials\/adsdkcore\/state-and-event-handling","title":"Handling the state and events of advertising"},"05-load-and-cache-assets.swift":{"content":["\/\/ ...","@Observable","final class MyCustomAdController: AdController {","    \/\/ ...","    private(set) var imageData: Data?","","    private let stateSubject = PassthroughSubject<AdControllerState, Never>()","    \/\/ ...","    private let assetRepository: AssetRepository","","    init(_ assetRepository: AssetRepository) {","        self.assetRepository = assetRepository","    }","","    func update(_ data: Data, _ metadata: AdMetadata) {","        subscription = Just(data)","            .decode(type: MyResponse.self, decoder: JSONDecoder())","            .mapError { _ in AdError.decoding }","            .flatMap { [weak self] response -> AnyPublisher<Data, AdError> in","                guard let self else {","                    return Fail(error: AdError.reference)","                        .eraseToAnyPublisher()","                }","","                return loadAndCacheImage(url: response.myImage)","            }","            .sink { [weak self] completion in","                guard case .failure(let error) = completion else { return }","","                self?.stateSubject.send(.error(error))","","            } receiveValue: { [weak self] imageData in","                self?.imageData = imageData","                self?.stateSubject.send(.readyToPresent)","            }","    }","    \/\/ ...","}","","private extension MyCustomAdController {","    func loadAndCacheImage(url: URL) -> AnyPublisher<Data, AdError> {","        let request = AssetRequest(id: \"any_id\", url: url)","","        return assetRepository","            .loadAssets(","                [request],","                stateSubject: stateSubject","            )","    }","}","\/\/ ..."],"identifier":"05-load-and-cache-assets.swift","type":"file","fileType":"swift","fileName":"MyCustomAd.swift","syntax":"swift","highlights":[{"line":47}]},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling#Handling-errors-during-the-loading-and-decoding-of-advertisements":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Handling-errors-during-the-loading-and-decoding-of-advertisements","url":"\/tutorials\/adsdkcore\/state-and-event-handling#Handling-errors-during-the-loading-and-decoding-of-advertisements","title":"Handling errors during the loading and decoding of advertisements"},"doc://com.adsdk.core/documentation/AdSDKCore/AssetResult/id":{"fragments":[{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"text":"id","kind":"identifier"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"}],"role":"symbol","title":"id","abstract":[{"type":"text","text":"The id associated with this asset."}],"type":"topic","kind":"symbol","url":"\/documentation\/adsdkcore\/assetresult\/id","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetResult\/id"},"doc://com.adsdk.core/documentation/AdSDKCore/AdRequest":{"abstract":[{"text":"Describes a request to load an advertisement.","type":"text"}],"title":"AdRequest","url":"\/documentation\/adsdkcore\/adrequest","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AdRequest","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","navigatorTitle":[{"kind":"identifier","text":"AdRequest"}],"kind":"symbol"},"02-load-and-cache-assets.swift":{"content":["\/\/ ...","@Observable","final class MyCustomAdController: AdController {","    \/\/ ...","    private(set) var imageData: Data?","","    private let stateSubject = PassthroughSubject<AdControllerState, Never>()","    \/\/ ...","    private let assetRepository: AssetRepository","","    init(_ assetRepository: AssetRepository) {","        self.assetRepository = assetRepository","    }","","    func update(_ data: Data, _ metadata: AdMetadata) {","        subscription = Just(data)","            .decode(type: MyResponse.self, decoder: JSONDecoder())","            .mapError { _ in AdError.decoding }","            .flatMap { [weak self] response -> AnyPublisher<Data, AdError> in","                guard let self else {","                    return Fail(error: AdError.reference)","                        .eraseToAnyPublisher()","                }","","                return loadAndCacheImage(url: response.myImage)","            }","            .sink { [weak self] completion in","                guard case .failure(let error) = completion else { return }","","                self?.stateSubject.send(.error(error))","","            } receiveValue: { [weak self] imageData in","                self?.imageData = imageData","                self?.stateSubject.send(.readyToPresent)","            }","    }","    \/\/ ...","}","","private extension MyCustomAdController {","    func loadAndCacheImage(url: URL) -> AnyPublisher<Data, AdError> {","","    }","}","\/\/ ..."],"identifier":"02-load-and-cache-assets.swift","fileType":"swift","type":"file","fileName":"MyCustomAd.swift","syntax":"swift","highlights":[{"line":9},{"line":11},{"line":12},{"line":13},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Defining-Size-Of-Ad":{"estimatedTime":"15min","kind":"project","role":"project","abstract":[{"text":"This tutorial will teach you how to define the size of the advertisement, taking into account the aspect ratio parameter. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad","url":"\/tutorials\/adsdkcore\/defining-size-of-ad","title":"Defining the size of the advertisement"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-and-Display-Interstitial-Ad#Presenting-interstitial":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application.","type":"text"}],"type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad#Presenting-interstitial","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Presenting-interstitial","title":"Presenting interstitial"},"doc://com.adsdk.core/documentation/AdSDKCore/AssetRequest":{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AssetRequest","kind":"symbol","navigatorTitle":[{"text":"AssetRequest","kind":"identifier"}],"url":"\/documentation\/adsdkcore\/assetrequest","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AssetRequest","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Describes a request to load an asset."}],"title":"AssetRequest","role":"symbol"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising":{"estimatedTime":"1hr 0min","kind":"project","role":"project","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising","url":"\/tutorials\/adsdkcore\/creating-customised-advertising","title":"Creating customised advertising"},"04-load-and-cache-assets.swift":{"content":["\/\/ ...","@Observable","final class MyCustomAdController: AdController {","    \/\/ ...","    private(set) var imageData: Data?","","    private let stateSubject = PassthroughSubject<AdControllerState, Never>()","    \/\/ ...","    private let assetRepository: AssetRepository","","    init(_ assetRepository: AssetRepository) {","        self.assetRepository = assetRepository","    }","","    func update(_ data: Data, _ metadata: AdMetadata) {","        subscription = Just(data)","            .decode(type: MyResponse.self, decoder: JSONDecoder())","            .mapError { _ in AdError.decoding }","            .flatMap { [weak self] response -> AnyPublisher<Data, AdError> in","                guard let self else {","                    return Fail(error: AdError.reference)","                        .eraseToAnyPublisher()","                }","","                return loadAndCacheImage(url: response.myImage)","            }","            .sink { [weak self] completion in","                guard case .failure(let error) = completion else { return }","","                self?.stateSubject.send(.error(error))","","            } receiveValue: { [weak self] imageData in","                self?.imageData = imageData","                self?.stateSubject.send(.readyToPresent)","            }","    }","    \/\/ ...","}","","private extension MyCustomAdController {","    func loadAndCacheImage(url: URL) -> AnyPublisher<Data, AdError> {","        let request = AssetRequest(id: \"any_id\", url: url)","","        return assetRepository","            .loadAssets(","                [request],","                stateSubject: PassthroughSubject<AssetRepositoryState, Never>","            )","    }","}","\/\/ ..."],"identifier":"04-load-and-cache-assets.swift","type":"file","fileType":"swift","fileName":"MyCustomAd.swift","syntax":"swift","highlights":[{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-AdRequest-Parameters":{"estimatedTime":"10min","kind":"project","role":"project","abstract":[{"text":"We already know how to create an ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true,"type":"reference"},{"text":". However, an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest"},{"text":" can have additional parameters beyond those you pass during initialization. These additional parameters are global for all ","type":"text"},{"type":"codeVoice","code":"AdRequests"},{"type":"text","text":". The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true},{"type":"text","text":"."}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-AdRequest-Parameters","url":"\/tutorials\/adsdkcore\/global-adrequest-parameters","title":"Global AdRequest parameters"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Creating-a-presentation-layer":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using Nextgen AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"title":"Creating a presentation layer","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-presentation-layer","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Creating-a-presentation-layer","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-and-Display-Interstitial-Ad":{"estimatedTime":"15min","kind":"project","role":"project","abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}],"title":"Create and display interstitial ad","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-and-Display-Interstitial-Ad","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad","type":"topic"}},"variantOverrides":[{"patch":[{"value":"occ","path":"\/identifier\/interfaceLanguage","op":"replace"}],"traits":[{"interfaceLanguage":"occ"}]}]}