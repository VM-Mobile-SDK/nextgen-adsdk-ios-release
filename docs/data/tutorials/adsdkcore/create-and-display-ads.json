{"sections":[{"kind":"hero","estimatedTimeInMinutes":15,"chapter":"Working with the built-in capabilities of the SDK","title":"Create And Display Ads","content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial will guide you in creating a simple app that can load and display a list of advertisement.","type":"text"}]}]},{"kind":"tasks","tasks":[{"title":"First steps for working with AdSDK","contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"Create and configure AdSDK for the subsequent creation and loading of advertisements.","type":"text"}]}],"kind":"contentAndMedia"}],"anchor":"First-steps-for-working-with-AdSDK","stepsSection":[{"media":null,"runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s create a new iOS project and your first ViewModel for the app. In this ViewModel, we’ll add an "},{"type":"codeVoice","code":"AppState"},{"text":" state property to represent the state of our application.","type":"text"}]}],"type":"step","code":"01-create-display-ads.swift"},{"media":null,"code":"02-create-display-ads.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The entry point into the SDK is the "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService","type":"reference"},{"text":" class. This is the first thing we should create, as it will be used to generate advertisements in the future. To do this, import AdSDKCore and AdSDKSwiftUI, then add the initialization code for ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService"},{"type":"text","text":" inside the "},{"code":"TutorialViewModel","type":"codeVoice"},{"type":"text","text":"."}]}],"type":"step","caption":[{"inlineContent":[{"text":"The only mandatory parameter when creating AdService is the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService\/networkID"},{"type":"text","text":". Network ID is the ID of your advertising account."}],"type":"paragraph"}]},{"caption":[],"media":null,"code":"03-create-display-ads.swift","runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"The next step will be to create the next screen, which we will display upon successful creation of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService"},{"type":"text","text":". On this screen, we will be creating and displaying our advertisement."}],"type":"paragraph"}]}]},{"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Your "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService"},{"type":"text","text":" is ready for creating advertisements, so in this section, we will load our advertising."}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"anchor":"Loading-and-displaying-advertisements","title":"Loading and displaying advertisements","stepsSection":[{"type":"step","content":[{"inlineContent":[{"text":"We will continue development with the ","type":"text"},{"type":"codeVoice","code":"FirstScreen"},{"text":" and add the logic for loading advertisements to it.","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"runtimePreview":null,"code":"03-create-display-ads.swift"},{"media":null,"code":"04-create-display-ads.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To create advertisements, we use the "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService\/makeAdvertisement(request:placementType:targetURLHandler:)","isActive":true},{"text":" method. In this method, we need to pass an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest"},{"type":"text","text":", where the only mandatory parameter is the "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest\/contentUnit","type":"reference","isActive":true},{"type":"text","text":". Content Unit is the unique ID of your advertising space. This method returns an "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true},{"type":"text","text":" object, which essentially is the advertisement you will be displaying."}]}],"caption":[{"inlineContent":[{"text":"Another important parameter is ","type":"text"},{"code":"placementType","type":"codeVoice"},{"type":"text","text":". In this case, we need "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdPlacementType\/inline","isActive":true},{"text":", which is the standard, so we ignore it.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"type":"step"},{"type":"step","media":null,"caption":[],"code":"05-create-display-ads.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Now let’s create a separate view for the cell that we will display in the List.","type":"text"}]}]},{"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You may notice a couple of drawbacks in our code: we are not utilizing other states of "},{"type":"codeVoice","code":"CellState"},{"type":"text","text":". As you remember, creating an "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"text":" object can return an error, but this error is not related to loading the advertising content. The loading happens inside the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":", so later we will explore how to track changes in the states of the "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true},{"type":"text","text":" object. The same can be said for the size of the advertisement on the screen; we need to understand what size should be set for "},{"type":"codeVoice","code":"AdView"},{"type":"text","text":". We will cover all of this in the next chapter, but for now, let’s just pass "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference","isActive":true},{"type":"text","text":" to "},{"code":"AdView","type":"codeVoice"},{"type":"text","text":"."}]}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"We can add ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" to the initializer, retain a strong reference to it, and then immediately send it to "},{"type":"codeVoice","code":"CellState"},{"type":"text","text":". In turn, in the SwiftUI view, we added "},{"type":"codeVoice","code":"AdView"},{"type":"text","text":", to which we pass "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":". ","type":"text"},{"type":"codeVoice","code":"AdView"},{"type":"text","text":" is a part of AdSDKSwiftUI that allows displaying our "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference","isActive":true},{"text":" on the screen. You can think of ","type":"text"},{"code":"AdView","type":"codeVoice"},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":" as the ","type":"text"},{"code":"View Model","type":"codeVoice"},{"type":"text","text":" and "},{"code":"View","type":"codeVoice"},{"text":" in the MVVM pattern. Due to this separation, you can preload ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":" on one of the screens and display the already loaded content later in ","type":"text"},{"type":"codeVoice","code":"AdView"},{"type":"text","text":"."}]}],"media":null,"code":"06-create-display-ads.swift"},{"content":[{"inlineContent":[{"type":"text","text":"Let’s go back to "},{"type":"codeVoice","code":"FirstScreen"},{"text":".","type":"text"}],"type":"paragraph"}],"caption":[],"code":"04-create-display-ads.swift","media":null,"type":"step","runtimePreview":null},{"media":null,"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now you can successfully launch the application and see the advertisement in it."}]}],"runtimePreview":"01-create-display-ads-screenshot.png","code":"07-create-display-ads.swift","content":[{"inlineContent":[{"type":"text","text":"Now we will add our "},{"code":"AdCellViewModel","type":"codeVoice"},{"type":"text","text":" as the data source for our list, and "},{"type":"codeVoice","code":"AdCell"},{"type":"text","text":" as an element in our list in SwiftUI View."}],"type":"paragraph"}]}]}]},{"kind":"callToAction","abstract":[{"type":"text","text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section."}],"title":"Handling the state and events of advertising","action":{"type":"reference","overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling"},"featuredEyebrow":"Tutorial"}],"hierarchy":{"modules":[{"projects":[{"sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Ads#First-steps-for-working-with-AdSDK","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Ads#Loading-and-displaying-advertisements","kind":"task"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Ads"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-state-of-advertisements"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Handling-errors-during-the-loading-and-decoding-of-advertisements"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-advertising-events","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad#Defining-the-size-of-the-advertisement"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK"}],"paths":[["doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/$volume","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK"]],"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Ads"},"metadata":{"role":"project","title":"Create And Display Ads","category":"Meet AdSDK","categoryPathComponent":"Meet-AdSDK"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/adsdkcore\/create-and-display-ads"]},{"paths":["\/tutorials\/adsdkcore\/create-and-display-ads"],"traits":[{"interfaceLanguage":"occ"}]}],"kind":"project","schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"07-create-display-ads.swift":{"type":"file","content":["import SwiftUI","import AdSDKCore","","struct FirstScreen: View {","    @State var viewModel: FirstScreenViewModel","","    var body: some View {","        List {","            ForEach(viewModel.ads) { ad in","                AdCell(viewModel: ad)","            }","        }","        .listStyle(.plain)","        .clipped()","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class FirstScreenViewModel {","    let adService: AdService","","    let myContentUnits: [UInt] = [4810915]","    var ads = [AdCellViewModel]()","","    init(_ service: AdService) {","        adService = service","        createAd()","    }","}","","private extension FirstScreenViewModel {","    func createAd() {","        for id in myContentUnits {","            let advertisement = adService.makeAdvertisement(","                request: .init(contentUnit: id)","            )","","            ads.append(.init(advertisement))","        }","    }","}"],"identifier":"07-create-display-ads.swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":25},{"line":39},{"line":40}],"fileType":"swift","syntax":"swift","fileName":"FirstScreen.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Defining-Size-Of-Ad":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad","title":"Defining the size of the advertisement","abstract":[{"text":"This tutorial will teach you how to define the size of the advertisement, taking into account the aspect ratio parameter. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"kind":"project","estimatedTime":"10min","url":"\/tutorials\/adsdkcore\/defining-size-of-ad","type":"topic","role":"project"},"doc://com.adsdk.core/documentation/AdSDKCore/AdRequest/contentUnit":{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest\/contentUnit","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"contentUnit"},{"kind":"text","text":": "},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/adsdkcore\/adrequest\/contentunit","kind":"symbol","role":"symbol","abstract":[{"text":"Unique ID of a content space in the ADITION ad-serving platform.","type":"text"}],"title":"contentUnit"},"doc://com.adsdk.core/documentation/AdSDKCore/AdService":{"url":"\/documentation\/adsdkcore\/adservice","type":"topic","title":"AdService","kind":"symbol","abstract":[{"text":"A key object for configuring your advertisements.","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AdService"}],"navigatorTitle":[{"kind":"identifier","text":"AdService"}]},"02-create-display-ads.swift":{"type":"file","content":["import SwiftUI","import AdSDKCore","import AdSDKSwiftUI","","@main","struct TutorialApp: App {","    @State var viewModel = TutorialViewModel()","","    var body: some Scene {","        WindowGroup {","            switch viewModel.state {","            case .loading:","                Text(\"Loading\")","            case .ready(let service):","                FirstScreen(viewModel: .init(service))","            case .error:","                Text(\"Error\")","            }","        }","    }","}","","\/\/ MARK: - View Model","@Observable","final class TutorialViewModel {","    var state: AppState = .loading","","    init() {","        createAdService()","    }","}","","private extension TutorialViewModel {","    func createAdService() {","        Task { @MainActor in","            do {","                let service = try await AdService.configure(networkID: 1800)","                state = .ready(service)","","            } catch {","                state = .error","            }","        }","    }","","    \/\/ Combine","    \/*","    func createAdService() {","        subscripton = AdService.configure(networkID: 1800)","            .sink { [unowned self] completion in","                guard case .failure(_) = completion else {","                    return","                }","","                state = .error","","            } receiveValue: { [unowned self] service in","                state = .ready(service)","            }","    }","    *\/","}","","\/\/ MARK: - Models","extension TutorialViewModel {","    enum AppState {","        case loading","        case ready(AdService)","        case error","    }","}"],"identifier":"02-create-display-ads.swift","highlights":[{"line":2},{"line":3},{"line":14},{"line":15},{"line":27},{"line":28},{"line":29},{"line":30},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":68}],"syntax":"swift","fileType":"swift","fileName":"TutorialApp.swift"},"01-create-display-ads-screenshot.png":{"alt":"An iPhone screen displaying a single advertisement with a smiling man at the computer.","identifier":"01-create-display-ads-screenshot.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/01-create-display-ads-screenshot.png"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Ads#First-steps-for-working-with-AdSDK":{"kind":"section","title":"First steps for working with AdSDK","url":"\/tutorials\/adsdkcore\/create-and-display-ads#First-steps-for-working-with-AdSDK","type":"section","abstract":[{"text":"This tutorial will guide you in creating a simple app that can load and display a list of advertisement.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Ads#First-steps-for-working-with-AdSDK"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Ads#Loading-and-displaying-advertisements":{"url":"\/tutorials\/adsdkcore\/create-and-display-ads#Loading-and-displaying-advertisements","type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Ads#Loading-and-displaying-advertisements","title":"Loading and displaying advertisements","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial will guide you in creating a simple app that can load and display a list of advertisement.","type":"text"}]},"doc://com.adsdk.core/tutorials/Meet-AdSDK":{"type":"topic","role":"overview","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","title":"Meet nextgen AdSDK","url":"\/tutorials\/meet-adsdk","kind":"overview","abstract":[{"text":"Manage, display, and create your custom advertisements on iOS using cutting-edge technologies such as Combine, Modern Concurrency, and SwiftUI based on the AdSDK.","type":"text"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling":{"type":"topic","role":"project","estimatedTime":"20min","title":"Handling the state and events of advertising","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling","url":"\/tutorials\/adsdkcore\/state-and-event-handling","kind":"project","abstract":[{"text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section.","type":"text"}]},"04-create-display-ads.swift":{"type":"file","content":["import SwiftUI","import AdSDKCore","","struct FirstScreen: View {","    @State var viewModel: FirstScreenViewModel","","    var body: some View {","        List {","            Text(\"Advertisement should be here\")","        }","        .listStyle(.plain)","        .clipped()","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class FirstScreenViewModel {","    let adService: AdService","","    let myContentUnits: [UInt] = [4810915]","","    init(_ service: AdService) {","        adService = service","        createAd()","    }","}","","private extension FirstScreenViewModel {","    func createAd() {","        for id in myContentUnits {","            let advertisement = adService.makeAdvertisement(","                request: .init(contentUnit: id)","            )","        }","    }","}"],"identifier":"04-create-display-ads.swift","highlights":[],"syntax":"swift","fileType":"swift","fileName":"FirstScreen.swift"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement":{"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Advertisement","kind":"identifier"}],"navigatorTitle":[{"text":"Advertisement","kind":"identifier"}],"title":"Advertisement","role":"symbol","abstract":[{"text":"A key object interface describing the advertisement.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","url":"\/documentation\/adsdkcore\/advertisement"},"doc://com.adsdk.core/documentation/AdSDKCore/AdService/makeAdvertisement(request:placementType:targetURLHandler:)":{"abstract":[{"type":"text","text":"Creating an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":" object and performing ad request.","type":"text"}],"title":"makeAdvertisement(request:placementType:targetURLHandler:)","role":"symbol","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService\/makeAdvertisement(request:placementType:targetURLHandler:)","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"makeAdvertisement","kind":"identifier"},{"text":"(","kind":"text"},{"text":"request","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore0A7RequestV","kind":"typeIdentifier","text":"AdRequest"},{"kind":"text","text":", "},{"kind":"externalParam","text":"placementType"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9AdSDKCore0A13PlacementTypeO","text":"AdPlacementType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"targetURLHandler","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore16TargetURLHandlerP","kind":"typeIdentifier","text":"TargetURLHandler"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore13AdvertisementP","text":"Advertisement"}],"url":"\/documentation\/adsdkcore\/adservice\/makeadvertisement(request:placementtype:targeturlhandler:)"},"doc://com.adsdk.core/tutorials/Meet-AdSDK/Working-with-the-built-in-capabilities-of-the-SDK":{"type":"topic","abstract":[],"url":"\/tutorials\/meet-adsdk\/working-with-the-built-in-capabilities-of-the-sdk","title":"Working with the built-in capabilities of the SDK","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK","kind":"article","role":"article"},"doc://com.adsdk.core/documentation/AdSDKCore/AdPlacementType/inline":{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdPlacementType\/inline","abstract":[],"title":"AdPlacementType.inline","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"inline"}],"url":"\/documentation\/adsdkcore\/adplacementtype\/inline","type":"topic"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Ads":{"type":"topic","role":"project","estimatedTime":"15min","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Ads","title":"Create And Display Ads","url":"\/tutorials\/adsdkcore\/create-and-display-ads","kind":"project","abstract":[{"text":"This tutorial will guide you in creating a simple app that can load and display a list of advertisement.","type":"text"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/Defining-Size-Of-Ad#Defining-the-size-of-the-advertisement":{"url":"\/tutorials\/adsdkcore\/defining-size-of-ad#Defining-the-size-of-the-advertisement","type":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Defining-Size-Of-Ad#Defining-the-size-of-the-advertisement","title":"Defining the size of the advertisement","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial will teach you how to define the size of the advertisement, taking into account the aspect ratio parameter. In it, we will continue the development of the application we started in the previous section.","type":"text"}]},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling#Observing-the-state-of-advertisements":{"type":"section","abstract":[{"text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"url":"\/tutorials\/adsdkcore\/state-and-event-handling#Observing-the-state-of-advertisements","title":"Observing the state of advertisements","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-state-of-advertisements","kind":"section","role":"pseudoSymbol"},"05-create-display-ads.swift":{"type":"file","content":["import SwiftUI","","struct AdCell: View {","    @State var viewModel: AdCellViewModel","","    var body: some View {","        switch viewModel.state {","        case .loading:","            Text(\"Ad is loading\")","        case .ready:","            Text(\"Ad is loaded\")","        case .error:","            Text(\"Failed to load ad\")","        }","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","}","","\/\/ MARK: - Models","extension AdCellViewModel {","    enum CellState {","        case loading","        case ready","        case error","    }","}"],"identifier":"05-create-display-ads.swift","highlights":[],"fileType":"swift","syntax":"swift","fileName":"AdCell.swift"},"03-create-display-ads.swift":{"type":"file","content":["import SwiftUI","import AdSDKCore","","struct FirstScreen: View {","    @State var viewModel: FirstScreenViewModel","","    var body: some View {","        List {","            Text(\"Advertisement should be here\")","        }","        .listStyle(.plain)","        .clipped()","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class FirstScreenViewModel {","    let adService: AdService","","    init(_ service: AdService) {","        adService = service","    }","}"],"identifier":"03-create-display-ads.swift","highlights":[],"syntax":"swift","fileType":"swift","fileName":"FirstScreen.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling#Handling-errors-during-the-loading-and-decoding-of-advertisements":{"kind":"section","title":"Handling errors during the loading and decoding of advertisements","url":"\/tutorials\/adsdkcore\/state-and-event-handling#Handling-errors-during-the-loading-and-decoding-of-advertisements","type":"section","abstract":[{"text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Handling-errors-during-the-loading-and-decoding-of-advertisements"},"01-create-display-ads.swift":{"type":"file","content":["import SwiftUI","","@main","struct TutorialApp: App {","    @State var viewModel = TutorialViewModel()","","    var body: some Scene {","        WindowGroup {","            switch viewModel.state {","            case .loading:","                Text(\"Loading\")","            case .ready:","                Text(\"Ready\")","            case .error:","                Text(\"Error\")","            }","        }","    }","}","","\/\/ MARK: - View Model","@Observable","final class TutorialViewModel {","    var state: AppState = .loading","}","","\/\/ MARK: - Models","extension TutorialViewModel {","    enum AppState {","        case loading","        case ready","        case error","    }","}"],"identifier":"01-create-display-ads.swift","highlights":[],"fileType":"swift","syntax":"swift","fileName":"TutorialApp.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/State-And-Event-Handling#Observing-the-advertising-events":{"type":"section","abstract":[{"text":"This tutorial will help you observe and respond to changes in the state and events of advertisements. In it, we will continue the development of the application we started in the previous section.","type":"text"}],"url":"\/tutorials\/adsdkcore\/state-and-event-handling#Observing-the-advertising-events","title":"Observing the advertising events","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/State-And-Event-Handling#Observing-the-advertising-events","kind":"section","role":"pseudoSymbol"},"doc://com.adsdk.core/documentation/AdSDKCore/AdService/networkID":{"fragments":[{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"text":"networkID","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"}],"title":"networkID","kind":"symbol","url":"\/documentation\/adsdkcore\/adservice\/networkid","abstract":[{"type":"text","text":"The unique identifier of the ad network."}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService\/networkID","type":"topic","role":"symbol"},"06-create-display-ads.swift":{"type":"file","content":["import SwiftUI","import AdSDKCore","import AdSDKSwiftUI","","struct AdCell: View {","    @State var viewModel: AdCellViewModel","","    var body: some View {","        switch viewModel.state {","        case .loading:","            Text(\"Ad is loading\")","        case .ready(let ad):","            AdView(advertisement: ad)","        case .error:","            Text(\"Failed to load ad\")","        }","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id = UUID()","    var state: CellState = .loading","","    private let ad: Advertisement","","    init(_ ad: Advertisement) {","        self.ad = ad","        state = .ready(ad)","    }","}","","\/\/ MARK: - Models","extension AdCellViewModel {","    enum CellState {","        case loading","        case ready(Advertisement)","        case error","    }","}"],"identifier":"06-create-display-ads.swift","highlights":[{"line":2},{"line":3},{"line":12},{"line":13},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":39}],"syntax":"swift","fileType":"swift","fileName":"AdCell.swift"},"doc://com.adsdk.core/documentation/AdSDKCore/AdRequest":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AdRequest","kind":"identifier"}],"navigatorTitle":[{"text":"AdRequest","kind":"identifier"}],"title":"AdRequest","role":"symbol","abstract":[{"type":"text","text":"Describes a request to load an advertisement."}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","url":"\/documentation\/adsdkcore\/adrequest"}},"variantOverrides":[{"patch":[{"path":"\/identifier\/interfaceLanguage","value":"occ","op":"replace"}],"traits":[{"interfaceLanguage":"occ"}]}]}