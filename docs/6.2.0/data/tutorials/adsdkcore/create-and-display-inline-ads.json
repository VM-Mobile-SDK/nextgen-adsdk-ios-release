{"kind":"project","metadata":{"categoryPathComponent":"Meet-AdSDK","title":"Create and display inline ads","role":"project","category":"Meet AdSDK"},"sections":[{"estimatedTimeInMinutes":45,"kind":"hero","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy."}]},{"type":"paragraph","inlineContent":[{"text":"We will continue to build the app, so be sure to follow all the previous tutorials. You can download ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/VM-Mobile-SDK\/nextgen-adsdk-ios-tutorial\/tree\/built-in-capabilities\/create-inline-ads"},{"text":" which has already implemented all steps from this tutorial.","type":"text"}]}],"title":"Create and display inline ads","chapter":"Working with the built-in capabilities of the SDK"},{"tasks":[{"title":"Creating inline advertisements","stepsSection":[{"runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"text":"Let’s create ","type":"text"},{"code":"AdCell.swift","type":"codeVoice"},{"text":" in the ","type":"text"},{"type":"codeVoice","code":"Subviews"},{"type":"text","text":" folder. Since we plan to display multiple ads in the list, we will use it to display a single ad."}],"type":"paragraph"}],"media":"01-create-display-inline-ads-screenshot.png","type":"step","code":null},{"runtimePreview":null,"code":"01-create-display-inline-ads.swift","media":null,"content":[{"inlineContent":[{"type":"text","text":"Create an "},{"type":"codeVoice","code":"AdCell"},{"text":" and an ","type":"text"},{"type":"codeVoice","code":"AdCellViewModel"},{"type":"text","text":". In this case, the "},{"type":"codeVoice","code":"AdCellViewModel"},{"type":"text","text":" conform to the "},{"code":"Identifiable","type":"codeVoice"},{"text":" protocol for displaying in the list. Also, we pass the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService"},{"type":"text","text":" to the initialiser, which will be used to create the ad later."}],"type":"paragraph"}],"caption":[],"type":"step"},{"code":"02-create-display-inline-ads.swift","caption":[],"type":"step","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"type":"text","text":"To create advertisements, we use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService\/makeAdvertisement(request:placementType:targetURLHandler:eventDelegate:)"},{"type":"text","text":" method. The most important parameter now is "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","type":"reference","isActive":true},{"text":", which describes the request that will be sent to the server to receive ads. Let’s pass it through the initialiser and look at it in more detail later.","type":"text"}],"type":"paragraph"}]},{"code":"03-create-display-inline-ads.swift","media":null,"caption":[],"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you successfully create an ad, you will receive the downloaded "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference","isActive":true},{"type":"text","text":" object. You can think of it as a ViewModel that holds the data and state of your ad. We store this object and pass it to "},{"code":"AdCell","type":"codeVoice"},{"type":"text","text":"."}]}]},{"media":null,"content":[{"inlineContent":[{"text":"If we have an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" object, it remains to add a "},{"code":"View","type":"codeVoice"},{"text":". ","type":"text"},{"type":"codeVoice","code":"AdSDKSwiftUI"},{"text":" has ","type":"text"},{"type":"codeVoice","code":"AdView"},{"type":"text","text":", which is the presentation layer of your inline ad."}],"type":"paragraph"}],"caption":[],"code":"04-create-display-inline-ads.swift","type":"step","runtimePreview":null}],"contentSection":[{"content":[{"inlineContent":[{"text":"Your ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService"},{"type":"text","text":" is ready for creating advertisements, so in this section, we will create an "},{"type":"codeVoice","code":"AdCell"},{"text":" for future ad display.","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"anchor":"Creating-inline-advertisements"},{"anchor":"Defining-the-size-of-the-inline-ad","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Our ","type":"text"},{"type":"codeVoice","code":"AdCell"},{"type":"text","text":" can load and display ads, but how can we understand what size the "},{"type":"codeVoice","code":"AdView"},{"type":"text","text":" should be? In this section we will deal with this question."}]}]}],"title":"Defining the size of the inline ad","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As we already know, "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference"},{"text":" stores advertising data. Let’s try to get it! We can obtain all possible advertising data using ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/metadata","type":"reference","isActive":true},{"text":". This is the one we will use to obtain the size data.","type":"text"}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdMetadata","isActive":true},{"text":" is optional, but you can be sure that if you have not called the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/reload()"},{"type":"text","text":" method, the object will be present in the "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true},{"type":"text","text":"."}]}],"type":"aside","name":"Note"}],"media":null,"code":"04-create-display-inline-ads.swift","type":"step","runtimePreview":null},{"code":"05-create-display-inline-ads.swift","runtimePreview":null,"media":null,"type":"step","content":[{"inlineContent":[{"text":"We are interested in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdMetadata\/aspectRatio"},{"text":", which is optional. We have implemented the logic so that in cases where it is not present, we will use the 2:1 ratio.","type":"text"}],"type":"paragraph"}],"caption":[]},{"content":[{"inlineContent":[{"type":"text","text":"The last step is to pass this value to the "},{"code":"AdCell","type":"codeVoice"},{"type":"text","text":". After that, we can be sure that the ad size is displayed correctly."}],"type":"paragraph"}],"code":"06-create-display-inline-ads.swift","caption":[],"media":null,"type":"step","runtimePreview":null}]},{"title":"Creating and displaying a list of advertisements","anchor":"Creating-and-displaying-a-list-of-advertisements","stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Let’s create ","type":"text"},{"code":"InlineList.swift","type":"codeVoice"},{"type":"text","text":" in the "},{"code":"Screens","type":"codeVoice"},{"type":"text","text":" folder."}]}],"runtimePreview":null,"caption":[],"type":"step","media":"02-create-display-inline-ads-screenshot.png"},{"code":"07-create-display-inline-ads.swift","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"text":"This screen is responsible for creating ","type":"text"},{"type":"codeVoice","code":"AdCellViewModels"},{"text":" and displaying ","type":"text"},{"type":"codeVoice","code":"AdCells"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"step","caption":[{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We start the process of loading all the ads as soon as the screen appears, but you can implement your own logic with bash loading on scroll, or load ads before the screen is displayed, it all depends on your needs."}]}]}]},{"content":[{"inlineContent":[{"text":"Let’s focus our attention on the ","type":"text"},{"code":"fetchAds","type":"codeVoice"},{"type":"text","text":" method, because it is in this method that we will implement the logic for filling the "},{"type":"codeVoice","code":"dataSource"},{"type":"text","text":"."}],"type":"paragraph"}],"code":"08-create-display-inline-ads.swift","type":"step","caption":[],"media":null,"runtimePreview":null},{"caption":[{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"You can also use "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest\/learningTag","isActive":true},{"type":"text","text":", but we use "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest\/contentUnit","isActive":true},{"text":" in this tutorial because it is more commonly used.","type":"text"}],"type":"paragraph"}],"style":"note","name":"Note"}],"runtimePreview":null,"content":[{"inlineContent":[{"text":"As you may recall, to create an ad, we need an ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true,"type":"reference"},{"type":"text","text":". It describes the request that will be sent to the server to get an ad. The only mandatory field when creating is "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest\/contentUnit","isActive":true,"type":"reference"},{"text":" or ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest\/learningTag","type":"reference"},{"text":". Content unit is unique ID of a content space. We will create several ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true},{"type":"text","text":" with the same "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest\/contentUnit"},{"type":"text","text":"."}],"type":"paragraph"}],"media":null,"code":"09-create-display-inline-ads.swift","type":"step"},{"caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Time to load ads! Since the loading is async and we want to load all the ads in parallel, we’ll use a "},{"type":"codeVoice","code":"TaskGroup"},{"text":", and sort everything by ","type":"text"},{"type":"codeVoice","code":"id"},{"text":" after downloading.","type":"text"}],"type":"paragraph"}],"type":"step","code":"10-create-display-inline-ads.swift","runtimePreview":null},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Our screen is ready, now we just need to add it to the navigation stack. To do this, let’s return to "},{"code":"Main.swift","type":"codeVoice"},{"type":"text","text":"."}]}],"type":"step","media":null,"code":"11-create-display-inline-ads.swift","runtimePreview":null},{"runtimePreview":"03-create-display-inline-ads-screenshot.png","caption":[],"media":null,"content":[{"inlineContent":[{"text":"Let’s add the ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" to the "},{"code":"Main","type":"codeVoice"},{"text":" and implement a navigation to the ","type":"text"},{"type":"codeVoice","code":"InlineList"},{"type":"text","text":". Now, if you did everything right, you can launch the app and see the list of advertisement. Congratulations!"}],"type":"paragraph"}],"type":"step","code":"12-create-display-inline-ads.swift"}],"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Our ","type":"text"},{"type":"codeVoice","code":"AdCell"},{"type":"text","text":" is ready to load and display a single ad. In this section, we will create a new screen to display the list of advertisements."}]}],"mediaPosition":"trailing"}]},{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The AdSDK includes the functionality of tracking the percentage of ad visibility. The main work on setting up tracking is not on the app developer, but a small step is also required from the developer to ensure that the tracking works correctly."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You will learn more about tracking events on a "},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events","overridingTitle":"separate tutorial","type":"reference","overridingTitleInlineContent":[{"type":"text","text":"separate tutorial"}]},{"text":", and in this section, we will add functionality that will unlock the tracking of ad visibility on the screen.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Tracking-ad-visibility","stepsSection":[{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If your ad is on a screen that has "},{"type":"codeVoice","code":"ScrollView"},{"text":", it is useful for advertisers to track the percentage of the ad’s visibility on the screen. Let’s go back to ","type":"text"},{"type":"codeVoice","code":"InlineList.swift."}]}],"type":"step","media":null,"code":"13-create-display-inline-ads.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"To unlock this tracking in the SDK, all we need to do is add the ","type":"text"},{"type":"codeVoice","code":".adsContainer()"},{"text":" modifier to our ","type":"text"},{"type":"codeVoice","code":"ScrollView"},{"text":". Now the SDK will be able to track the percentage of ","type":"text"},{"type":"codeVoice","code":"AdView"},{"text":" visibility on the screen, and advertisers will be able to set up ads for tracking.","type":"text"}]}],"type":"step","caption":[],"media":null,"runtimePreview":null,"code":"14-create-display-inline-ads.swift"}],"title":"Tracking ad visibility"}],"kind":"tasks"},{"action":{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad","isActive":true,"overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}]},"abstract":[{"text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application.","type":"text"}],"kind":"callToAction","featuredEyebrow":"Tutorial","title":"Create and display interstitial ad"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/adsdkcore\/create-and-display-inline-ads"]},{"paths":["\/tutorials\/adsdkcore\/create-and-display-inline-ads"],"traits":[{"interfaceLanguage":"occ"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads"},"hierarchy":{"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","paths":[["doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/$volume","doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK"],["doc:\/\/com.adsdk.core\/documentation\/AdSDKCore"]],"modules":[{"projects":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK#AdService-creation"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-inline-advertisements","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Defining-the-size-of-the-inline-ad"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-and-displaying-a-list-of-advertisements"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Tracking-ad-visibility"}]},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Creating-interstitial-advertisements","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Presenting-interstitial-ad","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Hiding-interstitial-ad","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitoring-of-ad-related-events"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Request-to-unload-or-hide-ad"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tracking-events","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tap-events","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-custom-advertising-events","kind":"task"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events"},{"sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Preparing-the-app","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#User-tagging"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Conversion-tracking","kind":"task"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types","sections":[{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Preparing-the-app"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Modifying-global-parameters"}]},{"sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Limiting-the-cache-size","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Flushing-the-cache"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK"},{"projects":[{"sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Preparing-the-app","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Creating-a-target-URL-handler"}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising","sections":[{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-business-layer","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Event-management","kind":"task"},{"reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-presentation-layer","kind":"task"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK"},{"kind":"task","reference":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Advanced-management-of-advertising-resources"}]}],"reference":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements"}]},"references":{"doc://com.adsdk.core/tutorials/Meet-AdSDK/Extending-the-SDK-with-your-custom-advertisements":{"role":"article","kind":"article","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Extending-the-SDK-with-your-custom-advertisements","url":"\/tutorials\/meet-adsdk\/extending-the-sdk-with-your-custom-advertisements","abstract":[],"title":"Extending the SDK with your custom advertisements","type":"topic"},"doc://com.adsdk.core/documentation/AdSDKCore/AdRequest/contentUnit":{"kind":"symbol","type":"topic","title":"contentUnit","abstract":[{"type":"text","text":"Unique ID of a content space in the ADITION ad-serving platform."}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest\/contentUnit","fragments":[{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"text":"contentUnit","kind":"identifier"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":"?"}],"url":"\/documentation\/adsdkcore\/adrequest\/contentunit","role":"symbol"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/metadata":{"type":"topic","kind":"symbol","abstract":[{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdMetadata","isActive":true,"type":"reference"},{"text":" which contains the basic data about the ad and current renderer.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/metadata","url":"\/documentation\/adsdkcore\/advertisement\/metadata","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"metadata"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A8MetadataC","text":"AdMetadata"},{"text":"?","kind":"text"}],"role":"symbol","title":"metadata","required":true},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Event-management":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Event-management","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Event-management","kind":"section","role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads."}],"title":"Event management"},"doc://com.adsdk.core/tutorials/AdSDKCore/AdSDK-Cache-Management":{"kind":"project","role":"project","title":"AdSDK Cache Management","url":"\/tutorials\/adsdkcore\/adsdk-cache-management","type":"topic","abstract":[{"type":"text","text":"The SDK supports a persistent cache with resources related to ad, these can be banners or other resources, depending on the type of ad. In this tutorial, we’ll look at how an application developer can control the cache."}],"estimatedTime":"10min","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management"},"01-create-display-inline-ads.swift":{"fileName":"AdCell.swift","syntax":"swift","fileType":"swift","content":["import SwiftUI","import AdSDKCore","import AdSDKSwiftUI","","\/\/ MARK: - View","struct AdCell: View {","    @State var viewModel: AdCellViewModel","","    var body: some View {","        switch viewModel.state {","        case .loading:","            Text(\"Loading\")","        case .loaded:","            Text(\"Ad should be here\")","        case .error(let description):","            Text(\"Error: \\(description)\")","        }","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id: Int","    var state: CellState = .loading","","    init(id: Int, _ service: AdService) async {","        self.id = id","","        do {","            try await getAdvertisement(service)","","        } catch {","            state = .error(error.localizedDescription)","        }","    }","}","","private extension AdCellViewModel {","    func getAdvertisement(","        _ service: AdService","    ) async throws(AdError) {","","    }","}","","\/\/ MARK: - Models","extension AdCellViewModel {","    enum CellState {","        case loading","        case loaded","        case error(String)","    }","}"],"highlights":[],"type":"file","identifier":"01-create-display-inline-ads.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking":{"type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking","abstract":[{"type":"text","text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality."}],"url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking","role":"project","estimatedTime":"30min","kind":"project","title":"User tagging and conversion tracking"},"08-create-display-inline-ads.swift":{"syntax":"swift","type":"file","highlights":[{"line":1}],"identifier":"08-create-display-inline-ads.swift","fileName":"InlineList.swift","content":["\/\/ ...","extension InlineListViewModel {","    func fetchAds() async {","","    }","}"],"fileType":"swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Creating-and-displaying-a-list-of-advertisements":{"title":"Creating and displaying a list of advertisements","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-and-displaying-a-list-of-advertisements","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Creating-and-displaying-a-list-of-advertisements","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy."}],"type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad#Creating-interstitial-advertisements":{"title":"Creating interstitial advertisements","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Creating-interstitial-advertisements","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Creating-interstitial-advertisements","role":"pseudoSymbol","abstract":[{"text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application.","type":"text"}],"type":"section"},"13-create-display-inline-ads.swift":{"fileName":"InlineList.swift","syntax":"swift","fileType":"swift","content":["\/\/ ...","struct InlineList: View {","    @State var viewModel: InlineListViewModel","","    var body: some View {","        ScrollView {","            LazyVStack {","                ForEach(viewModel.dataSource) { viewModel in","                    AdCell(viewModel: viewModel)","                }","            }","        }","        .navigationTitle(\"Inline Ads List\")","        .task {","            await viewModel.fetchAds()","        }","    }","}","\/\/ ..."],"highlights":[],"type":"file","identifier":"13-create-display-inline-ads.swift"},"12-create-display-inline-ads.swift":{"syntax":"swift","type":"file","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21}],"identifier":"12-create-display-inline-ads.swift","fileName":"Main.swift","content":["\/\/ ...","struct Main: App {","    @State var viewModel = MainViewModel()","","    var body: some Scene {","        WindowGroup {","            NavigationStack {","                switch viewModel.state {","                case .loading:","                    Text(\"Loading\")","                        .task { await viewModel.configure() }","                case .ready(let adService):","                    VStack {","                        NavigationLink(\"Inline Ads List\") {","                            InlineList(viewModel: .init(adService))","                        }","                    }","","                case .error(let description):","                    Text(\"Error: \\(description)\")","                }","            }","        }","    }","}","\/\/ ..."],"fileType":"swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tracking-events":{"role":"pseudoSymbol","abstract":[{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference","isActive":true},{"text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"text":" and how we can interact with them.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tracking-events","type":"section","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitor-and-process-advertising-tracking-events","kind":"section","title":"Monitor and process advertising tracking events"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tap-events":{"title":"Monitor and process advertising tap events","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-advertising-tap-events","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitor-and-process-advertising-tap-events","role":"pseudoSymbol","abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement"},{"type":"text","text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"type":"text","text":" and how we can interact with them."}],"type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad","kind":"project","role":"project","type":"topic","abstract":[{"text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application.","type":"text"}],"estimatedTime":"25min","title":"Create and display interstitial ad"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad#Presenting-interstitial-ad":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Presenting-interstitial-ad","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Presenting-interstitial-ad","kind":"section","role":"pseudoSymbol","type":"section","abstract":[{"text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application.","type":"text"}],"title":"Presenting interstitial ad"},"02-create-display-inline-ads.swift":{"fileName":"AdCell.swift","syntax":"swift","fileType":"swift","content":["import SwiftUI","import AdSDKCore","import AdSDKSwiftUI","","\/\/ MARK: - View","struct AdCell: View {","    @State var viewModel: AdCellViewModel","","    var body: some View {","        switch viewModel.state {","        case .loading:","            Text(\"Loading\")","        case .loaded:","            Text(\"Ad should be here\")","        case .error(let description):","            Text(\"Error: \\(description)\")","        }","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id: Int","    var state: CellState = .loading","","    init(id: Int, _ service: AdService, _ request: AdRequest) async {","        self.id = id","","        do {","            try await getAdvertisement(service, request)","","        } catch {","            state = .error(error.localizedDescription)","        }","    }","}","","private extension AdCellViewModel {","    func getAdvertisement(","        _ service: AdService,","        _ request: AdRequest","    ) async throws(AdError) {","        try await service.makeAdvertisement(","            request: request,","            placementType: .inline, \/\/ .inline by default","            targetURLHandler: nil, \/\/ Can be skipped","            eventDelegate: nil \/\/ Can be skipped","        )","    }","}","","\/\/ MARK: - Models","extension AdCellViewModel {","    enum CellState {","        case loading","        case loaded","        case error(String)","    }","}"],"highlights":[{"line":28},{"line":32},{"line":42},{"line":43},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50}],"type":"file","identifier":"02-create-display-inline-ads.swift"},"doc://com.adsdk.core/documentation/AdSDKCore/AdRequest/learningTag":{"kind":"symbol","type":"topic","title":"learningTag","abstract":[{"text":"Key-value pairs that are attached to content units.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest\/learningTag","fragments":[{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"kind":"identifier","text":"learningTag"},{"text":": [","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":"]?"}],"url":"\/documentation\/adsdkcore\/adrequest\/learningtag","role":"symbol"},"doc://com.adsdk.core/documentation/AdSDKCore/AdService/makeAdvertisement(request:placementType:targetURLHandler:eventDelegate:)":{"title":"makeAdvertisement(request:placementType:targetURLHandler:eventDelegate:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeAdvertisement","kind":"identifier"},{"kind":"text","text":"("},{"text":"request","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AdRequest","preciseIdentifier":"s:9AdSDKCore0A7RequestV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"placementType"},{"text":": ","kind":"text"},{"text":"AdPlacementType","kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A13PlacementTypeO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"targetURLHandler"},{"text":": ","kind":"text"},{"text":"TargetURLHandler","preciseIdentifier":"s:9AdSDKCore16TargetURLHandlerP","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"text":"eventDelegate","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9AdSDKCore0A13EventDelegateP","text":"AdEventDelegate"},{"kind":"text","text":"?) "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore0A5ErrorO","text":"AdError","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:9AdSDKCore13AdvertisementP","text":"Advertisement","kind":"typeIdentifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Creating an "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true},{"type":"text","text":" object and performing ad request."}],"type":"topic","url":"\/documentation\/adsdkcore\/adservice\/makeadvertisement(request:placementtype:targeturlhandler:eventdelegate:)","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService\/makeAdvertisement(request:placementType:targetURLHandler:eventDelegate:)"},"09-create-display-inline-ads.swift":{"syntax":"swift","type":"file","highlights":[{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}],"identifier":"09-create-display-inline-ads.swift","fileName":"InlineList.swift","content":["\/\/ ...","extension InlineListViewModel {","    func fetchAds() async {","        let requests = Array(repeating: 4810915, count: 5).map {","            AdRequest(","                contentUnit: $0,","                profile: nil, \/\/ Can be skipped","                keywords: nil, \/\/ Can be skipped","                window: nil, \/\/ Can be skipped","                timeoutAfterSeconds: nil, \/\/ Can be skipped","                gdprPd: nil, \/\/ Can be skipped","                campaignId: nil, \/\/ Can be skipped","                bannerId: nil, \/\/ Can be skipped","                isSHBEnabled: nil, \/\/ Can be skipped","                dsa: nil \/\/ Can be skipped","            )","        }","    }","}"],"fileType":"swift"},"doc://com.adsdk.core/documentation/AdSDKCore/TrackingRequest":{"title":"TrackingRequest","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TrackingRequest","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Trigger a request for conversion tracking.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"TrackingRequest","kind":"identifier"}],"url":"\/documentation\/adsdkcore\/trackingrequest","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest"},"doc://com.adsdk.core/documentation/AdSDKCore/AdRequest":{"title":"AdRequest","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AdRequest","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Describes a request to load an advertisement.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"AdRequest","kind":"identifier"}],"url":"\/documentation\/adsdkcore\/adrequest","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest"},"doc://com.adsdk.core/documentation/AdSDKCore/AdService":{"role":"symbol","url":"\/documentation\/adsdkcore\/adservice","title":"AdService","kind":"symbol","abstract":[{"type":"text","text":"A key object for configuring your advertisements."}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AdService"}],"navigatorTitle":[{"text":"AdService","kind":"identifier"}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService"},"doc://com.adsdk.core/tutorials/AdSDKCore/First-Steps-For-Working-With-AdSDK":{"title":"First steps for working with AdSDK","kind":"project","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK","url":"\/tutorials\/adsdkcore\/first-steps-for-working-with-adsdk","role":"project","estimatedTime":"15min","abstract":[{"type":"text","text":"This tutorial will guide you the first steps for working with the "},{"code":"AdSDK","type":"codeVoice"},{"type":"text","text":" - creating an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService"},{"type":"text","text":"."}],"type":"topic"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement/reload()":{"url":"\/documentation\/adsdkcore\/advertisement\/reload()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"reload","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:9AdSDKCore0A5ErrorO","kind":"typeIdentifier","text":"AdError"},{"text":")","kind":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement\/reload()","required":true,"role":"symbol","abstract":[{"type":"text","text":"Reloads advertisement."}],"title":"reload()"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads","kind":"project","role":"project","type":"topic","abstract":[{"text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy.","type":"text"}],"estimatedTime":"45min","title":"Create and display inline ads"},"10-create-display-inline-ads.swift":{"fileName":"InlineList.swift","syntax":"swift","fileType":"swift","content":["\/\/ ...","extension InlineListViewModel {","    func fetchAds() async {","        let requests = Array(repeating: 4810915, count: 5).map {","            AdRequest(","                contentUnit: $0,","                profile: nil, \/\/ Can be skipped","                keywords: nil, \/\/ Can be skipped","                window: nil, \/\/ Can be skipped","                timeoutAfterSeconds: nil, \/\/ Can be skipped","                gdprPd: nil, \/\/ Can be skipped","                campaignId: nil, \/\/ Can be skipped","                bannerId: nil, \/\/ Can be skipped","                isSHBEnabled: nil, \/\/ Can be skipped","                dsa: nil \/\/ Can be skipped","            )","        }","","        dataSource = await getDataSource(service, requests)","    }","","    private nonisolated func getDataSource(","        _ service: AdService,","        _ requests: [AdRequest]","    ) async -> [AdCellViewModel] {","        await withTaskGroup(","            of: AdCellViewModel.self,","            returning: [AdCellViewModel].self","        ) { group in","            for i in Int.zero..<requests.count {","                let request = requests[i]","                group.addTask {","                    await .init(id: i, service, request)","                }","            }","","            let result = await group.reduce(","                into: [AdCellViewModel]()","            ) { result, cell in","                result.append(cell)","            }","","            return result.sorted { $0.id < $1.id }","        }","    }","}"],"highlights":[{"line":18},{"line":19},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45}],"type":"file","identifier":"10-create-display-inline-ads.swift"},"06-create-display-inline-ads.swift":{"syntax":"swift","type":"file","highlights":[{"line":13},{"line":15},{"line":16},{"line":41},{"line":67}],"identifier":"06-create-display-inline-ads.swift","fileName":"AdCell.swift","content":["import SwiftUI","import AdSDKCore","import AdSDKSwiftUI","","\/\/ MARK: - View","struct AdCell: View {","    @State var viewModel: AdCellViewModel","","    var body: some View {","        switch viewModel.state {","        case .loading:","            Text(\"Loading\")","        case let .loaded(advertisement, aspectRatio):","            AdView(advertisement: advertisement)","                .aspectRatio(aspectRatio, contentMode: .fit)","","        case .error(let description):","            Text(\"Error: \\(description)\")","        }","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id: Int","    var state: CellState = .loading","","    private var advertisement: Advertisement?","","    init(id: Int, _ service: AdService, _ request: AdRequest) async {","        self.id = id","","        do {","            let advertisement = try await getAdvertisement(service, request)","            self.advertisement = advertisement","","            let ratio = advertisement.metadata?.aspectRatio ?? 2","","            state = .loaded(advertisement, aspectRatio: ratio)","","        } catch {","            state = .error(error.localizedDescription)","        }","    }","}","","private extension AdCellViewModel {","    func getAdvertisement(","        _ service: AdService,","        _ request: AdRequest","    ) async throws(AdError) -> Advertisement {","        try await service.makeAdvertisement(","            request: request,","            placementType: .inline, \/\/ .inline by default","            targetURLHandler: nil, \/\/ Can be skipped","            eventDelegate: nil \/\/ Can be skipped","        )","    }","}","","\/\/ MARK: - Models","extension AdCellViewModel {","    enum CellState {","        case loading","        case loaded(Advertisement, aspectRatio: Double)","        case error(String)","    }","}"],"fileType":"swift"},"doc://com.adsdk.core/tutorials/Meet-AdSDK/Working-with-the-built-in-capabilities-of-the-SDK":{"title":"Working with the built-in capabilities of the SDK","kind":"article","identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK\/Working-with-the-built-in-capabilities-of-the-SDK","url":"\/tutorials\/meet-adsdk\/working-with-the-built-in-capabilities-of-the-sdk","role":"article","abstract":[],"type":"topic"},"03-create-display-inline-ads-screenshot.png":{"alt":"A phone screen with several advertising banners showing different characters from films and TV series.","type":"image","identifier":"03-create-display-inline-ads-screenshot.png","variants":[{"traits":["1x","light"],"url":"\/images\/com.adsdk.core\/03-create-display-inline-ads-screenshot.png"}]},"03-create-display-inline-ads.swift":{"syntax":"swift","type":"file","highlights":[{"line":13},{"line":28},{"line":29},{"line":34},{"line":35},{"line":36},{"line":48},{"line":62}],"identifier":"03-create-display-inline-ads.swift","fileName":"AdCell.swift","content":["import SwiftUI","import AdSDKCore","import AdSDKSwiftUI","","\/\/ MARK: - View","struct AdCell: View {","    @State var viewModel: AdCellViewModel","","    var body: some View {","        switch viewModel.state {","        case .loading:","            Text(\"Loading\")","        case .loaded(let advertisement):","            Text(\"Ad should be here\")","        case .error(let description):","            Text(\"Error: \\(description)\")","        }","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id: Int","    var state: CellState = .loading","","    private var advertisement: Advertisement?","","    init(id: Int, _ service: AdService, _ request: AdRequest) async {","        self.id = id","","        do {","            let advertisement = try await getAdvertisement(service, request)","            self.advertisement = advertisement","            state = .loaded(advertisement)","","        } catch {","            state = .error(error.localizedDescription)","        }","    }","}","","private extension AdCellViewModel {","    func getAdvertisement(","        _ service: AdService,","        _ request: AdRequest","    ) async throws(AdError) -> Advertisement {","        try await service.makeAdvertisement(","            request: request,","            placementType: .inline, \/\/ .inline by default","            targetURLHandler: nil, \/\/ Can be skipped","            eventDelegate: nil \/\/ Can be skipped","        )","    }","}","","\/\/ MARK: - Models","extension AdCellViewModel {","    enum CellState {","        case loading","        case loaded(Advertisement)","        case error(String)","    }","}"],"fileType":"swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Defining-the-size-of-the-inline-ad":{"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Defining-the-size-of-the-inline-ad","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Defining-the-size-of-the-inline-ad","abstract":[{"text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy.","type":"text"}],"title":"Defining the size of the inline ad","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-custom-advertising-events":{"role":"pseudoSymbol","abstract":[{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference","isActive":true},{"text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true},{"type":"text","text":" and how we can interact with them."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitor-and-process-custom-advertising-events","type":"section","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitor-and-process-custom-advertising-events","kind":"section","title":"Monitor and process custom advertising events"},"https://github.com/VM-Mobile-SDK/nextgen-adsdk-ios-tutorial/tree/built-in-capabilities/create-inline-ads":{"titleInlineContent":[{"text":"this project","type":"text"}],"type":"link","identifier":"https:\/\/github.com\/VM-Mobile-SDK\/nextgen-adsdk-ios-tutorial\/tree\/built-in-capabilities\/create-inline-ads","url":"https:\/\/github.com\/VM-Mobile-SDK\/nextgen-adsdk-ios-tutorial\/tree\/built-in-capabilities\/create-inline-ads","title":"this project"},"doc://com.adsdk.core/tutorials/AdSDKCore/AdSDK-Cache-Management#Flushing-the-cache":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Flushing-the-cache","url":"\/tutorials\/adsdkcore\/adsdk-cache-management#Flushing-the-cache","kind":"section","role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"The SDK supports a persistent cache with resources related to ad, these can be banners or other resources, depending on the type of ad. In this tutorial, we’ll look at how an application developer can control the cache."}],"title":"Flushing the cache"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Monitoring-of-ad-related-events":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Monitoring-of-ad-related-events","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Monitoring-of-ad-related-events","kind":"section","role":"pseudoSymbol","type":"section","abstract":[{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"type":"text","text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference","isActive":true},{"text":" and how we can interact with them.","type":"text"}],"title":"Monitoring of ad-related events"},"11-create-display-inline-ads.swift":{"syntax":"swift","type":"file","highlights":[],"identifier":"11-create-display-inline-ads.swift","fileName":"Main.swift","content":["\/\/ ...","@main","struct Main: App {","    @State var viewModel = MainViewModel()","","    var body: some Scene {","        WindowGroup {","            switch viewModel.state {","            case .loading:","                Text(\"Loading\")","                    .task { await viewModel.configure() }","            case .ready(let adService):","                Text(\"Ready\")","            case .error(let description):","                Text(\"Error: \\(description)\")","            }","        }","    }","}","\/\/ ..."],"fileType":"swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/AdSDK-Cache-Management#Limiting-the-cache-size":{"title":"Limiting the cache size","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/AdSDK-Cache-Management#Limiting-the-cache-size","url":"\/tutorials\/adsdkcore\/adsdk-cache-management#Limiting-the-cache-size","role":"pseudoSymbol","abstract":[{"type":"text","text":"The SDK supports a persistent cache with resources related to ad, these can be banners or other resources, depending on the type of ad. In this tutorial, we’ll look at how an application developer can control the cache."}],"type":"section"},"04-create-display-inline-ads.swift":{"fileName":"AdCell.swift","syntax":"swift","fileType":"swift","content":["import SwiftUI","import AdSDKCore","import AdSDKSwiftUI","","\/\/ MARK: - View","struct AdCell: View {","    @State var viewModel: AdCellViewModel","","    var body: some View {","        switch viewModel.state {","        case .loading:","            Text(\"Loading\")","        case .loaded(let advertisement):","            AdView(advertisement: advertisement)","        case .error(let description):","            Text(\"Error: \\(description)\")","        }","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id: Int","    var state: CellState = .loading","","    private var advertisement: Advertisement?","","    init(id: Int, _ service: AdService, _ request: AdRequest) async {","        self.id = id","","        do {","            let advertisement = try await getAdvertisement(service, request)","            self.advertisement = advertisement","            state = .loaded(advertisement)","","        } catch {","            state = .error(error.localizedDescription)","        }","    }","}","","private extension AdCellViewModel {","    func getAdvertisement(","        _ service: AdService,","        _ request: AdRequest","    ) async throws(AdError) -> Advertisement {","        try await service.makeAdvertisement(","            request: request,","            placementType: .inline, \/\/ .inline by default","            targetURLHandler: nil, \/\/ Can be skipped","            eventDelegate: nil \/\/ Can be skipped","        )","    }","}","","\/\/ MARK: - Models","extension AdCellViewModel {","    enum CellState {","        case loading","        case loaded(Advertisement)","        case error(String)","    }","}"],"highlights":[],"type":"file","identifier":"04-create-display-inline-ads.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Custom-Handling-Of-Target-Tap-URLs#Creating-a-target-URL-handler":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Creating-a-target-URL-handler","url":"\/tutorials\/adsdkcore\/custom-handling-of-target-tap-urls#Creating-a-target-URL-handler","kind":"section","role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"Sometimes you need to handle taps in your own way. For example, to display ads in the internal browser in the app. In this tutorial, we will learn how to customise the SDK’s tap handling behaviour."}],"title":"Creating a target URL handler"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising":{"estimatedTime":"1hr 30min","role":"project","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising","type":"topic","url":"\/tutorials\/adsdkcore\/creating-customised-advertising","kind":"project","title":"Creating customised advertising"},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking#Conversion-tracking":{"title":"Conversion tracking","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Conversion-tracking","url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking#Conversion-tracking","role":"pseudoSymbol","abstract":[{"type":"text","text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality."}],"type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking#User-tagging":{"role":"pseudoSymbol","abstract":[{"text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality.","type":"text"}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#User-tagging","type":"section","url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking#User-tagging","kind":"section","title":"User tagging"},"doc://com.adsdk.core/tutorials/AdSDKCore/Custom-Handling-Of-Target-Tap-URLs":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs","url":"\/tutorials\/adsdkcore\/custom-handling-of-target-tap-urls","kind":"project","role":"project","type":"topic","abstract":[{"text":"Sometimes you need to handle taps in your own way. For example, to display ads in the internal browser in the app. In this tutorial, we will learn how to customise the SDK’s tap handling behaviour.","type":"text"}],"estimatedTime":"20min","title":"Custom handling of target tap URLs"},"doc://com.adsdk.core/documentation/AdSDKCore/AdMetadata/aspectRatio":{"kind":"symbol","title":"aspectRatio","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"aspectRatio","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sd","text":"Double","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"role":"symbol","abstract":[{"text":"The aspect ratio of an advertising banner.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdMetadata\/aspectRatio","url":"\/documentation\/adsdkcore\/admetadata\/aspectratio"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Creating-a-presentation-layer":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-presentation-layer","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Creating-a-presentation-layer","kind":"section","role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads."}],"title":"Creating a presentation layer"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-Parameters-For-All-Request-Types":{"type":"topic","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types","abstract":[{"type":"text","text":"We already know how to create and perform "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest","type":"reference","isActive":true},{"text":", and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest"},{"text":". However, each of them can have additional parameters, which are called global parameters because they are specified globally for all requests. The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each request.","type":"text"}],"url":"\/tutorials\/adsdkcore\/global-parameters-for-all-request-types","role":"project","estimatedTime":"20min","kind":"project","title":"Global parameters for all request types"},"05-create-display-inline-ads.swift":{"syntax":"swift","type":"file","highlights":[{"line":36},{"line":37},{"line":38}],"identifier":"05-create-display-inline-ads.swift","fileName":"AdCell.swift","content":["import SwiftUI","import AdSDKCore","import AdSDKSwiftUI","","\/\/ MARK: - View","struct AdCell: View {","    @State var viewModel: AdCellViewModel","","    var body: some View {","        switch viewModel.state {","        case .loading:","            Text(\"Loading\")","        case .loaded(let advertisement):","            AdView(advertisement: advertisement)","        case .error(let description):","            Text(\"Error: \\(description)\")","        }","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class AdCellViewModel: Identifiable {","    let id: Int","    var state: CellState = .loading","","    private var advertisement: Advertisement?","","    init(id: Int, _ service: AdService, _ request: AdRequest) async {","        self.id = id","","        do {","            let advertisement = try await getAdvertisement(service, request)","            self.advertisement = advertisement","","            let ratio = advertisement.metadata?.aspectRatio ?? 2","","            state = .loaded(advertisement)","","        } catch {","            state = .error(error.localizedDescription)","        }","    }","}","","private extension AdCellViewModel {","    func getAdvertisement(","        _ service: AdService,","        _ request: AdRequest","    ) async throws(AdError) -> Advertisement {","        try await service.makeAdvertisement(","            request: request,","            placementType: .inline, \/\/ .inline by default","            targetURLHandler: nil, \/\/ Can be skipped","            eventDelegate: nil \/\/ Can be skipped","        )","    }","}","","\/\/ MARK: - Models","extension AdCellViewModel {","    enum CellState {","        case loading","        case loaded(Advertisement)","        case error(String)","    }","}"],"fileType":"swift"},"07-create-display-inline-ads.swift":{"fileName":"InlineList.swift","syntax":"swift","fileType":"swift","content":["import AdSDKCore","import AdSDKSwiftUI","import SwiftUI","","\/\/ MARK: - View","struct InlineList: View {","    @State var viewModel: InlineListViewModel","","    var body: some View {","        ScrollView {","            LazyVStack {","                ForEach(viewModel.dataSource) { viewModel in","                    AdCell(viewModel: viewModel)","                }","            }","        }","        .navigationTitle(\"Inline Ads List\")","        .task {","            await viewModel.fetchAds()","        }","    }","}","","\/\/ MARK: - View Model","@Observable","@MainActor","final class InlineListViewModel {","    var dataSource = [AdCellViewModel]()","","    private let service: AdService","","    init(_ service: AdService) {","        self.service = service","    }","}","","extension InlineListViewModel {","    func fetchAds() async {","","    }","}"],"highlights":[],"type":"file","identifier":"07-create-display-inline-ads.swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-Parameters-For-All-Request-Types#Modifying-global-parameters":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Modifying-global-parameters","url":"\/tutorials\/adsdkcore\/global-parameters-for-all-request-types#Modifying-global-parameters","kind":"section","role":"pseudoSymbol","type":"section","abstract":[{"text":"We already know how to create and perform ","type":"text"},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","type":"reference","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest","isActive":true,"type":"reference"},{"text":", and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest"},{"type":"text","text":". However, each of them can have additional parameters, which are called global parameters because they are specified globally for all requests. The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each request."}],"title":"Modifying global parameters"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Creating-inline-advertisements":{"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Creating-inline-advertisements","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Creating-inline-advertisements","abstract":[{"text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy.","type":"text"}],"title":"Creating inline advertisements","type":"section"},"02-create-display-inline-ads-screenshot.png":{"alt":"Xcode window showing the correct project structure with Screens\/InlineList.swift.","type":"image","identifier":"02-create-display-inline-ads-screenshot.png","variants":[{"traits":["1x","light"],"url":"\/images\/com.adsdk.core\/02-create-display-inline-ads-screenshot.png"}]},"doc://com.adsdk.core/documentation/AdSDKCore/AdMetadata":{"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"A class that contains the basic data about the advertisement and renderer."}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdMetadata","url":"\/documentation\/adsdkcore\/admetadata","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AdMetadata","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AdMetadata"}],"role":"symbol","title":"AdMetadata"},"doc://com.adsdk.core/tutorials/AdSDKCore/User-Tagging-And-Conversion-Tracking#Preparing-the-app":{"role":"pseudoSymbol","abstract":[{"type":"text","text":"AdSDK provides powerful functionality for user tagging and conversion tracking. In this tutorial, we will look at this functionality."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/User-Tagging-And-Conversion-Tracking#Preparing-the-app","type":"section","url":"\/tutorials\/adsdkcore\/user-tagging-and-conversion-tracking#Preparing-the-app","kind":"section","title":"Preparing the app"},"doc://com.adsdk.core/documentation/AdSDKCore/TagRequest":{"kind":"symbol","title":"TagRequest","type":"topic","abstract":[{"type":"text","text":"Describes a request to “tag” a user."}],"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TagRequest","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"TagRequest","kind":"identifier"}],"url":"\/documentation\/adsdkcore\/tagrequest"},"doc://com.adsdk.core/tutorials/AdSDKCore/Global-Parameters-For-All-Request-Types#Preparing-the-app":{"title":"Preparing the app","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Global-Parameters-For-All-Request-Types#Preparing-the-app","url":"\/tutorials\/adsdkcore\/global-parameters-for-all-request-types#Preparing-the-app","role":"pseudoSymbol","abstract":[{"type":"text","text":"We already know how to create and perform "},{"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdRequest","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TagRequest","isActive":true,"type":"reference"},{"type":"text","text":", and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/TrackingRequest"},{"type":"text","text":". However, each of them can have additional parameters, which are called global parameters because they are specified globally for all requests. The SDK provides the ability to add global parameters once so that you don’t have to copy them when creating each request."}],"type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/First-Steps-For-Working-With-AdSDK#AdService-creation":{"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/First-Steps-For-Working-With-AdSDK#AdService-creation","url":"\/tutorials\/adsdkcore\/first-steps-for-working-with-adsdk#AdService-creation","abstract":[{"text":"This tutorial will guide you the first steps for working with the ","type":"text"},{"code":"AdSDK","type":"codeVoice"},{"text":" - creating an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/AdService"},{"text":".","type":"text"}],"title":"AdService creation","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Inline-Ads#Tracking-ad-visibility":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Inline-Ads#Tracking-ad-visibility","url":"\/tutorials\/adsdkcore\/create-and-display-inline-ads#Tracking-ad-visibility","kind":"section","role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"This tutorial will guide you how to create and display inline ads. An inline ad is an ad created to be displayed in your view hierarchy."}],"title":"Tracking ad visibility"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Advanced-management-of-advertising-resources":{"title":"Advanced management of advertising resources","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Advanced-management-of-advertising-resources","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Advanced-management-of-advertising-resources","role":"pseudoSymbol","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"type":"section"},"doc://com.adsdk.core/documentation/AdSDKCore/Advertisement":{"url":"\/documentation\/adsdkcore\/advertisement","identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","title":"Advertisement","kind":"symbol","navigatorTitle":[{"text":"Advertisement","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Advertisement"}],"abstract":[{"text":"A key object interface describing the advertisement.","type":"text"}],"type":"topic","role":"symbol"},"doc://com.adsdk.core/tutorials/Meet-AdSDK":{"type":"topic","kind":"overview","abstract":[{"type":"text","text":"Manage, display, and create your custom advertisements on iOS using cutting-edge technologies such as Structured Concurrency, and SwiftUI."}],"identifier":"doc:\/\/com.adsdk.core\/tutorials\/Meet-AdSDK","url":"\/tutorials\/meet-adsdk","role":"overview","title":"Meet nextgen AdSDK"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Creating-a-business-layer":{"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Creating-a-business-layer","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Creating-a-business-layer","abstract":[{"type":"text","text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads."}],"title":"Creating a business layer","type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events":{"role":"project","estimatedTime":"1hr 0min","kind":"project","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events","title":"Monitor and process ad-related events","abstract":[{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"type":"text","text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by "},{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"type":"text","text":" and how we can interact with them."}],"type":"topic"},"doc://com.adsdk.core/tutorials/AdSDKCore/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK":{"title":"Registering a renderer in the SDK","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Creating-Customised-Advertising#Registering-a-renderer-in-the-SDK","url":"\/tutorials\/adsdkcore\/creating-customised-advertising#Registering-a-renderer-in-the-SDK","role":"pseudoSymbol","abstract":[{"text":"In this tutorial, we will learn how to create custom ads using AdSDK. This process is the same for both inline and interstitial ads.","type":"text"}],"type":"section"},"doc://com.adsdk.core/tutorials/AdSDKCore/Custom-Handling-Of-Target-Tap-URLs#Preparing-the-app":{"abstract":[{"text":"Sometimes you need to handle taps in your own way. For example, to display ads in the internal browser in the app. In this tutorial, we will learn how to customise the SDK’s tap handling behaviour.","type":"text"}],"url":"\/tutorials\/adsdkcore\/custom-handling-of-target-tap-urls#Preparing-the-app","kind":"section","role":"pseudoSymbol","type":"section","title":"Preparing the app","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Custom-Handling-Of-Target-Tap-URLs#Preparing-the-app"},"doc://com.adsdk.core/tutorials/AdSDKCore/Monitor-And-Process-Ad-Related-Events#Request-to-unload-or-hide-ad":{"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Monitor-And-Process-Ad-Related-Events#Request-to-unload-or-hide-ad","url":"\/tutorials\/adsdkcore\/monitor-and-process-ad-related-events#Request-to-unload-or-hide-ad","abstract":[{"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","isActive":true,"type":"reference"},{"text":" do a lot of work under the hood and can send messages about them to the app. In turn, you can monitor and react to it in some way. In this tutorial, we’ll look at what events are handled by ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.adsdk.core\/documentation\/AdSDKCore\/Advertisement","type":"reference"},{"type":"text","text":" and how we can interact with them."}],"title":"Request to unload or hide ad","type":"section"},"01-create-display-inline-ads-screenshot.png":{"alt":"Xcode window showing the correct project structure with Subviews\/AdCell.swift.","type":"image","identifier":"01-create-display-inline-ads-screenshot.png","variants":[{"url":"\/images\/com.adsdk.core\/01-create-display-inline-ads-screenshot.png","traits":["1x","light"]}]},"14-create-display-inline-ads.swift":{"syntax":"swift","type":"file","highlights":[{"line":13}],"identifier":"14-create-display-inline-ads.swift","fileName":"InlineList.swift","content":["\/\/ ...","struct InlineList: View {","    @State var viewModel: InlineListViewModel","","    var body: some View {","        ScrollView {","            LazyVStack {","                ForEach(viewModel.dataSource) { viewModel in","                    AdCell(viewModel: viewModel)","                }","            }","        }","        .adsContainer()","        .navigationTitle(\"Inline Ads List\")","        .task {","            await viewModel.fetchAds()","        }","    }","}","\/\/ ..."],"fileType":"swift"},"doc://com.adsdk.core/tutorials/AdSDKCore/Create-And-Display-Interstitial-Ad#Hiding-interstitial-ad":{"identifier":"doc:\/\/com.adsdk.core\/tutorials\/AdSDKCore\/Create-And-Display-Interstitial-Ad#Hiding-interstitial-ad","url":"\/tutorials\/adsdkcore\/create-and-display-interstitial-ad#Hiding-interstitial-ad","kind":"section","role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"A full-screen advertisement that fills the host app’s interface is known as an interstitial ad. In this tutorial we are going to add interstitial ad into our application."}],"title":"Hiding interstitial ad"}},"variantOverrides":[{"traits":[{"interfaceLanguage":"occ"}],"patch":[{"op":"replace","path":"\/identifier\/interfaceLanguage","value":"occ"}]}]}